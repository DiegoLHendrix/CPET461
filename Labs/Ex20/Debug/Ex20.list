
Ex20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bcc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005d6c  08005d6c  00006d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005df8  08005df8  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005df8  08005df8  00006df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e00  08005e00  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e00  08005e00  00006e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e04  08005e04  00006e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005e08  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042f4  20000060  08005e68  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004354  08005e68  00007354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018077  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003944  00000000  00000000  0001f107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  00022a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001147  00000000  00000000  00024080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f0f  00000000  00000000  000251c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae0c  00000000  00000000  0003e0d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ad00  00000000  00000000  00058ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3be2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006064  00000000  00000000  000f3c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000f9c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d54 	.word	0x08005d54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005d54 	.word	0x08005d54

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000007c 	.word	0x2000007c
 8000500:	2000011c 	.word	0x2000011c

08000504 <InitMailBox>:
SemaphoreHandle_t MailBoxMutex;
SemaphoreHandle_t SemaSync1;
SemaphoreHandle_t SemaSync2;

void InitMailBox(void)
{
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
	/**
	 * Create the queue(s)
	 * definition and creation of MessageQeue
	 */
	osMessageQDef(MessageQue, 1, uint16_t);
 800050a:	4b20      	ldr	r3, [pc, #128]	@ (800058c <InitMailBox+0x88>)
 800050c:	463c      	mov	r4, r7
 800050e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000510:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MessageQueHandle = osMessageCreate(osMessageQ(MessageQue), NULL);
 8000514:	463b      	mov	r3, r7
 8000516:	2100      	movs	r1, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f003 f89e 	bl	800365a <osMessageCreate>
 800051e:	4603      	mov	r3, r0
 8000520:	4a1b      	ldr	r2, [pc, #108]	@ (8000590 <InitMailBox+0x8c>)
 8000522:	6013      	str	r3, [r2, #0]

	MailBoxMutex = xSemaphoreCreateMutex();
 8000524:	2001      	movs	r0, #1
 8000526:	f003 fad0 	bl	8003aca <xQueueCreateMutex>
 800052a:	4603      	mov	r3, r0
 800052c:	4a19      	ldr	r2, [pc, #100]	@ (8000594 <InitMailBox+0x90>)
 800052e:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(MailBoxMutex);
 8000530:	4b18      	ldr	r3, [pc, #96]	@ (8000594 <InitMailBox+0x90>)
 8000532:	6818      	ldr	r0, [r3, #0]
 8000534:	2300      	movs	r3, #0
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	f003 fadf 	bl	8003afc <xQueueGenericSend>
	SemaSync1 = xSemaphoreCreateBinary();
 800053e:	2203      	movs	r2, #3
 8000540:	2100      	movs	r1, #0
 8000542:	2001      	movs	r0, #1
 8000544:	f003 fa4d 	bl	80039e2 <xQueueGenericCreate>
 8000548:	4603      	mov	r3, r0
 800054a:	4a13      	ldr	r2, [pc, #76]	@ (8000598 <InitMailBox+0x94>)
 800054c:	6013      	str	r3, [r2, #0]
	SemaSync2 = xSemaphoreCreateBinary();
 800054e:	2203      	movs	r2, #3
 8000550:	2100      	movs	r1, #0
 8000552:	2001      	movs	r0, #1
 8000554:	f003 fa45 	bl	80039e2 <xQueueGenericCreate>
 8000558:	4603      	mov	r3, r0
 800055a:	4a10      	ldr	r2, [pc, #64]	@ (800059c <InitMailBox+0x98>)
 800055c:	6013      	str	r3, [r2, #0]

	xSemaphoreTake(SemaSync1, 0);
 800055e:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <InitMailBox+0x94>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f003 fcad 	bl	8003ec4 <xQueueSemaphoreTake>
	xSemaphoreTake(SemaSync2, 0);
 800056a:	4b0c      	ldr	r3, [pc, #48]	@ (800059c <InitMailBox+0x98>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f003 fca7 	bl	8003ec4 <xQueueSemaphoreTake>
	xSemaphoreTake(MailBoxMutex, 0);
 8000576:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <InitMailBox+0x90>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f003 fca1 	bl	8003ec4 <xQueueSemaphoreTake>
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bd90      	pop	{r4, r7, pc}
 800058a:	bf00      	nop
 800058c:	08005d6c 	.word	0x08005d6c
 8000590:	2000031c 	.word	0x2000031c
 8000594:	20000320 	.word	0x20000320
 8000598:	20000324 	.word	0x20000324
 800059c:	20000328 	.word	0x20000328

080005a0 <Post>:

void Post(int syncMessage)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(SemaSync2);
 80005a8:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <Post+0x3c>)
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	2300      	movs	r3, #0
 80005ae:	2200      	movs	r2, #0
 80005b0:	2100      	movs	r1, #0
 80005b2:	f003 faa3 	bl	8003afc <xQueueGenericSend>
	xSemaphoreTake(SemaSync1, osWaitForever);
 80005b6:	4b0a      	ldr	r3, [pc, #40]	@ (80005e0 <Post+0x40>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f04f 31ff 	mov.w	r1, #4294967295
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 fc80 	bl	8003ec4 <xQueueSemaphoreTake>
	xQueueSendToBack(MessageQueHandle, &syncMessage, 0);
 80005c4:	4b07      	ldr	r3, [pc, #28]	@ (80005e4 <Post+0x44>)
 80005c6:	6818      	ldr	r0, [r3, #0]
 80005c8:	1d39      	adds	r1, r7, #4
 80005ca:	2300      	movs	r3, #0
 80005cc:	2200      	movs	r2, #0
 80005ce:	f003 fa95 	bl	8003afc <xQueueGenericSend>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000328 	.word	0x20000328
 80005e0:	20000324 	.word	0x20000324
 80005e4:	2000031c 	.word	0x2000031c

080005e8 <Pend>:

int Pend(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
	int data;
	xSemaphoreGive(SemaSync1);
 80005ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <Pend+0x3c>)
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	2200      	movs	r2, #0
 80005f6:	2100      	movs	r1, #0
 80005f8:	f003 fa80 	bl	8003afc <xQueueGenericSend>
	xSemaphoreTake(SemaSync2, osWaitForever);
 80005fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <Pend+0x40>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f04f 31ff 	mov.w	r1, #4294967295
 8000604:	4618      	mov	r0, r3
 8000606:	f003 fc5d 	bl	8003ec4 <xQueueSemaphoreTake>
	xQueueReceive(MessageQueHandle, &data, 1000);
 800060a:	4b08      	ldr	r3, [pc, #32]	@ (800062c <Pend+0x44>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	1d39      	adds	r1, r7, #4
 8000610:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000614:	4618      	mov	r0, r3
 8000616:	f003 fb73 	bl	8003d00 <xQueueReceive>

	return data;
 800061a:	687b      	ldr	r3, [r7, #4]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000324 	.word	0x20000324
 8000628:	20000328 	.word	0x20000328
 800062c:	2000031c 	.word	0x2000031c

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b092      	sub	sp, #72	@ 0x48
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fdd3 	bl	80011e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f84f 	bl	80006dc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800063e:	f000 f8b5 	bl	80007ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000642:	f000 f995 	bl	8000970 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000646:	f000 f8d1 	bl	80007ec <MX_I2C1_Init>
  MX_I2S2_Init();
 800064a:	f000 f8fd 	bl	8000848 <MX_I2S2_Init>
  MX_I2S3_Init();
 800064e:	f000 f929 	bl	80008a4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000652:	f000 f957 	bl	8000904 <MX_SPI1_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of QS2R */
  osMessageQDef(QS2R, 1, uint16_t);
 8000656:	4b1b      	ldr	r3, [pc, #108]	@ (80006c4 <main+0x94>)
 8000658:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800065c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800065e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QS2RHandle = osMessageCreate(osMessageQ(QS2R), NULL);
 8000662:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fff6 	bl	800365a <osMessageCreate>
 800066e:	4603      	mov	r3, r0
 8000670:	4a15      	ldr	r2, [pc, #84]	@ (80006c8 <main+0x98>)
 8000672:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Command */
  osThreadDef(Command, CommandTask, osPriorityNormal, 0, 128);
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <main+0x9c>)
 8000676:	f107 041c 	add.w	r4, r7, #28
 800067a:	461d      	mov	r5, r3
 800067c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000680:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000684:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommandHandle = osThreadCreate(osThread(Command), NULL);
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f002 ff83 	bl	800359a <osThreadCreate>
 8000694:	4603      	mov	r3, r0
 8000696:	4a0e      	ldr	r2, [pc, #56]	@ (80006d0 <main+0xa0>)
 8000698:	6013      	str	r3, [r2, #0]

  /* definition and creation of LedFlashing */
  osThreadDef(LedFlashing, LedFlashingTask, osPriorityNormal, 0, 128);
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <main+0xa4>)
 800069c:	463c      	mov	r4, r7
 800069e:	461d      	mov	r5, r3
 80006a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LedFlashingHandle = osThreadCreate(osThread(LedFlashing), NULL);
 80006ac:	463b      	mov	r3, r7
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 ff72 	bl	800359a <osThreadCreate>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a07      	ldr	r2, [pc, #28]	@ (80006d8 <main+0xa8>)
 80006ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006bc:	f002 ff66 	bl	800358c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <main+0x90>
 80006c4:	08005d7c 	.word	0x08005d7c
 80006c8:	20000470 	.word	0x20000470
 80006cc:	08005d94 	.word	0x08005d94
 80006d0:	20000468 	.word	0x20000468
 80006d4:	08005dbc 	.word	0x08005dbc
 80006d8:	2000046c 	.word	0x2000046c

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	@ 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	@ 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f005 fa4a 	bl	8005b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <SystemClock_Config+0xc8>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000708:	4a26      	ldr	r2, [pc, #152]	@ (80007a4 <SystemClock_Config+0xc8>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <SystemClock_Config+0xc8>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b21      	ldr	r3, [pc, #132]	@ (80007a8 <SystemClock_Config+0xcc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a20      	ldr	r2, [pc, #128]	@ (80007a8 <SystemClock_Config+0xcc>)
 8000726:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b1e      	ldr	r3, [pc, #120]	@ (80007a8 <SystemClock_Config+0xcc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000746:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800074a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800074c:	2304      	movs	r3, #4
 800074e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000750:	23c0      	movs	r3, #192	@ 0xc0
 8000752:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000754:	2304      	movs	r3, #4
 8000756:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000758:	2308      	movs	r3, #8
 800075a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4618      	mov	r0, r3
 8000762:	f001 fde3 	bl	800232c <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800076c:	f000 fad4 	bl	8000d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2302      	movs	r3, #2
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2103      	movs	r1, #3
 800078c:	4618      	mov	r0, r3
 800078e:	f002 f845 	bl	800281c <HAL_RCC_ClockConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000798:	f000 fabe 	bl	8000d18 <Error_Handler>
  }
}
 800079c:	bf00      	nop
 800079e:	3750      	adds	r7, #80	@ 0x50
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007c2:	2301      	movs	r3, #1
 80007c4:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80007c6:	23c8      	movs	r3, #200	@ 0xc8
 80007c8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80007ca:	2305      	movs	r3, #5
 80007cc:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 fa73 	bl	8002cc0 <HAL_RCCEx_PeriphCLKConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80007e0:	f000 fa9a 	bl	8000d18 <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <MX_I2C1_Init+0x50>)
 80007f2:	4a13      	ldr	r2, [pc, #76]	@ (8000840 <MX_I2C1_Init+0x54>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007f6:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_I2C1_Init+0x50>)
 80007f8:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <MX_I2C1_Init+0x58>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_I2C1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_I2C1_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_I2C1_Init+0x50>)
 800080a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800080e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081c:	4b07      	ldr	r3, [pc, #28]	@ (800083c <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	@ (800083c <MX_I2C1_Init+0x50>)
 800082a:	f000 ff9b 	bl	8001764 <HAL_I2C_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000834:	f000 fa70 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2000032c 	.word	0x2000032c
 8000840:	40005400 	.word	0x40005400
 8000844:	000186a0 	.word	0x000186a0

08000848 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <MX_I2S2_Init+0x50>)
 800084e:	4a13      	ldr	r2, [pc, #76]	@ (800089c <MX_I2S2_Init+0x54>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_I2S2_Init+0x50>)
 8000854:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000858:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800085a:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_I2S2_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000860:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <MX_I2S2_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000866:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_I2S2_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800086c:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <MX_I2S2_Init+0x50>)
 800086e:	4a0c      	ldr	r2, [pc, #48]	@ (80008a0 <MX_I2S2_Init+0x58>)
 8000870:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_I2S2_Init+0x50>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000878:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <MX_I2S2_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_I2S2_Init+0x50>)
 8000880:	2201      	movs	r2, #1
 8000882:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	@ (8000898 <MX_I2S2_Init+0x50>)
 8000886:	f001 f8b1 	bl	80019ec <HAL_I2S_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000890:	f000 fa42 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000380 	.word	0x20000380
 800089c:	40003800 	.word	0x40003800
 80008a0:	00017700 	.word	0x00017700

080008a4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008a8:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <MX_I2S3_Init+0x54>)
 80008aa:	4a14      	ldr	r2, [pc, #80]	@ (80008fc <MX_I2S3_Init+0x58>)
 80008ac:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008ae:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <MX_I2S3_Init+0x54>)
 80008b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008b4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <MX_I2S3_Init+0x54>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008bc:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_I2S3_Init+0x54>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008c2:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <MX_I2S3_Init+0x54>)
 80008c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008c8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <MX_I2S3_Init+0x54>)
 80008cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000900 <MX_I2S3_Init+0x5c>)
 80008ce:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008d0:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <MX_I2S3_Init+0x54>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <MX_I2S3_Init+0x54>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <MX_I2S3_Init+0x54>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_I2S3_Init+0x54>)
 80008e4:	f001 f882 	bl	80019ec <HAL_I2S_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008ee:	f000 fa13 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200003c8 	.word	0x200003c8
 80008fc:	40003c00 	.word	0x40003c00
 8000900:	00017700 	.word	0x00017700

08000904 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000908:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <MX_SPI1_Init+0x64>)
 800090a:	4a18      	ldr	r2, [pc, #96]	@ (800096c <MX_SPI1_Init+0x68>)
 800090c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800090e:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <MX_SPI1_Init+0x64>)
 8000910:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000914:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_SPI1_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_SPI1_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_SPI1_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_SPI1_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <MX_SPI1_Init+0x64>)
 8000930:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000934:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <MX_SPI1_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800093c:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <MX_SPI1_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_SPI1_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000948:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <MX_SPI1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_SPI1_Init+0x64>)
 8000950:	220a      	movs	r2, #10
 8000952:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	@ (8000968 <MX_SPI1_Init+0x64>)
 8000956:	f002 fb05 	bl	8002f64 <HAL_SPI_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000960:	f000 f9da 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000410 	.word	0x20000410
 800096c:	40013000 	.word	0x40013000

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	@ 0x30
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	61bb      	str	r3, [r7, #24]
 800098a:	4b70      	ldr	r3, [pc, #448]	@ (8000b4c <MX_GPIO_Init+0x1dc>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a6f      	ldr	r2, [pc, #444]	@ (8000b4c <MX_GPIO_Init+0x1dc>)
 8000990:	f043 0310 	orr.w	r3, r3, #16
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b6d      	ldr	r3, [pc, #436]	@ (8000b4c <MX_GPIO_Init+0x1dc>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	61bb      	str	r3, [r7, #24]
 80009a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	4b69      	ldr	r3, [pc, #420]	@ (8000b4c <MX_GPIO_Init+0x1dc>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a68      	ldr	r2, [pc, #416]	@ (8000b4c <MX_GPIO_Init+0x1dc>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b66      	ldr	r3, [pc, #408]	@ (8000b4c <MX_GPIO_Init+0x1dc>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b62      	ldr	r3, [pc, #392]	@ (8000b4c <MX_GPIO_Init+0x1dc>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a61      	ldr	r2, [pc, #388]	@ (8000b4c <MX_GPIO_Init+0x1dc>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b5f      	ldr	r3, [pc, #380]	@ (8000b4c <MX_GPIO_Init+0x1dc>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b5b      	ldr	r3, [pc, #364]	@ (8000b4c <MX_GPIO_Init+0x1dc>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a5a      	ldr	r2, [pc, #360]	@ (8000b4c <MX_GPIO_Init+0x1dc>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b58      	ldr	r3, [pc, #352]	@ (8000b4c <MX_GPIO_Init+0x1dc>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	4b54      	ldr	r3, [pc, #336]	@ (8000b4c <MX_GPIO_Init+0x1dc>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a53      	ldr	r2, [pc, #332]	@ (8000b4c <MX_GPIO_Init+0x1dc>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b51      	ldr	r3, [pc, #324]	@ (8000b4c <MX_GPIO_Init+0x1dc>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b4d      	ldr	r3, [pc, #308]	@ (8000b4c <MX_GPIO_Init+0x1dc>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a4c      	ldr	r2, [pc, #304]	@ (8000b4c <MX_GPIO_Init+0x1dc>)
 8000a1c:	f043 0308 	orr.w	r3, r3, #8
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b4a      	ldr	r3, [pc, #296]	@ (8000b4c <MX_GPIO_Init+0x1dc>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2108      	movs	r1, #8
 8000a32:	4847      	ldr	r0, [pc, #284]	@ (8000b50 <MX_GPIO_Init+0x1e0>)
 8000a34:	f000 fe7c 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	4845      	ldr	r0, [pc, #276]	@ (8000b54 <MX_GPIO_Init+0x1e4>)
 8000a3e:	f000 fe77 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8000a42:	2200      	movs	r2, #0
 8000a44:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a48:	4843      	ldr	r0, [pc, #268]	@ (8000b58 <MX_GPIO_Init+0x1e8>)
 8000a4a:	f000 fe71 	bl	8001730 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	483b      	ldr	r0, [pc, #236]	@ (8000b50 <MX_GPIO_Init+0x1e0>)
 8000a62:	f000 fce1 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a66:	2308      	movs	r3, #8
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4834      	ldr	r0, [pc, #208]	@ (8000b50 <MX_GPIO_Init+0x1e0>)
 8000a7e:	f000 fcd3 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000a82:	2332      	movs	r3, #50	@ 0x32
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a86:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	482e      	ldr	r0, [pc, #184]	@ (8000b50 <MX_GPIO_Init+0x1e0>)
 8000a98:	f000 fcc6 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4828      	ldr	r0, [pc, #160]	@ (8000b54 <MX_GPIO_Init+0x1e4>)
 8000ab4:	f000 fcb8 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000abc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	4823      	ldr	r0, [pc, #140]	@ (8000b5c <MX_GPIO_Init+0x1ec>)
 8000ace:	f000 fcab 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8000ad2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000ad6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	481b      	ldr	r0, [pc, #108]	@ (8000b58 <MX_GPIO_Init+0x1e8>)
 8000aec:	f000 fc9c 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000af0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4815      	ldr	r0, [pc, #84]	@ (8000b5c <MX_GPIO_Init+0x1ec>)
 8000b06:	f000 fc8f 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000b0a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b1c:	230a      	movs	r3, #10
 8000b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <MX_GPIO_Init+0x1ec>)
 8000b28:	f000 fc7e 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b2c:	2320      	movs	r3, #32
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4806      	ldr	r0, [pc, #24]	@ (8000b58 <MX_GPIO_Init+0x1e8>)
 8000b40:	f000 fc72 	bl	8001428 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b44:	bf00      	nop
 8000b46:	3730      	adds	r7, #48	@ 0x30
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40020800 	.word	0x40020800
 8000b58:	40020c00 	.word	0x40020c00
 8000b5c:	40020000 	.word	0x40020000

08000b60 <Flash10Hz>:

/* USER CODE BEGIN 4 */
void Flash10Hz(uint16_t color,int time)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	80fb      	strh	r3, [r7, #6]
	for(int i=0;i<time*10;i++)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	e014      	b.n	8000b9c <Flash10Hz+0x3c>
	{
		HAL_GPIO_WritePin(GPIOD, color, GPIO_PIN_SET);
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	2201      	movs	r2, #1
 8000b76:	4619      	mov	r1, r3
 8000b78:	480f      	ldr	r0, [pc, #60]	@ (8000bb8 <Flash10Hz+0x58>)
 8000b7a:	f000 fdd9 	bl	8001730 <HAL_GPIO_WritePin>
		osDelay(50);
 8000b7e:	2032      	movs	r0, #50	@ 0x32
 8000b80:	f002 fd57 	bl	8003632 <osDelay>
		HAL_GPIO_WritePin(GPIOD, color, GPIO_PIN_RESET);
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	2200      	movs	r2, #0
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480b      	ldr	r0, [pc, #44]	@ (8000bb8 <Flash10Hz+0x58>)
 8000b8c:	f000 fdd0 	bl	8001730 <HAL_GPIO_WritePin>
		osDelay(50);
 8000b90:	2032      	movs	r0, #50	@ 0x32
 8000b92:	f002 fd4e 	bl	8003632 <osDelay>
	for(int i=0;i<time*10;i++)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4293      	cmp	r3, r2
 8000bac:	dbe1      	blt.n	8000b72 <Flash10Hz+0x12>
	}
}
 8000bae:	bf00      	nop
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40020c00 	.word	0x40020c00

08000bbc <Flash1Hz>:

void Flash1Hz(uint16_t color,int time)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	80fb      	strh	r3, [r7, #6]
	for(int i=0;i<time;i++)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	e016      	b.n	8000bfc <Flash1Hz+0x40>
	{
		HAL_GPIO_WritePin(GPIOD, color, GPIO_PIN_SET);
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480e      	ldr	r0, [pc, #56]	@ (8000c10 <Flash1Hz+0x54>)
 8000bd6:	f000 fdab 	bl	8001730 <HAL_GPIO_WritePin>
		osDelay(500);
 8000bda:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bde:	f002 fd28 	bl	8003632 <osDelay>
		HAL_GPIO_WritePin(GPIOD, color, GPIO_PIN_RESET);
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	2200      	movs	r2, #0
 8000be6:	4619      	mov	r1, r3
 8000be8:	4809      	ldr	r0, [pc, #36]	@ (8000c10 <Flash1Hz+0x54>)
 8000bea:	f000 fda1 	bl	8001730 <HAL_GPIO_WritePin>
		osDelay(500);
 8000bee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bf2:	f002 fd1e 	bl	8003632 <osDelay>
	for(int i=0;i<time;i++)
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dbe4      	blt.n	8000bce <Flash1Hz+0x12>
	}
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40020c00 	.word	0x40020c00

08000c14 <CommandTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_CommandTask */
void CommandTask(void const * argument)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	InitMailBox();
 8000c1c:	f7ff fc72 	bl	8000504 <InitMailBox>
  /* Infinite loop */
  for(;;)
  {
    Flash1Hz(LED_RED_Pin, 10);
 8000c20:	210a      	movs	r1, #10
 8000c22:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000c26:	f7ff ffc9 	bl	8000bbc <Flash1Hz>
    Post(1);
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f7ff fcb8 	bl	80005a0 <Post>
    Flash10Hz(LED_RED_Pin, 5);
 8000c30:	2105      	movs	r1, #5
 8000c32:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000c36:	f7ff ff93 	bl	8000b60 <Flash10Hz>
    Post(2);
 8000c3a:	2002      	movs	r0, #2
 8000c3c:	f7ff fcb0 	bl	80005a0 <Post>
    Flash1Hz(LED_RED_Pin, 10);
 8000c40:	bf00      	nop
 8000c42:	e7ed      	b.n	8000c20 <CommandTask+0xc>

08000c44 <LedFlashingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedFlashingTask */
void LedFlashingTask(void const * argument)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedFlashingTask */
	InitMailBox();
 8000c4c:	f7ff fc5a 	bl	8000504 <InitMailBox>
	int data;
  /* Infinite loop */
  for(;;)
  {
	  Flash10Hz(LED_GREEN_Pin, 5);
 8000c50:	2105      	movs	r1, #5
 8000c52:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000c56:	f7ff ff83 	bl	8000b60 <Flash10Hz>
	  data = Pend();
 8000c5a:	f7ff fcc5 	bl	80005e8 <Pend>
 8000c5e:	60f8      	str	r0, [r7, #12]
	  if (data == 1)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d10c      	bne.n	8000c80 <LedFlashingTask+0x3c>
	  {
		  HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c6c:	4820      	ldr	r0, [pc, #128]	@ (8000cf0 <LedFlashingTask+0xac>)
 8000c6e:	f000 fd5f 	bl	8001730 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c78:	481d      	ldr	r0, [pc, #116]	@ (8000cf0 <LedFlashingTask+0xac>)
 8000c7a:	f000 fd59 	bl	8001730 <HAL_GPIO_WritePin>
 8000c7e:	e00e      	b.n	8000c9e <LedFlashingTask+0x5a>
	  }
	  else if (data == 2)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d10b      	bne.n	8000c9e <LedFlashingTask+0x5a>
	  {
		  HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin, GPIO_PIN_SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c8c:	4818      	ldr	r0, [pc, #96]	@ (8000cf0 <LedFlashingTask+0xac>)
 8000c8e:	f000 fd4f 	bl	8001730 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c98:	4815      	ldr	r0, [pc, #84]	@ (8000cf0 <LedFlashingTask+0xac>)
 8000c9a:	f000 fd49 	bl	8001730 <HAL_GPIO_WritePin>
	  }

	  Flash1Hz(LED_GREEN_Pin, 10);
 8000c9e:	210a      	movs	r1, #10
 8000ca0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000ca4:	f7ff ff8a 	bl	8000bbc <Flash1Hz>
	  data = Pend();
 8000ca8:	f7ff fc9e 	bl	80005e8 <Pend>
 8000cac:	60f8      	str	r0, [r7, #12]
	  if (data == 1)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d10c      	bne.n	8000cce <LedFlashingTask+0x8a>
	  {
		  HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cba:	480d      	ldr	r0, [pc, #52]	@ (8000cf0 <LedFlashingTask+0xac>)
 8000cbc:	f000 fd38 	bl	8001730 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cc6:	480a      	ldr	r0, [pc, #40]	@ (8000cf0 <LedFlashingTask+0xac>)
 8000cc8:	f000 fd32 	bl	8001730 <HAL_GPIO_WritePin>
 8000ccc:	e7c0      	b.n	8000c50 <LedFlashingTask+0xc>
	  }
	  else if (data == 2)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d1bd      	bne.n	8000c50 <LedFlashingTask+0xc>
	  {
		  HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cda:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <LedFlashingTask+0xac>)
 8000cdc:	f000 fd28 	bl	8001730 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ce6:	4802      	ldr	r0, [pc, #8]	@ (8000cf0 <LedFlashingTask+0xac>)
 8000ce8:	f000 fd22 	bl	8001730 <HAL_GPIO_WritePin>
	  Flash10Hz(LED_GREEN_Pin, 5);
 8000cec:	e7b0      	b.n	8000c50 <LedFlashingTask+0xc>
 8000cee:	bf00      	nop
 8000cf0:	40020c00 	.word	0x40020c00

08000cf4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a04      	ldr	r2, [pc, #16]	@ (8000d14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d101      	bne.n	8000d0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d06:	f000 fa8d 	bl	8001224 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40010000 	.word	0x40010000

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <Error_Handler+0x8>

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <HAL_MspInit+0x54>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	4a11      	ldr	r2, [pc, #68]	@ (8000d78 <HAL_MspInit+0x54>)
 8000d34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <HAL_MspInit+0x54>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <HAL_MspInit+0x54>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <HAL_MspInit+0x54>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d56:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <HAL_MspInit+0x54>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	210f      	movs	r1, #15
 8000d66:	f06f 0001 	mvn.w	r0, #1
 8000d6a:	f000 fb33 	bl	80013d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023800 	.word	0x40023800

08000d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	@ 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a19      	ldr	r2, [pc, #100]	@ (8000e00 <HAL_I2C_MspInit+0x84>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d12c      	bne.n	8000df8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b18      	ldr	r3, [pc, #96]	@ (8000e04 <HAL_I2C_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a17      	ldr	r2, [pc, #92]	@ (8000e04 <HAL_I2C_MspInit+0x88>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <HAL_I2C_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000dba:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc0:	2312      	movs	r3, #18
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dcc:	2304      	movs	r3, #4
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480c      	ldr	r0, [pc, #48]	@ (8000e08 <HAL_I2C_MspInit+0x8c>)
 8000dd8:	f000 fb26 	bl	8001428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <HAL_I2C_MspInit+0x88>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de4:	4a07      	ldr	r2, [pc, #28]	@ (8000e04 <HAL_I2C_MspInit+0x88>)
 8000de6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dec:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <HAL_I2C_MspInit+0x88>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	3728      	adds	r7, #40	@ 0x28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40005400 	.word	0x40005400
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020400 	.word	0x40020400

08000e0c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08e      	sub	sp, #56	@ 0x38
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a59      	ldr	r2, [pc, #356]	@ (8000f90 <HAL_I2S_MspInit+0x184>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d15b      	bne.n	8000ee6 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
 8000e32:	4b58      	ldr	r3, [pc, #352]	@ (8000f94 <HAL_I2S_MspInit+0x188>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	4a57      	ldr	r2, [pc, #348]	@ (8000f94 <HAL_I2S_MspInit+0x188>)
 8000e38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3e:	4b55      	ldr	r3, [pc, #340]	@ (8000f94 <HAL_I2S_MspInit+0x188>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e46:	623b      	str	r3, [r7, #32]
 8000e48:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
 8000e4e:	4b51      	ldr	r3, [pc, #324]	@ (8000f94 <HAL_I2S_MspInit+0x188>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a50      	ldr	r2, [pc, #320]	@ (8000f94 <HAL_I2S_MspInit+0x188>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b4e      	ldr	r3, [pc, #312]	@ (8000f94 <HAL_I2S_MspInit+0x188>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	61fb      	str	r3, [r7, #28]
 8000e64:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f94 <HAL_I2S_MspInit+0x188>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a49      	ldr	r2, [pc, #292]	@ (8000f94 <HAL_I2S_MspInit+0x188>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b47      	ldr	r3, [pc, #284]	@ (8000f94 <HAL_I2S_MspInit+0x188>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e82:	2304      	movs	r3, #4
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000e92:	2306      	movs	r3, #6
 8000e94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	483e      	ldr	r0, [pc, #248]	@ (8000f98 <HAL_I2S_MspInit+0x18c>)
 8000e9e:	f000 fac3 	bl	8001428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ea2:	2308      	movs	r3, #8
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4836      	ldr	r0, [pc, #216]	@ (8000f98 <HAL_I2S_MspInit+0x18c>)
 8000ebe:	f000 fab3 	bl	8001428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000ec2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ed4:	2305      	movs	r3, #5
 8000ed6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	482f      	ldr	r0, [pc, #188]	@ (8000f9c <HAL_I2S_MspInit+0x190>)
 8000ee0:	f000 faa2 	bl	8001428 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ee4:	e04f      	b.n	8000f86 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a2d      	ldr	r2, [pc, #180]	@ (8000fa0 <HAL_I2S_MspInit+0x194>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d14a      	bne.n	8000f86 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	4b27      	ldr	r3, [pc, #156]	@ (8000f94 <HAL_I2S_MspInit+0x188>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	4a26      	ldr	r2, [pc, #152]	@ (8000f94 <HAL_I2S_MspInit+0x188>)
 8000efa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000efe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f00:	4b24      	ldr	r3, [pc, #144]	@ (8000f94 <HAL_I2S_MspInit+0x188>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	4b20      	ldr	r3, [pc, #128]	@ (8000f94 <HAL_I2S_MspInit+0x188>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f14:	4a1f      	ldr	r2, [pc, #124]	@ (8000f94 <HAL_I2S_MspInit+0x188>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f94 <HAL_I2S_MspInit+0x188>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <HAL_I2S_MspInit+0x188>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f30:	4a18      	ldr	r2, [pc, #96]	@ (8000f94 <HAL_I2S_MspInit+0x188>)
 8000f32:	f043 0304 	orr.w	r3, r3, #4
 8000f36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f38:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <HAL_I2S_MspInit+0x188>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f44:	2310      	movs	r3, #16
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f54:	2306      	movs	r3, #6
 8000f56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4811      	ldr	r0, [pc, #68]	@ (8000fa4 <HAL_I2S_MspInit+0x198>)
 8000f60:	f000 fa62 	bl	8001428 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f64:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f76:	2306      	movs	r3, #6
 8000f78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	@ (8000f98 <HAL_I2S_MspInit+0x18c>)
 8000f82:	f000 fa51 	bl	8001428 <HAL_GPIO_Init>
}
 8000f86:	bf00      	nop
 8000f88:	3738      	adds	r7, #56	@ 0x38
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40003800 	.word	0x40003800
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40003c00 	.word	0x40003c00
 8000fa4:	40020000 	.word	0x40020000

08000fa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	@ 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a19      	ldr	r2, [pc, #100]	@ (800102c <HAL_SPI_MspInit+0x84>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d12b      	bne.n	8001022 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <HAL_SPI_MspInit+0x88>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd2:	4a17      	ldr	r2, [pc, #92]	@ (8001030 <HAL_SPI_MspInit+0x88>)
 8000fd4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <HAL_SPI_MspInit+0x88>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <HAL_SPI_MspInit+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a10      	ldr	r2, [pc, #64]	@ (8001030 <HAL_SPI_MspInit+0x88>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <HAL_SPI_MspInit+0x88>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001002:	23e0      	movs	r3, #224	@ 0xe0
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001012:	2305      	movs	r3, #5
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	@ (8001034 <HAL_SPI_MspInit+0x8c>)
 800101e:	f000 fa03 	bl	8001428 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	@ 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40013000 	.word	0x40013000
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000

08001038 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	@ 0x30
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001040:	2300      	movs	r3, #0
 8001042:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	4b2e      	ldr	r3, [pc, #184]	@ (8001108 <HAL_InitTick+0xd0>)
 800104e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001050:	4a2d      	ldr	r2, [pc, #180]	@ (8001108 <HAL_InitTick+0xd0>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6453      	str	r3, [r2, #68]	@ 0x44
 8001058:	4b2b      	ldr	r3, [pc, #172]	@ (8001108 <HAL_InitTick+0xd0>)
 800105a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001064:	f107 020c 	add.w	r2, r7, #12
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fdf4 	bl	8002c5c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001074:	f001 fdde 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 8001078:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800107a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800107c:	4a23      	ldr	r2, [pc, #140]	@ (800110c <HAL_InitTick+0xd4>)
 800107e:	fba2 2303 	umull	r2, r3, r2, r3
 8001082:	0c9b      	lsrs	r3, r3, #18
 8001084:	3b01      	subs	r3, #1
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001088:	4b21      	ldr	r3, [pc, #132]	@ (8001110 <HAL_InitTick+0xd8>)
 800108a:	4a22      	ldr	r2, [pc, #136]	@ (8001114 <HAL_InitTick+0xdc>)
 800108c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800108e:	4b20      	ldr	r3, [pc, #128]	@ (8001110 <HAL_InitTick+0xd8>)
 8001090:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001094:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001096:	4a1e      	ldr	r2, [pc, #120]	@ (8001110 <HAL_InitTick+0xd8>)
 8001098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800109c:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <HAL_InitTick+0xd8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001110 <HAL_InitTick+0xd8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a8:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <HAL_InitTick+0xd8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80010ae:	4818      	ldr	r0, [pc, #96]	@ (8001110 <HAL_InitTick+0xd8>)
 80010b0:	f001 ffe1 	bl	8003076 <HAL_TIM_Base_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80010ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d11b      	bne.n	80010fa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80010c2:	4813      	ldr	r0, [pc, #76]	@ (8001110 <HAL_InitTick+0xd8>)
 80010c4:	f002 f830 	bl	8003128 <HAL_TIM_Base_Start_IT>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80010ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d111      	bne.n	80010fa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010d6:	2019      	movs	r0, #25
 80010d8:	f000 f998 	bl	800140c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b0f      	cmp	r3, #15
 80010e0:	d808      	bhi.n	80010f4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80010e2:	2200      	movs	r2, #0
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	2019      	movs	r0, #25
 80010e8:	f000 f974 	bl	80013d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001118 <HAL_InitTick+0xe0>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e002      	b.n	80010fa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80010fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3730      	adds	r7, #48	@ 0x30
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	431bde83 	.word	0x431bde83
 8001110:	20000474 	.word	0x20000474
 8001114:	40010000 	.word	0x40010000
 8001118:	20000004 	.word	0x20000004

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <NMI_Handler+0x4>

08001124 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <MemManage_Handler+0x4>

08001134 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <UsageFault_Handler+0x4>

08001144 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001158:	4802      	ldr	r0, [pc, #8]	@ (8001164 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800115a:	f002 f847 	bl	80031ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000474 	.word	0x20000474

08001168 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <SystemInit+0x20>)
 800116e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001172:	4a05      	ldr	r2, [pc, #20]	@ (8001188 <SystemInit+0x20>)
 8001174:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001178:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800118c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001190:	f7ff ffea 	bl	8001168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001194:	480c      	ldr	r0, [pc, #48]	@ (80011c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001196:	490d      	ldr	r1, [pc, #52]	@ (80011cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001198:	4a0d      	ldr	r2, [pc, #52]	@ (80011d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800119c:	e002      	b.n	80011a4 <LoopCopyDataInit>

0800119e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a2:	3304      	adds	r3, #4

080011a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a8:	d3f9      	bcc.n	800119e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011aa:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011ac:	4c0a      	ldr	r4, [pc, #40]	@ (80011d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b0:	e001      	b.n	80011b6 <LoopFillZerobss>

080011b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b4:	3204      	adds	r2, #4

080011b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b8:	d3fb      	bcc.n	80011b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ba:	f004 fd41 	bl	8005c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011be:	f7ff fa37 	bl	8000630 <main>
  bx  lr    
 80011c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011cc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80011d0:	08005e08 	.word	0x08005e08
  ldr r2, =_sbss
 80011d4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80011d8:	20004354 	.word	0x20004354

080011dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC_IRQHandler>
	...

080011e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <HAL_Init+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001220 <HAL_Init+0x40>)
 80011ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <HAL_Init+0x40>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <HAL_Init+0x40>)
 80011f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <HAL_Init+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <HAL_Init+0x40>)
 8001202:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001206:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001208:	2003      	movs	r0, #3
 800120a:	f000 f8d8 	bl	80013be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120e:	200f      	movs	r0, #15
 8001210:	f7ff ff12 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001214:	f7ff fd86 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023c00 	.word	0x40023c00

08001224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <HAL_IncTick+0x20>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_IncTick+0x24>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <HAL_IncTick+0x24>)
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000008 	.word	0x20000008
 8001248:	200004bc 	.word	0x200004bc

0800124c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b03      	ldr	r3, [pc, #12]	@ (8001260 <HAL_GetTick+0x14>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	200004bc 	.word	0x200004bc

08001264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001280:	4013      	ands	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800128c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db0b      	blt.n	80012f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f003 021f 	and.w	r2, r3, #31
 80012e0:	4907      	ldr	r1, [pc, #28]	@ (8001300 <__NVIC_EnableIRQ+0x38>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	2001      	movs	r0, #1
 80012ea:	fa00 f202 	lsl.w	r2, r0, r2
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000e100 	.word	0xe000e100

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	@ (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	@ (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	@ 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	@ 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ff4c 	bl	8001264 <__NVIC_SetPriorityGrouping>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e6:	f7ff ff61 	bl	80012ac <__NVIC_GetPriorityGrouping>
 80013ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	68b9      	ldr	r1, [r7, #8]
 80013f0:	6978      	ldr	r0, [r7, #20]
 80013f2:	f7ff ffb1 	bl	8001358 <NVIC_EncodePriority>
 80013f6:	4602      	mov	r2, r0
 80013f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff80 	bl	8001304 <__NVIC_SetPriority>
}
 8001404:	bf00      	nop
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff54 	bl	80012c8 <__NVIC_EnableIRQ>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	@ 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	e159      	b.n	80016f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001444:	2201      	movs	r2, #1
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	429a      	cmp	r2, r3
 800145e:	f040 8148 	bne.w	80016f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	2b01      	cmp	r3, #1
 800146c:	d005      	beq.n	800147a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001476:	2b02      	cmp	r3, #2
 8001478:	d130      	bne.n	80014dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	2203      	movs	r2, #3
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014b0:	2201      	movs	r2, #1
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	091b      	lsrs	r3, r3, #4
 80014c6:	f003 0201 	and.w	r2, r3, #1
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d017      	beq.n	8001518 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	2203      	movs	r2, #3
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d123      	bne.n	800156c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	08da      	lsrs	r2, r3, #3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3208      	adds	r2, #8
 800152c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	220f      	movs	r2, #15
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	691a      	ldr	r2, [r3, #16]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	08da      	lsrs	r2, r3, #3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3208      	adds	r2, #8
 8001566:	69b9      	ldr	r1, [r7, #24]
 8001568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	2203      	movs	r2, #3
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0203 	and.w	r2, r3, #3
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 80a2 	beq.w	80016f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b57      	ldr	r3, [pc, #348]	@ (8001710 <HAL_GPIO_Init+0x2e8>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b6:	4a56      	ldr	r2, [pc, #344]	@ (8001710 <HAL_GPIO_Init+0x2e8>)
 80015b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015be:	4b54      	ldr	r3, [pc, #336]	@ (8001710 <HAL_GPIO_Init+0x2e8>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ca:	4a52      	ldr	r2, [pc, #328]	@ (8001714 <HAL_GPIO_Init+0x2ec>)
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	089b      	lsrs	r3, r3, #2
 80015d0:	3302      	adds	r3, #2
 80015d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	220f      	movs	r2, #15
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a49      	ldr	r2, [pc, #292]	@ (8001718 <HAL_GPIO_Init+0x2f0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d019      	beq.n	800162a <HAL_GPIO_Init+0x202>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a48      	ldr	r2, [pc, #288]	@ (800171c <HAL_GPIO_Init+0x2f4>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d013      	beq.n	8001626 <HAL_GPIO_Init+0x1fe>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a47      	ldr	r2, [pc, #284]	@ (8001720 <HAL_GPIO_Init+0x2f8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d00d      	beq.n	8001622 <HAL_GPIO_Init+0x1fa>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a46      	ldr	r2, [pc, #280]	@ (8001724 <HAL_GPIO_Init+0x2fc>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d007      	beq.n	800161e <HAL_GPIO_Init+0x1f6>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a45      	ldr	r2, [pc, #276]	@ (8001728 <HAL_GPIO_Init+0x300>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d101      	bne.n	800161a <HAL_GPIO_Init+0x1f2>
 8001616:	2304      	movs	r3, #4
 8001618:	e008      	b.n	800162c <HAL_GPIO_Init+0x204>
 800161a:	2307      	movs	r3, #7
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x204>
 800161e:	2303      	movs	r3, #3
 8001620:	e004      	b.n	800162c <HAL_GPIO_Init+0x204>
 8001622:	2302      	movs	r3, #2
 8001624:	e002      	b.n	800162c <HAL_GPIO_Init+0x204>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_GPIO_Init+0x204>
 800162a:	2300      	movs	r3, #0
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	f002 0203 	and.w	r2, r2, #3
 8001632:	0092      	lsls	r2, r2, #2
 8001634:	4093      	lsls	r3, r2
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163c:	4935      	ldr	r1, [pc, #212]	@ (8001714 <HAL_GPIO_Init+0x2ec>)
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800164a:	4b38      	ldr	r3, [pc, #224]	@ (800172c <HAL_GPIO_Init+0x304>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800166e:	4a2f      	ldr	r2, [pc, #188]	@ (800172c <HAL_GPIO_Init+0x304>)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001674:	4b2d      	ldr	r3, [pc, #180]	@ (800172c <HAL_GPIO_Init+0x304>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001698:	4a24      	ldr	r2, [pc, #144]	@ (800172c <HAL_GPIO_Init+0x304>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800169e:	4b23      	ldr	r3, [pc, #140]	@ (800172c <HAL_GPIO_Init+0x304>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016c2:	4a1a      	ldr	r2, [pc, #104]	@ (800172c <HAL_GPIO_Init+0x304>)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c8:	4b18      	ldr	r3, [pc, #96]	@ (800172c <HAL_GPIO_Init+0x304>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016ec:	4a0f      	ldr	r2, [pc, #60]	@ (800172c <HAL_GPIO_Init+0x304>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3301      	adds	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2b0f      	cmp	r3, #15
 80016fc:	f67f aea2 	bls.w	8001444 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3724      	adds	r7, #36	@ 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	40013800 	.word	0x40013800
 8001718:	40020000 	.word	0x40020000
 800171c:	40020400 	.word	0x40020400
 8001720:	40020800 	.word	0x40020800
 8001724:	40020c00 	.word	0x40020c00
 8001728:	40021000 	.word	0x40021000
 800172c:	40013c00 	.word	0x40013c00

08001730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
 800173c:	4613      	mov	r3, r2
 800173e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001740:	787b      	ldrb	r3, [r7, #1]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800174c:	e003      	b.n	8001756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	041a      	lsls	r2, r3, #16
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	619a      	str	r2, [r3, #24]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e12b      	b.n	80019ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d106      	bne.n	8001790 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff faf6 	bl	8000d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2224      	movs	r2, #36	@ 0x24
 8001794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0201 	bic.w	r2, r2, #1
 80017a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017c8:	f001 fa20 	bl	8002c0c <HAL_RCC_GetPCLK1Freq>
 80017cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4a81      	ldr	r2, [pc, #516]	@ (80019d8 <HAL_I2C_Init+0x274>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d807      	bhi.n	80017e8 <HAL_I2C_Init+0x84>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4a80      	ldr	r2, [pc, #512]	@ (80019dc <HAL_I2C_Init+0x278>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	bf94      	ite	ls
 80017e0:	2301      	movls	r3, #1
 80017e2:	2300      	movhi	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	e006      	b.n	80017f6 <HAL_I2C_Init+0x92>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4a7d      	ldr	r2, [pc, #500]	@ (80019e0 <HAL_I2C_Init+0x27c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	bf94      	ite	ls
 80017f0:	2301      	movls	r3, #1
 80017f2:	2300      	movhi	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e0e7      	b.n	80019ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4a78      	ldr	r2, [pc, #480]	@ (80019e4 <HAL_I2C_Init+0x280>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	0c9b      	lsrs	r3, r3, #18
 8001808:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	430a      	orrs	r2, r1
 800181c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	4a6a      	ldr	r2, [pc, #424]	@ (80019d8 <HAL_I2C_Init+0x274>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d802      	bhi.n	8001838 <HAL_I2C_Init+0xd4>
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3301      	adds	r3, #1
 8001836:	e009      	b.n	800184c <HAL_I2C_Init+0xe8>
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	4a69      	ldr	r2, [pc, #420]	@ (80019e8 <HAL_I2C_Init+0x284>)
 8001844:	fba2 2303 	umull	r2, r3, r2, r3
 8001848:	099b      	lsrs	r3, r3, #6
 800184a:	3301      	adds	r3, #1
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	430b      	orrs	r3, r1
 8001852:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800185e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	495c      	ldr	r1, [pc, #368]	@ (80019d8 <HAL_I2C_Init+0x274>)
 8001868:	428b      	cmp	r3, r1
 800186a:	d819      	bhi.n	80018a0 <HAL_I2C_Init+0x13c>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	1e59      	subs	r1, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	fbb1 f3f3 	udiv	r3, r1, r3
 800187a:	1c59      	adds	r1, r3, #1
 800187c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001880:	400b      	ands	r3, r1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00a      	beq.n	800189c <HAL_I2C_Init+0x138>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1e59      	subs	r1, r3, #1
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fbb1 f3f3 	udiv	r3, r1, r3
 8001894:	3301      	adds	r3, #1
 8001896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189a:	e051      	b.n	8001940 <HAL_I2C_Init+0x1dc>
 800189c:	2304      	movs	r3, #4
 800189e:	e04f      	b.n	8001940 <HAL_I2C_Init+0x1dc>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d111      	bne.n	80018cc <HAL_I2C_Init+0x168>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1e58      	subs	r0, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	440b      	add	r3, r1
 80018b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ba:	3301      	adds	r3, #1
 80018bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf0c      	ite	eq
 80018c4:	2301      	moveq	r3, #1
 80018c6:	2300      	movne	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	e012      	b.n	80018f2 <HAL_I2C_Init+0x18e>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1e58      	subs	r0, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	0099      	lsls	r1, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e2:	3301      	adds	r3, #1
 80018e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	bf0c      	ite	eq
 80018ec:	2301      	moveq	r3, #1
 80018ee:	2300      	movne	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_I2C_Init+0x196>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e022      	b.n	8001940 <HAL_I2C_Init+0x1dc>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10e      	bne.n	8001920 <HAL_I2C_Init+0x1bc>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1e58      	subs	r0, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6859      	ldr	r1, [r3, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	440b      	add	r3, r1
 8001910:	fbb0 f3f3 	udiv	r3, r0, r3
 8001914:	3301      	adds	r3, #1
 8001916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800191e:	e00f      	b.n	8001940 <HAL_I2C_Init+0x1dc>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1e58      	subs	r0, r3, #1
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6859      	ldr	r1, [r3, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	0099      	lsls	r1, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	fbb0 f3f3 	udiv	r3, r0, r3
 8001936:	3301      	adds	r3, #1
 8001938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	6809      	ldr	r1, [r1, #0]
 8001944:	4313      	orrs	r3, r2
 8001946:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69da      	ldr	r2, [r3, #28]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800196e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6911      	ldr	r1, [r2, #16]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68d2      	ldr	r2, [r2, #12]
 800197a:	4311      	orrs	r1, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	430b      	orrs	r3, r1
 8001982:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0201 	orr.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2220      	movs	r2, #32
 80019ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	000186a0 	.word	0x000186a0
 80019dc:	001e847f 	.word	0x001e847f
 80019e0:	003d08ff 	.word	0x003d08ff
 80019e4:	431bde83 	.word	0x431bde83
 80019e8:	10624dd3 	.word	0x10624dd3

080019ec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e128      	b.n	8001c50 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d109      	bne.n	8001a1e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a90      	ldr	r2, [pc, #576]	@ (8001c58 <HAL_I2S_Init+0x26c>)
 8001a16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff f9f7 	bl	8000e0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2202      	movs	r2, #2
 8001a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001a34:	f023 030f 	bic.w	r3, r3, #15
 8001a38:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d060      	beq.n	8001b0c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d102      	bne.n	8001a58 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001a52:	2310      	movs	r3, #16
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e001      	b.n	8001a5c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001a58:	2320      	movs	r3, #32
 8001a5a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b20      	cmp	r3, #32
 8001a62:	d802      	bhi.n	8001a6a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f001 fa18 	bl	8002ea0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a70:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a7a:	d125      	bne.n	8001ac8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d010      	beq.n	8001aa6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	461a      	mov	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	3305      	adds	r3, #5
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	e01f      	b.n	8001ae6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	461a      	mov	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	3305      	adds	r3, #5
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	e00e      	b.n	8001ae6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	461a      	mov	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	3305      	adds	r3, #5
 8001ae4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4a5c      	ldr	r2, [pc, #368]	@ (8001c5c <HAL_I2S_Init+0x270>)
 8001aea:	fba2 2303 	umull	r2, r3, r2, r3
 8001aee:	08db      	lsrs	r3, r3, #3
 8001af0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	085b      	lsrs	r3, r3, #1
 8001b02:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	e003      	b.n	8001b14 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d902      	bls.n	8001b20 <HAL_I2S_Init+0x134>
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	2bff      	cmp	r3, #255	@ 0xff
 8001b1e:	d907      	bls.n	8001b30 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b24:	f043 0210 	orr.w	r2, r3, #16
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e08f      	b.n	8001c50 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	ea42 0103 	orr.w	r1, r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001b4e:	f023 030f 	bic.w	r3, r3, #15
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6851      	ldr	r1, [r2, #4]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6892      	ldr	r2, [r2, #8]
 8001b5a:	4311      	orrs	r1, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	68d2      	ldr	r2, [r2, #12]
 8001b60:	4311      	orrs	r1, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6992      	ldr	r2, [r2, #24]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b72:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d161      	bne.n	8001c40 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a38      	ldr	r2, [pc, #224]	@ (8001c60 <HAL_I2S_Init+0x274>)
 8001b80:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a37      	ldr	r2, [pc, #220]	@ (8001c64 <HAL_I2S_Init+0x278>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d101      	bne.n	8001b90 <HAL_I2S_Init+0x1a4>
 8001b8c:	4b36      	ldr	r3, [pc, #216]	@ (8001c68 <HAL_I2S_Init+0x27c>)
 8001b8e:	e001      	b.n	8001b94 <HAL_I2S_Init+0x1a8>
 8001b90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6812      	ldr	r2, [r2, #0]
 8001b9a:	4932      	ldr	r1, [pc, #200]	@ (8001c64 <HAL_I2S_Init+0x278>)
 8001b9c:	428a      	cmp	r2, r1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_I2S_Init+0x1b8>
 8001ba0:	4a31      	ldr	r2, [pc, #196]	@ (8001c68 <HAL_I2S_Init+0x27c>)
 8001ba2:	e001      	b.n	8001ba8 <HAL_I2S_Init+0x1bc>
 8001ba4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001ba8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001bac:	f023 030f 	bic.w	r3, r3, #15
 8001bb0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a2b      	ldr	r2, [pc, #172]	@ (8001c64 <HAL_I2S_Init+0x278>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d101      	bne.n	8001bc0 <HAL_I2S_Init+0x1d4>
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001c68 <HAL_I2S_Init+0x27c>)
 8001bbe:	e001      	b.n	8001bc4 <HAL_I2S_Init+0x1d8>
 8001bc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a25      	ldr	r2, [pc, #148]	@ (8001c64 <HAL_I2S_Init+0x278>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d101      	bne.n	8001bd6 <HAL_I2S_Init+0x1ea>
 8001bd2:	4b25      	ldr	r3, [pc, #148]	@ (8001c68 <HAL_I2S_Init+0x27c>)
 8001bd4:	e001      	b.n	8001bda <HAL_I2S_Init+0x1ee>
 8001bd6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001be6:	d003      	beq.n	8001bf0 <HAL_I2S_Init+0x204>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d103      	bne.n	8001bf8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	e001      	b.n	8001bfc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c06:	4313      	orrs	r3, r2
 8001c08:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c10:	4313      	orrs	r3, r2
 8001c12:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	897b      	ldrh	r3, [r7, #10]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c28:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c64 <HAL_I2S_Init+0x278>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d101      	bne.n	8001c38 <HAL_I2S_Init+0x24c>
 8001c34:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <HAL_I2S_Init+0x27c>)
 8001c36:	e001      	b.n	8001c3c <HAL_I2S_Init+0x250>
 8001c38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c3c:	897a      	ldrh	r2, [r7, #10]
 8001c3e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	08001d63 	.word	0x08001d63
 8001c5c:	cccccccd 	.word	0xcccccccd
 8001c60:	08001e79 	.word	0x08001e79
 8001c64:	40003800 	.word	0x40003800
 8001c68:	40003400 	.word	0x40003400

08001c6c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb4:	881a      	ldrh	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc0:	1c9a      	adds	r2, r3, #2
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10e      	bne.n	8001cfc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001cec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffb8 	bl	8001c6c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d16:	b292      	uxth	r2, r2
 8001d18:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1e:	1c9a      	adds	r2, r3, #2
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10e      	bne.n	8001d5a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001d4a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ff93 	bl	8001c80 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d13a      	bne.n	8001df4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d109      	bne.n	8001d9c <I2S_IRQHandler+0x3a>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d92:	2b40      	cmp	r3, #64	@ 0x40
 8001d94:	d102      	bne.n	8001d9c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ffb4 	bl	8001d04 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001da2:	2b40      	cmp	r3, #64	@ 0x40
 8001da4:	d126      	bne.n	8001df4 <I2S_IRQHandler+0x92>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0320 	and.w	r3, r3, #32
 8001db0:	2b20      	cmp	r3, #32
 8001db2:	d11f      	bne.n	8001df4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001dc2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	f043 0202 	orr.w	r2, r3, #2
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ff50 	bl	8001c94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d136      	bne.n	8001e6e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d109      	bne.n	8001e1e <I2S_IRQHandler+0xbc>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e14:	2b80      	cmp	r3, #128	@ 0x80
 8001e16:	d102      	bne.n	8001e1e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ff45 	bl	8001ca8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d122      	bne.n	8001e6e <I2S_IRQHandler+0x10c>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0320 	and.w	r3, r3, #32
 8001e32:	2b20      	cmp	r3, #32
 8001e34:	d11b      	bne.n	8001e6e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001e44:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e60:	f043 0204 	orr.w	r2, r3, #4
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff13 	bl	8001c94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a92      	ldr	r2, [pc, #584]	@ (80020d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d101      	bne.n	8001e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001e92:	4b92      	ldr	r3, [pc, #584]	@ (80020dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e94:	e001      	b.n	8001e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001e96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a8b      	ldr	r2, [pc, #556]	@ (80020d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d101      	bne.n	8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001eb0:	4b8a      	ldr	r3, [pc, #552]	@ (80020dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001eb2:	e001      	b.n	8001eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001eb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ec4:	d004      	beq.n	8001ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f040 8099 	bne.w	8002002 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d107      	bne.n	8001eea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f925 	bl	8002134 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d107      	bne.n	8001f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f9c8 	bl	8002294 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f0a:	2b40      	cmp	r3, #64	@ 0x40
 8001f0c:	d13a      	bne.n	8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	f003 0320 	and.w	r3, r3, #32
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d035      	beq.n	8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a6e      	ldr	r2, [pc, #440]	@ (80020d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001f22:	4b6e      	ldr	r3, [pc, #440]	@ (80020dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f24:	e001      	b.n	8001f2a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001f26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4969      	ldr	r1, [pc, #420]	@ (80020d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f32:	428b      	cmp	r3, r1
 8001f34:	d101      	bne.n	8001f3a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001f36:	4b69      	ldr	r3, [pc, #420]	@ (80020dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f38:	e001      	b.n	8001f3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001f3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f3e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f42:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001f52:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f76:	f043 0202 	orr.w	r2, r3, #2
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fe88 	bl	8001c94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	f040 80c3 	bne.w	8002116 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 80bd 	beq.w	8002116 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001faa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a49      	ldr	r2, [pc, #292]	@ (80020d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001fb6:	4b49      	ldr	r3, [pc, #292]	@ (80020dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fb8:	e001      	b.n	8001fbe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001fba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4944      	ldr	r1, [pc, #272]	@ (80020d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fc6:	428b      	cmp	r3, r1
 8001fc8:	d101      	bne.n	8001fce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001fca:	4b44      	ldr	r3, [pc, #272]	@ (80020dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fcc:	e001      	b.n	8001fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001fce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001fd2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001fd6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff2:	f043 0204 	orr.w	r2, r3, #4
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fe4a 	bl	8001c94 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002000:	e089      	b.n	8002116 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b02      	cmp	r3, #2
 800200a:	d107      	bne.n	800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f8be 	bl	8002198 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d107      	bne.n	8002036 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f8fd 	bl	8002230 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800203c:	2b40      	cmp	r3, #64	@ 0x40
 800203e:	d12f      	bne.n	80020a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b00      	cmp	r3, #0
 8002048:	d02a      	beq.n	80020a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002058:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1e      	ldr	r2, [pc, #120]	@ (80020d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d101      	bne.n	8002068 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002064:	4b1d      	ldr	r3, [pc, #116]	@ (80020dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002066:	e001      	b.n	800206c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002068:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4919      	ldr	r1, [pc, #100]	@ (80020d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002074:	428b      	cmp	r3, r1
 8002076:	d101      	bne.n	800207c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002078:	4b18      	ldr	r3, [pc, #96]	@ (80020dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800207a:	e001      	b.n	8002080 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800207c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002080:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002084:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002092:	f043 0202 	orr.w	r2, r3, #2
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff fdfa 	bl	8001c94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d136      	bne.n	8002118 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d031      	beq.n	8002118 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a07      	ldr	r2, [pc, #28]	@ (80020d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80020be:	4b07      	ldr	r3, [pc, #28]	@ (80020dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020c0:	e001      	b.n	80020c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80020c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4902      	ldr	r1, [pc, #8]	@ (80020d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020ce:	428b      	cmp	r3, r1
 80020d0:	d106      	bne.n	80020e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80020d2:	4b02      	ldr	r3, [pc, #8]	@ (80020dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020d4:	e006      	b.n	80020e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80020d6:	bf00      	nop
 80020d8:	40003800 	.word	0x40003800
 80020dc:	40003400 	.word	0x40003400
 80020e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80020e8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80020f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002106:	f043 0204 	orr.w	r2, r3, #4
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff fdc0 	bl	8001c94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002114:	e000      	b.n	8002118 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002116:	bf00      	nop
}
 8002118:	bf00      	nop
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002140:	1c99      	adds	r1, r3, #2
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6251      	str	r1, [r2, #36]	@ 0x24
 8002146:	881a      	ldrh	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002160:	b29b      	uxth	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d113      	bne.n	800218e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002174:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800217a:	b29b      	uxth	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d106      	bne.n	800218e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff ffc9 	bl	8002120 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a4:	1c99      	adds	r1, r3, #2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6251      	str	r1, [r2, #36]	@ 0x24
 80021aa:	8819      	ldrh	r1, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002228 <I2SEx_TxISR_I2SExt+0x90>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <I2SEx_TxISR_I2SExt+0x22>
 80021b6:	4b1d      	ldr	r3, [pc, #116]	@ (800222c <I2SEx_TxISR_I2SExt+0x94>)
 80021b8:	e001      	b.n	80021be <I2SEx_TxISR_I2SExt+0x26>
 80021ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021be:	460a      	mov	r2, r1
 80021c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d121      	bne.n	800221e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a12      	ldr	r2, [pc, #72]	@ (8002228 <I2SEx_TxISR_I2SExt+0x90>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d101      	bne.n	80021e8 <I2SEx_TxISR_I2SExt+0x50>
 80021e4:	4b11      	ldr	r3, [pc, #68]	@ (800222c <I2SEx_TxISR_I2SExt+0x94>)
 80021e6:	e001      	b.n	80021ec <I2SEx_TxISR_I2SExt+0x54>
 80021e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	490d      	ldr	r1, [pc, #52]	@ (8002228 <I2SEx_TxISR_I2SExt+0x90>)
 80021f4:	428b      	cmp	r3, r1
 80021f6:	d101      	bne.n	80021fc <I2SEx_TxISR_I2SExt+0x64>
 80021f8:	4b0c      	ldr	r3, [pc, #48]	@ (800222c <I2SEx_TxISR_I2SExt+0x94>)
 80021fa:	e001      	b.n	8002200 <I2SEx_TxISR_I2SExt+0x68>
 80021fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002200:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002204:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800220a:	b29b      	uxth	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d106      	bne.n	800221e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ff81 	bl	8002120 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40003800 	.word	0x40003800
 800222c:	40003400 	.word	0x40003400

08002230 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68d8      	ldr	r0, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002242:	1c99      	adds	r1, r3, #2
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002248:	b282      	uxth	r2, r0
 800224a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800225e:	b29b      	uxth	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d113      	bne.n	800228c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002272:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002278:	b29b      	uxth	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d106      	bne.n	800228c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff ff4a 	bl	8002120 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a20      	ldr	r2, [pc, #128]	@ (8002324 <I2SEx_RxISR_I2SExt+0x90>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <I2SEx_RxISR_I2SExt+0x16>
 80022a6:	4b20      	ldr	r3, [pc, #128]	@ (8002328 <I2SEx_RxISR_I2SExt+0x94>)
 80022a8:	e001      	b.n	80022ae <I2SEx_RxISR_I2SExt+0x1a>
 80022aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022ae:	68d8      	ldr	r0, [r3, #12]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b4:	1c99      	adds	r1, r3, #2
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80022ba:	b282      	uxth	r2, r0
 80022bc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d121      	bne.n	800231a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a12      	ldr	r2, [pc, #72]	@ (8002324 <I2SEx_RxISR_I2SExt+0x90>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d101      	bne.n	80022e4 <I2SEx_RxISR_I2SExt+0x50>
 80022e0:	4b11      	ldr	r3, [pc, #68]	@ (8002328 <I2SEx_RxISR_I2SExt+0x94>)
 80022e2:	e001      	b.n	80022e8 <I2SEx_RxISR_I2SExt+0x54>
 80022e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	490d      	ldr	r1, [pc, #52]	@ (8002324 <I2SEx_RxISR_I2SExt+0x90>)
 80022f0:	428b      	cmp	r3, r1
 80022f2:	d101      	bne.n	80022f8 <I2SEx_RxISR_I2SExt+0x64>
 80022f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002328 <I2SEx_RxISR_I2SExt+0x94>)
 80022f6:	e001      	b.n	80022fc <I2SEx_RxISR_I2SExt+0x68>
 80022f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022fc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002300:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d106      	bne.n	800231a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ff03 	bl	8002120 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40003800 	.word	0x40003800
 8002328:	40003400 	.word	0x40003400

0800232c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e267      	b.n	800280e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d075      	beq.n	8002436 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800234a:	4b88      	ldr	r3, [pc, #544]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b04      	cmp	r3, #4
 8002354:	d00c      	beq.n	8002370 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002356:	4b85      	ldr	r3, [pc, #532]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800235e:	2b08      	cmp	r3, #8
 8002360:	d112      	bne.n	8002388 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4b82      	ldr	r3, [pc, #520]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800236a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800236e:	d10b      	bne.n	8002388 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	4b7e      	ldr	r3, [pc, #504]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d05b      	beq.n	8002434 <HAL_RCC_OscConfig+0x108>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d157      	bne.n	8002434 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e242      	b.n	800280e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002390:	d106      	bne.n	80023a0 <HAL_RCC_OscConfig+0x74>
 8002392:	4b76      	ldr	r3, [pc, #472]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a75      	ldr	r2, [pc, #468]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 8002398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e01d      	b.n	80023dc <HAL_RCC_OscConfig+0xb0>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x98>
 80023aa:	4b70      	ldr	r3, [pc, #448]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a6f      	ldr	r2, [pc, #444]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 80023b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b6d      	ldr	r3, [pc, #436]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a6c      	ldr	r2, [pc, #432]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 80023bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	e00b      	b.n	80023dc <HAL_RCC_OscConfig+0xb0>
 80023c4:	4b69      	ldr	r3, [pc, #420]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a68      	ldr	r2, [pc, #416]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 80023ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	4b66      	ldr	r3, [pc, #408]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a65      	ldr	r2, [pc, #404]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 80023d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d013      	beq.n	800240c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7fe ff32 	bl	800124c <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ec:	f7fe ff2e 	bl	800124c <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	@ 0x64
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e207      	b.n	800280e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b5b      	ldr	r3, [pc, #364]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0xc0>
 800240a:	e014      	b.n	8002436 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7fe ff1e 	bl	800124c <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002414:	f7fe ff1a 	bl	800124c <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	@ 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e1f3      	b.n	800280e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002426:	4b51      	ldr	r3, [pc, #324]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0xe8>
 8002432:	e000      	b.n	8002436 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d063      	beq.n	800250a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002442:	4b4a      	ldr	r3, [pc, #296]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800244e:	4b47      	ldr	r3, [pc, #284]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002456:	2b08      	cmp	r3, #8
 8002458:	d11c      	bne.n	8002494 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b44      	ldr	r3, [pc, #272]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d116      	bne.n	8002494 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002466:	4b41      	ldr	r3, [pc, #260]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_RCC_OscConfig+0x152>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e1c7      	b.n	800280e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247e:	4b3b      	ldr	r3, [pc, #236]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4937      	ldr	r1, [pc, #220]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002492:	e03a      	b.n	800250a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d020      	beq.n	80024de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800249c:	4b34      	ldr	r3, [pc, #208]	@ (8002570 <HAL_RCC_OscConfig+0x244>)
 800249e:	2201      	movs	r2, #1
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7fe fed3 	bl	800124c <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024aa:	f7fe fecf 	bl	800124c <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e1a8      	b.n	800280e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024bc:	4b2b      	ldr	r3, [pc, #172]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c8:	4b28      	ldr	r3, [pc, #160]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4925      	ldr	r1, [pc, #148]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]
 80024dc:	e015      	b.n	800250a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024de:	4b24      	ldr	r3, [pc, #144]	@ (8002570 <HAL_RCC_OscConfig+0x244>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7fe feb2 	bl	800124c <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ec:	f7fe feae 	bl	800124c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e187      	b.n	800280e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fe:	4b1b      	ldr	r3, [pc, #108]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d036      	beq.n	8002584 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d016      	beq.n	800254c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251e:	4b15      	ldr	r3, [pc, #84]	@ (8002574 <HAL_RCC_OscConfig+0x248>)
 8002520:	2201      	movs	r2, #1
 8002522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002524:	f7fe fe92 	bl	800124c <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800252c:	f7fe fe8e 	bl	800124c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e167      	b.n	800280e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253e:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <HAL_RCC_OscConfig+0x240>)
 8002540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0x200>
 800254a:	e01b      	b.n	8002584 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800254c:	4b09      	ldr	r3, [pc, #36]	@ (8002574 <HAL_RCC_OscConfig+0x248>)
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002552:	f7fe fe7b 	bl	800124c <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002558:	e00e      	b.n	8002578 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800255a:	f7fe fe77 	bl	800124c <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d907      	bls.n	8002578 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e150      	b.n	800280e <HAL_RCC_OscConfig+0x4e2>
 800256c:	40023800 	.word	0x40023800
 8002570:	42470000 	.word	0x42470000
 8002574:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b88      	ldr	r3, [pc, #544]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1ea      	bne.n	800255a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 8097 	beq.w	80026c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b81      	ldr	r3, [pc, #516]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	4b7d      	ldr	r3, [pc, #500]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	4a7c      	ldr	r2, [pc, #496]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025b2:	4b7a      	ldr	r3, [pc, #488]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b77      	ldr	r3, [pc, #476]	@ (80027a0 <HAL_RCC_OscConfig+0x474>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d118      	bne.n	8002600 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b74      	ldr	r3, [pc, #464]	@ (80027a0 <HAL_RCC_OscConfig+0x474>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a73      	ldr	r2, [pc, #460]	@ (80027a0 <HAL_RCC_OscConfig+0x474>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fe37 	bl	800124c <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e2:	f7fe fe33 	bl	800124c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e10c      	b.n	800280e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f4:	4b6a      	ldr	r3, [pc, #424]	@ (80027a0 <HAL_RCC_OscConfig+0x474>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d106      	bne.n	8002616 <HAL_RCC_OscConfig+0x2ea>
 8002608:	4b64      	ldr	r3, [pc, #400]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800260c:	4a63      	ldr	r2, [pc, #396]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6713      	str	r3, [r2, #112]	@ 0x70
 8002614:	e01c      	b.n	8002650 <HAL_RCC_OscConfig+0x324>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b05      	cmp	r3, #5
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0x30c>
 800261e:	4b5f      	ldr	r3, [pc, #380]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002622:	4a5e      	ldr	r2, [pc, #376]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 8002624:	f043 0304 	orr.w	r3, r3, #4
 8002628:	6713      	str	r3, [r2, #112]	@ 0x70
 800262a:	4b5c      	ldr	r3, [pc, #368]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262e:	4a5b      	ldr	r2, [pc, #364]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6713      	str	r3, [r2, #112]	@ 0x70
 8002636:	e00b      	b.n	8002650 <HAL_RCC_OscConfig+0x324>
 8002638:	4b58      	ldr	r3, [pc, #352]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 800263a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800263c:	4a57      	ldr	r2, [pc, #348]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 800263e:	f023 0301 	bic.w	r3, r3, #1
 8002642:	6713      	str	r3, [r2, #112]	@ 0x70
 8002644:	4b55      	ldr	r3, [pc, #340]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 8002646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002648:	4a54      	ldr	r2, [pc, #336]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 800264a:	f023 0304 	bic.w	r3, r3, #4
 800264e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d015      	beq.n	8002684 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002658:	f7fe fdf8 	bl	800124c <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265e:	e00a      	b.n	8002676 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002660:	f7fe fdf4 	bl	800124c <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800266e:	4293      	cmp	r3, r2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e0cb      	b.n	800280e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002676:	4b49      	ldr	r3, [pc, #292]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0ee      	beq.n	8002660 <HAL_RCC_OscConfig+0x334>
 8002682:	e014      	b.n	80026ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002684:	f7fe fde2 	bl	800124c <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800268a:	e00a      	b.n	80026a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800268c:	f7fe fdde 	bl	800124c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e0b5      	b.n	800280e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a2:	4b3e      	ldr	r3, [pc, #248]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 80026a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1ee      	bne.n	800268c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ae:	7dfb      	ldrb	r3, [r7, #23]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d105      	bne.n	80026c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b4:	4b39      	ldr	r3, [pc, #228]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 80026b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b8:	4a38      	ldr	r2, [pc, #224]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 80026ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80a1 	beq.w	800280c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026ca:	4b34      	ldr	r3, [pc, #208]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d05c      	beq.n	8002790 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d141      	bne.n	8002762 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026de:	4b31      	ldr	r3, [pc, #196]	@ (80027a4 <HAL_RCC_OscConfig+0x478>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7fe fdb2 	bl	800124c <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ec:	f7fe fdae 	bl	800124c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e087      	b.n	800280e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fe:	4b27      	ldr	r3, [pc, #156]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69da      	ldr	r2, [r3, #28]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	019b      	lsls	r3, r3, #6
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002720:	085b      	lsrs	r3, r3, #1
 8002722:	3b01      	subs	r3, #1
 8002724:	041b      	lsls	r3, r3, #16
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	491b      	ldr	r1, [pc, #108]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002734:	4b1b      	ldr	r3, [pc, #108]	@ (80027a4 <HAL_RCC_OscConfig+0x478>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273a:	f7fe fd87 	bl	800124c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002742:	f7fe fd83 	bl	800124c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e05c      	b.n	800280e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002754:	4b11      	ldr	r3, [pc, #68]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x416>
 8002760:	e054      	b.n	800280c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002762:	4b10      	ldr	r3, [pc, #64]	@ (80027a4 <HAL_RCC_OscConfig+0x478>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe fd70 	bl	800124c <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002770:	f7fe fd6c 	bl	800124c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e045      	b.n	800280e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002782:	4b06      	ldr	r3, [pc, #24]	@ (800279c <HAL_RCC_OscConfig+0x470>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x444>
 800278e:	e03d      	b.n	800280c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d107      	bne.n	80027a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e038      	b.n	800280e <HAL_RCC_OscConfig+0x4e2>
 800279c:	40023800 	.word	0x40023800
 80027a0:	40007000 	.word	0x40007000
 80027a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002818 <HAL_RCC_OscConfig+0x4ec>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d028      	beq.n	8002808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d121      	bne.n	8002808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d11a      	bne.n	8002808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027d8:	4013      	ands	r3, r2
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d111      	bne.n	8002808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ee:	085b      	lsrs	r3, r3, #1
 80027f0:	3b01      	subs	r3, #1
 80027f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d107      	bne.n	8002808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002802:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800

0800281c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0cc      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002830:	4b68      	ldr	r3, [pc, #416]	@ (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d90c      	bls.n	8002858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b65      	ldr	r3, [pc, #404]	@ (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b63      	ldr	r3, [pc, #396]	@ (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0b8      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d020      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002870:	4b59      	ldr	r3, [pc, #356]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a58      	ldr	r2, [pc, #352]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800287a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002888:	4b53      	ldr	r3, [pc, #332]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	4a52      	ldr	r2, [pc, #328]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002894:	4b50      	ldr	r3, [pc, #320]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	494d      	ldr	r1, [pc, #308]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d044      	beq.n	800293c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	4b47      	ldr	r3, [pc, #284]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d119      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e07f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d003      	beq.n	80028da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028da:	4b3f      	ldr	r3, [pc, #252]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e06f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ea:	4b3b      	ldr	r3, [pc, #236]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e067      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fa:	4b37      	ldr	r3, [pc, #220]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f023 0203 	bic.w	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4934      	ldr	r1, [pc, #208]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	4313      	orrs	r3, r2
 800290a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800290c:	f7fe fc9e 	bl	800124c <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	e00a      	b.n	800292a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002914:	f7fe fc9a 	bl	800124c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e04f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	4b2b      	ldr	r3, [pc, #172]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 020c 	and.w	r2, r3, #12
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	429a      	cmp	r2, r3
 800293a:	d1eb      	bne.n	8002914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800293c:	4b25      	ldr	r3, [pc, #148]	@ (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d20c      	bcs.n	8002964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b22      	ldr	r3, [pc, #136]	@ (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b20      	ldr	r3, [pc, #128]	@ (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e032      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002970:	4b19      	ldr	r3, [pc, #100]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4916      	ldr	r1, [pc, #88]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800298e:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	490e      	ldr	r1, [pc, #56]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029a2:	f000 f821 	bl	80029e8 <HAL_RCC_GetSysClockFreq>
 80029a6:	4602      	mov	r2, r0
 80029a8:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	490a      	ldr	r1, [pc, #40]	@ (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	5ccb      	ldrb	r3, [r1, r3]
 80029b6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ba:	4a09      	ldr	r2, [pc, #36]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029be:	4b09      	ldr	r3, [pc, #36]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe fb38 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023c00 	.word	0x40023c00
 80029d8:	40023800 	.word	0x40023800
 80029dc:	08005de0 	.word	0x08005de0
 80029e0:	20000000 	.word	0x20000000
 80029e4:	20000004 	.word	0x20000004

080029e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029ec:	b094      	sub	sp, #80	@ 0x50
 80029ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80029f4:	2300      	movs	r3, #0
 80029f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029f8:	2300      	movs	r3, #0
 80029fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a00:	4b79      	ldr	r3, [pc, #484]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d00d      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x40>
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	f200 80e1 	bhi.w	8002bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0x34>
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d003      	beq.n	8002a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a1a:	e0db      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a1c:	4b73      	ldr	r3, [pc, #460]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x204>)
 8002a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002a20:	e0db      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a22:	4b73      	ldr	r3, [pc, #460]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a26:	e0d8      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a28:	4b6f      	ldr	r3, [pc, #444]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a30:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a32:	4b6d      	ldr	r3, [pc, #436]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d063      	beq.n	8002b06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	099b      	lsrs	r3, r3, #6
 8002a44:	2200      	movs	r2, #0
 8002a46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a50:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a52:	2300      	movs	r3, #0
 8002a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a5a:	4622      	mov	r2, r4
 8002a5c:	462b      	mov	r3, r5
 8002a5e:	f04f 0000 	mov.w	r0, #0
 8002a62:	f04f 0100 	mov.w	r1, #0
 8002a66:	0159      	lsls	r1, r3, #5
 8002a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a6c:	0150      	lsls	r0, r2, #5
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4621      	mov	r1, r4
 8002a74:	1a51      	subs	r1, r2, r1
 8002a76:	6139      	str	r1, [r7, #16]
 8002a78:	4629      	mov	r1, r5
 8002a7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a8c:	4659      	mov	r1, fp
 8002a8e:	018b      	lsls	r3, r1, #6
 8002a90:	4651      	mov	r1, sl
 8002a92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a96:	4651      	mov	r1, sl
 8002a98:	018a      	lsls	r2, r1, #6
 8002a9a:	4651      	mov	r1, sl
 8002a9c:	ebb2 0801 	subs.w	r8, r2, r1
 8002aa0:	4659      	mov	r1, fp
 8002aa2:	eb63 0901 	sbc.w	r9, r3, r1
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aba:	4690      	mov	r8, r2
 8002abc:	4699      	mov	r9, r3
 8002abe:	4623      	mov	r3, r4
 8002ac0:	eb18 0303 	adds.w	r3, r8, r3
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	462b      	mov	r3, r5
 8002ac8:	eb49 0303 	adc.w	r3, r9, r3
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ada:	4629      	mov	r1, r5
 8002adc:	024b      	lsls	r3, r1, #9
 8002ade:	4621      	mov	r1, r4
 8002ae0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	024a      	lsls	r2, r1, #9
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aee:	2200      	movs	r2, #0
 8002af0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002af2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002af4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002af8:	f7fd fb72 	bl	80001e0 <__aeabi_uldivmod>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4613      	mov	r3, r2
 8002b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b04:	e058      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b06:	4b38      	ldr	r3, [pc, #224]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	099b      	lsrs	r3, r3, #6
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	4611      	mov	r1, r2
 8002b12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b16:	623b      	str	r3, [r7, #32]
 8002b18:	2300      	movs	r3, #0
 8002b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b20:	4642      	mov	r2, r8
 8002b22:	464b      	mov	r3, r9
 8002b24:	f04f 0000 	mov.w	r0, #0
 8002b28:	f04f 0100 	mov.w	r1, #0
 8002b2c:	0159      	lsls	r1, r3, #5
 8002b2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b32:	0150      	lsls	r0, r2, #5
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4641      	mov	r1, r8
 8002b3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b3e:	4649      	mov	r1, r9
 8002b40:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b58:	ebb2 040a 	subs.w	r4, r2, sl
 8002b5c:	eb63 050b 	sbc.w	r5, r3, fp
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	00eb      	lsls	r3, r5, #3
 8002b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b6e:	00e2      	lsls	r2, r4, #3
 8002b70:	4614      	mov	r4, r2
 8002b72:	461d      	mov	r5, r3
 8002b74:	4643      	mov	r3, r8
 8002b76:	18e3      	adds	r3, r4, r3
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	464b      	mov	r3, r9
 8002b7c:	eb45 0303 	adc.w	r3, r5, r3
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b8e:	4629      	mov	r1, r5
 8002b90:	028b      	lsls	r3, r1, #10
 8002b92:	4621      	mov	r1, r4
 8002b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b98:	4621      	mov	r1, r4
 8002b9a:	028a      	lsls	r2, r1, #10
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	61fa      	str	r2, [r7, #28]
 8002ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bac:	f7fd fb18 	bl	80001e0 <__aeabi_uldivmod>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002bc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bd2:	e002      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bd4:	4b05      	ldr	r3, [pc, #20]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x204>)
 8002bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3750      	adds	r7, #80	@ 0x50
 8002be0:	46bd      	mov	sp, r7
 8002be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	00f42400 	.word	0x00f42400
 8002bf0:	007a1200 	.word	0x007a1200

08002bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf8:	4b03      	ldr	r3, [pc, #12]	@ (8002c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000000 	.word	0x20000000

08002c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c10:	f7ff fff0 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c14:	4602      	mov	r2, r0
 8002c16:	4b05      	ldr	r3, [pc, #20]	@ (8002c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	0a9b      	lsrs	r3, r3, #10
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	4903      	ldr	r1, [pc, #12]	@ (8002c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c22:	5ccb      	ldrb	r3, [r1, r3]
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	08005df0 	.word	0x08005df0

08002c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c38:	f7ff ffdc 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b05      	ldr	r3, [pc, #20]	@ (8002c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	0b5b      	lsrs	r3, r3, #13
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4903      	ldr	r1, [pc, #12]	@ (8002c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	08005df0 	.word	0x08005df0

08002c5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	220f      	movs	r2, #15
 8002c6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c6c:	4b12      	ldr	r3, [pc, #72]	@ (8002cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0203 	and.w	r2, r3, #3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c78:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c84:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c90:	4b09      	ldr	r3, [pc, #36]	@ (8002cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	08db      	lsrs	r3, r3, #3
 8002c96:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c9e:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <HAL_RCC_GetClockConfig+0x60>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0207 	and.w	r2, r3, #7
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	601a      	str	r2, [r3, #0]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40023c00 	.word	0x40023c00

08002cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d038      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ce8:	4b68      	ldr	r3, [pc, #416]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cee:	f7fe faad 	bl	800124c <HAL_GetTick>
 8002cf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002cf6:	f7fe faa9 	bl	800124c <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e0bd      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d08:	4b61      	ldr	r3, [pc, #388]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f0      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	019b      	lsls	r3, r3, #6
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	071b      	lsls	r3, r3, #28
 8002d26:	495a      	ldr	r1, [pc, #360]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d2e:	4b57      	ldr	r3, [pc, #348]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d34:	f7fe fa8a 	bl	800124c <HAL_GetTick>
 8002d38:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d3c:	f7fe fa86 	bl	800124c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e09a      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d4e:	4b50      	ldr	r3, [pc, #320]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 8083 	beq.w	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	4b48      	ldr	r3, [pc, #288]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	4a47      	ldr	r2, [pc, #284]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d76:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d78:	4b45      	ldr	r3, [pc, #276]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d84:	4b43      	ldr	r3, [pc, #268]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a42      	ldr	r2, [pc, #264]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d8e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d90:	f7fe fa5c 	bl	800124c <HAL_GetTick>
 8002d94:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d98:	f7fe fa58 	bl	800124c <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e06c      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002daa:	4b3a      	ldr	r3, [pc, #232]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002db6:	4b36      	ldr	r3, [pc, #216]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dbe:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d02f      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d028      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ddc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dde:	4b2e      	ldr	r3, [pc, #184]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002de4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002dea:	4a29      	ldr	r2, [pc, #164]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002df0:	4b27      	ldr	r3, [pc, #156]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d114      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fa26 	bl	800124c <HAL_GetTick>
 8002e00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e02:	e00a      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e04:	f7fe fa22 	bl	800124c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e034      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0ee      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e32:	d10d      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002e34:	4b16      	ldr	r3, [pc, #88]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002e44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e48:	4911      	ldr	r1, [pc, #68]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
 8002e4e:	e005      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002e50:	4b0f      	ldr	r3, [pc, #60]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	4a0e      	ldr	r2, [pc, #56]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e56:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002e5a:	6093      	str	r3, [r2, #8]
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e68:	4909      	ldr	r1, [pc, #36]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	7d1a      	ldrb	r2, [r3, #20]
 8002e7e:	4b07      	ldr	r3, [pc, #28]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002e80:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	42470068 	.word	0x42470068
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40007000 	.word	0x40007000
 8002e98:	42470e40 	.word	0x42470e40
 8002e9c:	424711e0 	.word	0x424711e0

08002ea0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d141      	bne.n	8002f42 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002ebe:	4b25      	ldr	r3, [pc, #148]	@ (8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d006      	beq.n	8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ed4:	d131      	bne.n	8002f3a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002ed6:	4b20      	ldr	r3, [pc, #128]	@ (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002ed8:	617b      	str	r3, [r7, #20]
          break;
 8002eda:	e031      	b.n	8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002edc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ee4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ee8:	d109      	bne.n	8002efe <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002eea:	4b1a      	ldr	r3, [pc, #104]	@ (8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ef0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ef4:	4a19      	ldr	r2, [pc, #100]	@ (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	e008      	b.n	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002efe:	4b15      	ldr	r3, [pc, #84]	@ (8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f08:	4a15      	ldr	r2, [pc, #84]	@ (8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8002f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002f10:	4b10      	ldr	r3, [pc, #64]	@ (8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f16:	099b      	lsrs	r3, r3, #6
 8002f18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	fb02 f303 	mul.w	r3, r2, r3
 8002f22:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002f24:	4b0b      	ldr	r3, [pc, #44]	@ (8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f2a:	0f1b      	lsrs	r3, r3, #28
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f36:	617b      	str	r3, [r7, #20]
          break;
 8002f38:	e002      	b.n	8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
          break;
 8002f3e:	bf00      	nop
        }
      }
      break;
 8002f40:	e000      	b.n	8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 8002f42:	bf00      	nop
    }
  }
  return frequency;
 8002f44:	697b      	ldr	r3, [r7, #20]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40023800 	.word	0x40023800
 8002f58:	00bb8000 	.word	0x00bb8000
 8002f5c:	007a1200 	.word	0x007a1200
 8002f60:	00f42400 	.word	0x00f42400

08002f64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e07b      	b.n	800306e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d108      	bne.n	8002f90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f86:	d009      	beq.n	8002f9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	61da      	str	r2, [r3, #28]
 8002f8e:	e005      	b.n	8002f9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fd fff6 	bl	8000fa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003020:	ea42 0103 	orr.w	r1, r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003028:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	0c1b      	lsrs	r3, r3, #16
 800303a:	f003 0104 	and.w	r1, r3, #4
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003042:	f003 0210 	and.w	r2, r3, #16
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800305c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e041      	b.n	800310c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d106      	bne.n	80030a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f839 	bl	8003114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2202      	movs	r2, #2
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3304      	adds	r3, #4
 80030b2:	4619      	mov	r1, r3
 80030b4:	4610      	mov	r0, r2
 80030b6:	f000 f9b1 	bl	800341c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b01      	cmp	r3, #1
 800313a:	d001      	beq.n	8003140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e044      	b.n	80031ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1e      	ldr	r2, [pc, #120]	@ (80031d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d018      	beq.n	8003194 <HAL_TIM_Base_Start_IT+0x6c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800316a:	d013      	beq.n	8003194 <HAL_TIM_Base_Start_IT+0x6c>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1a      	ldr	r2, [pc, #104]	@ (80031dc <HAL_TIM_Base_Start_IT+0xb4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00e      	beq.n	8003194 <HAL_TIM_Base_Start_IT+0x6c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a19      	ldr	r2, [pc, #100]	@ (80031e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d009      	beq.n	8003194 <HAL_TIM_Base_Start_IT+0x6c>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a17      	ldr	r2, [pc, #92]	@ (80031e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_TIM_Base_Start_IT+0x6c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a16      	ldr	r2, [pc, #88]	@ (80031e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d111      	bne.n	80031b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d010      	beq.n	80031c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0201 	orr.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b6:	e007      	b.n	80031c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40010000 	.word	0x40010000
 80031dc:	40000400 	.word	0x40000400
 80031e0:	40000800 	.word	0x40000800
 80031e4:	40000c00 	.word	0x40000c00
 80031e8:	40014000 	.word	0x40014000

080031ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d020      	beq.n	8003250 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01b      	beq.n	8003250 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0202 	mvn.w	r2, #2
 8003220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f8d2 	bl	80033e0 <HAL_TIM_IC_CaptureCallback>
 800323c:	e005      	b.n	800324a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f8c4 	bl	80033cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f8d5 	bl	80033f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	d020      	beq.n	800329c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01b      	beq.n	800329c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0204 	mvn.w	r2, #4
 800326c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2202      	movs	r2, #2
 8003272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f8ac 	bl	80033e0 <HAL_TIM_IC_CaptureCallback>
 8003288:	e005      	b.n	8003296 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f89e 	bl	80033cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f8af 	bl	80033f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d020      	beq.n	80032e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01b      	beq.n	80032e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0208 	mvn.w	r2, #8
 80032b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2204      	movs	r2, #4
 80032be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f886 	bl	80033e0 <HAL_TIM_IC_CaptureCallback>
 80032d4:	e005      	b.n	80032e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f878 	bl	80033cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f889 	bl	80033f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f003 0310 	and.w	r3, r3, #16
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d020      	beq.n	8003334 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01b      	beq.n	8003334 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0210 	mvn.w	r2, #16
 8003304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2208      	movs	r2, #8
 800330a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f860 	bl	80033e0 <HAL_TIM_IC_CaptureCallback>
 8003320:	e005      	b.n	800332e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f852 	bl	80033cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f863 	bl	80033f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00c      	beq.n	8003358 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d007      	beq.n	8003358 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0201 	mvn.w	r2, #1
 8003350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fd fcce 	bl	8000cf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00c      	beq.n	800337c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003368:	2b00      	cmp	r3, #0
 800336a:	d007      	beq.n	800337c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f8e6 	bl	8003548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00c      	beq.n	80033a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338c:	2b00      	cmp	r3, #0
 800338e:	d007      	beq.n	80033a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f834 	bl	8003408 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00c      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d007      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0220 	mvn.w	r2, #32
 80033bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8b8 	bl	8003534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033c4:	bf00      	nop
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a3a      	ldr	r2, [pc, #232]	@ (8003518 <TIM_Base_SetConfig+0xfc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00f      	beq.n	8003454 <TIM_Base_SetConfig+0x38>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800343a:	d00b      	beq.n	8003454 <TIM_Base_SetConfig+0x38>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a37      	ldr	r2, [pc, #220]	@ (800351c <TIM_Base_SetConfig+0x100>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d007      	beq.n	8003454 <TIM_Base_SetConfig+0x38>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a36      	ldr	r2, [pc, #216]	@ (8003520 <TIM_Base_SetConfig+0x104>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d003      	beq.n	8003454 <TIM_Base_SetConfig+0x38>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a35      	ldr	r2, [pc, #212]	@ (8003524 <TIM_Base_SetConfig+0x108>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d108      	bne.n	8003466 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800345a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a2b      	ldr	r2, [pc, #172]	@ (8003518 <TIM_Base_SetConfig+0xfc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d01b      	beq.n	80034a6 <TIM_Base_SetConfig+0x8a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003474:	d017      	beq.n	80034a6 <TIM_Base_SetConfig+0x8a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a28      	ldr	r2, [pc, #160]	@ (800351c <TIM_Base_SetConfig+0x100>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d013      	beq.n	80034a6 <TIM_Base_SetConfig+0x8a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a27      	ldr	r2, [pc, #156]	@ (8003520 <TIM_Base_SetConfig+0x104>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00f      	beq.n	80034a6 <TIM_Base_SetConfig+0x8a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a26      	ldr	r2, [pc, #152]	@ (8003524 <TIM_Base_SetConfig+0x108>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00b      	beq.n	80034a6 <TIM_Base_SetConfig+0x8a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a25      	ldr	r2, [pc, #148]	@ (8003528 <TIM_Base_SetConfig+0x10c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d007      	beq.n	80034a6 <TIM_Base_SetConfig+0x8a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a24      	ldr	r2, [pc, #144]	@ (800352c <TIM_Base_SetConfig+0x110>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d003      	beq.n	80034a6 <TIM_Base_SetConfig+0x8a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a23      	ldr	r2, [pc, #140]	@ (8003530 <TIM_Base_SetConfig+0x114>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d108      	bne.n	80034b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a0e      	ldr	r2, [pc, #56]	@ (8003518 <TIM_Base_SetConfig+0xfc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d103      	bne.n	80034ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d105      	bne.n	800350a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f023 0201 	bic.w	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	611a      	str	r2, [r3, #16]
  }
}
 800350a:	bf00      	nop
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40010000 	.word	0x40010000
 800351c:	40000400 	.word	0x40000400
 8003520:	40000800 	.word	0x40000800
 8003524:	40000c00 	.word	0x40000c00
 8003528:	40014000 	.word	0x40014000
 800352c:	40014400 	.word	0x40014400
 8003530:	40014800 	.word	0x40014800

08003534 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800356a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800356e:	2b84      	cmp	r3, #132	@ 0x84
 8003570:	d005      	beq.n	800357e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003572:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4413      	add	r3, r2
 800357a:	3303      	adds	r3, #3
 800357c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800357e:	68fb      	ldr	r3, [r7, #12]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003590:	f001 f8b6 	bl	8004700 <vTaskStartScheduler>
  
  return osOK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	bd80      	pop	{r7, pc}

0800359a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800359a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359c:	b089      	sub	sp, #36	@ 0x24
 800359e:	af04      	add	r7, sp, #16
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d020      	beq.n	80035ee <osThreadCreate+0x54>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d01c      	beq.n	80035ee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685c      	ldr	r4, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691e      	ldr	r6, [r3, #16]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff ffc8 	bl	800355c <makeFreeRtosPriority>
 80035cc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035d6:	9202      	str	r2, [sp, #8]
 80035d8:	9301      	str	r3, [sp, #4]
 80035da:	9100      	str	r1, [sp, #0]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4632      	mov	r2, r6
 80035e0:	4629      	mov	r1, r5
 80035e2:	4620      	mov	r0, r4
 80035e4:	f000 fea6 	bl	8004334 <xTaskCreateStatic>
 80035e8:	4603      	mov	r3, r0
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	e01c      	b.n	8003628 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685c      	ldr	r4, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035fa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff ffaa 	bl	800355c <makeFreeRtosPriority>
 8003608:	4602      	mov	r2, r0
 800360a:	f107 030c 	add.w	r3, r7, #12
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	9200      	str	r2, [sp, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	4632      	mov	r2, r6
 8003616:	4629      	mov	r1, r5
 8003618:	4620      	mov	r0, r4
 800361a:	f000 feeb 	bl	80043f4 <xTaskCreate>
 800361e:	4603      	mov	r3, r0
 8003620:	2b01      	cmp	r3, #1
 8003622:	d001      	beq.n	8003628 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003624:	2300      	movs	r3, #0
 8003626:	e000      	b.n	800362a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003628:	68fb      	ldr	r3, [r7, #12]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003632 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <osDelay+0x16>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	e000      	b.n	800364a <osDelay+0x18>
 8003648:	2301      	movs	r3, #1
 800364a:	4618      	mov	r0, r3
 800364c:	f001 f822 	bl	8004694 <vTaskDelay>
  
  return osOK;
 8003650:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800365a:	b590      	push	{r4, r7, lr}
 800365c:	b085      	sub	sp, #20
 800365e:	af02      	add	r7, sp, #8
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d011      	beq.n	8003690 <osMessageCreate+0x36>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00d      	beq.n	8003690 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	2400      	movs	r4, #0
 8003686:	9400      	str	r4, [sp, #0]
 8003688:	f000 f92e 	bl	80038e8 <xQueueGenericCreateStatic>
 800368c:	4603      	mov	r3, r0
 800368e:	e008      	b.n	80036a2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	4619      	mov	r1, r3
 800369c:	f000 f9a1 	bl	80039e2 <xQueueGenericCreate>
 80036a0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd90      	pop	{r4, r7, pc}

080036aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f103 0208 	add.w	r2, r3, #8
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f04f 32ff 	mov.w	r2, #4294967295
 80036c2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f103 0208 	add.w	r2, r3, #8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f103 0208 	add.w	r2, r3, #8
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	601a      	str	r2, [r3, #0]
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003762:	d103      	bne.n	800376c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e00c      	b.n	8003786 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3308      	adds	r3, #8
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	e002      	b.n	800377a <vListInsert+0x2e>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	429a      	cmp	r2, r3
 8003784:	d2f6      	bcs.n	8003774 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	601a      	str	r2, [r3, #0]
}
 80037b2:	bf00      	nop
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037be:	b480      	push	{r7}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6892      	ldr	r2, [r2, #8]
 80037d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6852      	ldr	r2, [r2, #4]
 80037de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d103      	bne.n	80037f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	1e5a      	subs	r2, r3, #1
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
	...

08003814 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10b      	bne.n	8003840 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	e7fd      	b.n	800383c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003840:	f001 fed2 	bl	80055e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800384c:	68f9      	ldr	r1, [r7, #12]
 800384e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	441a      	add	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003870:	3b01      	subs	r3, #1
 8003872:	68f9      	ldr	r1, [r7, #12]
 8003874:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	441a      	add	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	22ff      	movs	r2, #255	@ 0xff
 8003884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	22ff      	movs	r2, #255	@ 0xff
 800388c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d114      	bne.n	80038c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d01a      	beq.n	80038d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3310      	adds	r3, #16
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 f986 	bl	8004bb4 <xTaskRemoveFromEventList>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d012      	beq.n	80038d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038ae:	4b0d      	ldr	r3, [pc, #52]	@ (80038e4 <xQueueGenericReset+0xd0>)
 80038b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	e009      	b.n	80038d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3310      	adds	r3, #16
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff fef0 	bl	80036aa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3324      	adds	r3, #36	@ 0x24
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff feeb 	bl	80036aa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038d4:	f001 feba 	bl	800564c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038d8:	2301      	movs	r3, #1
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	e000ed04 	.word	0xe000ed04

080038e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08e      	sub	sp, #56	@ 0x38
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10b      	bne.n	8003914 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	e7fd      	b.n	8003910 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10b      	bne.n	8003932 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	e7fd      	b.n	800392e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <xQueueGenericCreateStatic+0x56>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <xQueueGenericCreateStatic+0x5a>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <xQueueGenericCreateStatic+0x5c>
 8003942:	2300      	movs	r3, #0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10b      	bne.n	8003960 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	623b      	str	r3, [r7, #32]
}
 800395a:	bf00      	nop
 800395c:	bf00      	nop
 800395e:	e7fd      	b.n	800395c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d102      	bne.n	800396c <xQueueGenericCreateStatic+0x84>
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <xQueueGenericCreateStatic+0x88>
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <xQueueGenericCreateStatic+0x8a>
 8003970:	2300      	movs	r3, #0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10b      	bne.n	800398e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	61fb      	str	r3, [r7, #28]
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	e7fd      	b.n	800398a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800398e:	2348      	movs	r3, #72	@ 0x48
 8003990:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b48      	cmp	r3, #72	@ 0x48
 8003996:	d00b      	beq.n	80039b0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	61bb      	str	r3, [r7, #24]
}
 80039aa:	bf00      	nop
 80039ac:	bf00      	nop
 80039ae:	e7fd      	b.n	80039ac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80039b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80039b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00d      	beq.n	80039d8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039c4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80039c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f840 	bl	8003a58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80039d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80039da:	4618      	mov	r0, r3
 80039dc:	3730      	adds	r7, #48	@ 0x30
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b08a      	sub	sp, #40	@ 0x28
 80039e6:	af02      	add	r7, sp, #8
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	4613      	mov	r3, r2
 80039ee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10b      	bne.n	8003a0e <xQueueGenericCreate+0x2c>
	__asm volatile
 80039f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	613b      	str	r3, [r7, #16]
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	e7fd      	b.n	8003a0a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	fb02 f303 	mul.w	r3, r2, r3
 8003a16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	3348      	adds	r3, #72	@ 0x48
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 fec3 	bl	80057a8 <pvPortMalloc>
 8003a22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d011      	beq.n	8003a4e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	3348      	adds	r3, #72	@ 0x48
 8003a32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a3c:	79fa      	ldrb	r2, [r7, #7]
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	68b9      	ldr	r1, [r7, #8]
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f805 	bl	8003a58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a4e:	69bb      	ldr	r3, [r7, #24]
	}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3720      	adds	r7, #32
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d103      	bne.n	8003a74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e002      	b.n	8003a7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a86:	2101      	movs	r1, #1
 8003a88:	69b8      	ldr	r0, [r7, #24]
 8003a8a:	f7ff fec3 	bl	8003814 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a8e:	bf00      	nop
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00e      	beq.n	8003ac2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2100      	movs	r1, #0
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f81d 	bl	8003afc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b086      	sub	sp, #24
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	6939      	ldr	r1, [r7, #16]
 8003ae2:	6978      	ldr	r0, [r7, #20]
 8003ae4:	f7ff ff7d 	bl	80039e2 <xQueueGenericCreate>
 8003ae8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f7ff ffd3 	bl	8003a96 <prvInitialiseMutex>

		return xNewQueue;
 8003af0:	68fb      	ldr	r3, [r7, #12]
	}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08e      	sub	sp, #56	@ 0x38
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10b      	bne.n	8003b30 <xQueueGenericSend+0x34>
	__asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b2a:	bf00      	nop
 8003b2c:	bf00      	nop
 8003b2e:	e7fd      	b.n	8003b2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d103      	bne.n	8003b3e <xQueueGenericSend+0x42>
 8003b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <xQueueGenericSend+0x46>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <xQueueGenericSend+0x48>
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10b      	bne.n	8003b60 <xQueueGenericSend+0x64>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b5a:	bf00      	nop
 8003b5c:	bf00      	nop
 8003b5e:	e7fd      	b.n	8003b5c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d103      	bne.n	8003b6e <xQueueGenericSend+0x72>
 8003b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <xQueueGenericSend+0x76>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <xQueueGenericSend+0x78>
 8003b72:	2300      	movs	r3, #0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10b      	bne.n	8003b90 <xQueueGenericSend+0x94>
	__asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	623b      	str	r3, [r7, #32]
}
 8003b8a:	bf00      	nop
 8003b8c:	bf00      	nop
 8003b8e:	e7fd      	b.n	8003b8c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b90:	f001 f9d6 	bl	8004f40 <xTaskGetSchedulerState>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d102      	bne.n	8003ba0 <xQueueGenericSend+0xa4>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <xQueueGenericSend+0xa8>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <xQueueGenericSend+0xaa>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10b      	bne.n	8003bc2 <xQueueGenericSend+0xc6>
	__asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	61fb      	str	r3, [r7, #28]
}
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	e7fd      	b.n	8003bbe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bc2:	f001 fd11 	bl	80055e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d302      	bcc.n	8003bd8 <xQueueGenericSend+0xdc>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d129      	bne.n	8003c2c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bde:	f000 fa99 	bl	8004114 <prvCopyDataToQueue>
 8003be2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d010      	beq.n	8003c0e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bee:	3324      	adds	r3, #36	@ 0x24
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 ffdf 	bl	8004bb4 <xTaskRemoveFromEventList>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d013      	beq.n	8003c24 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003bfc:	4b3f      	ldr	r3, [pc, #252]	@ (8003cfc <xQueueGenericSend+0x200>)
 8003bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	e00a      	b.n	8003c24 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d007      	beq.n	8003c24 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c14:	4b39      	ldr	r3, [pc, #228]	@ (8003cfc <xQueueGenericSend+0x200>)
 8003c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c24:	f001 fd12 	bl	800564c <vPortExitCritical>
				return pdPASS;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e063      	b.n	8003cf4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d103      	bne.n	8003c3a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c32:	f001 fd0b 	bl	800564c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e05c      	b.n	8003cf4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d106      	bne.n	8003c4e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c40:	f107 0314 	add.w	r3, r7, #20
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 f819 	bl	8004c7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c4e:	f001 fcfd 	bl	800564c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c52:	f000 fdbf 	bl	80047d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c56:	f001 fcc7 	bl	80055e8 <vPortEnterCritical>
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c60:	b25b      	sxtb	r3, r3
 8003c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c66:	d103      	bne.n	8003c70 <xQueueGenericSend+0x174>
 8003c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c76:	b25b      	sxtb	r3, r3
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7c:	d103      	bne.n	8003c86 <xQueueGenericSend+0x18a>
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c86:	f001 fce1 	bl	800564c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c8a:	1d3a      	adds	r2, r7, #4
 8003c8c:	f107 0314 	add.w	r3, r7, #20
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f001 f808 	bl	8004ca8 <xTaskCheckForTimeOut>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d124      	bne.n	8003ce8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ca0:	f000 fb30 	bl	8004304 <prvIsQueueFull>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d018      	beq.n	8003cdc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cac:	3310      	adds	r3, #16
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 ff58 	bl	8004b68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003cb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cba:	f000 fabb 	bl	8004234 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003cbe:	f000 fd97 	bl	80047f0 <xTaskResumeAll>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f47f af7c 	bne.w	8003bc2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003cca:	4b0c      	ldr	r3, [pc, #48]	@ (8003cfc <xQueueGenericSend+0x200>)
 8003ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	e772      	b.n	8003bc2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003cdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cde:	f000 faa9 	bl	8004234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ce2:	f000 fd85 	bl	80047f0 <xTaskResumeAll>
 8003ce6:	e76c      	b.n	8003bc2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ce8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cea:	f000 faa3 	bl	8004234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cee:	f000 fd7f 	bl	80047f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003cf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3738      	adds	r7, #56	@ 0x38
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	e000ed04 	.word	0xe000ed04

08003d00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08c      	sub	sp, #48	@ 0x30
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10b      	bne.n	8003d32 <xQueueReceive+0x32>
	__asm volatile
 8003d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	623b      	str	r3, [r7, #32]
}
 8003d2c:	bf00      	nop
 8003d2e:	bf00      	nop
 8003d30:	e7fd      	b.n	8003d2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d103      	bne.n	8003d40 <xQueueReceive+0x40>
 8003d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <xQueueReceive+0x44>
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <xQueueReceive+0x46>
 8003d44:	2300      	movs	r3, #0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10b      	bne.n	8003d62 <xQueueReceive+0x62>
	__asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	61fb      	str	r3, [r7, #28]
}
 8003d5c:	bf00      	nop
 8003d5e:	bf00      	nop
 8003d60:	e7fd      	b.n	8003d5e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d62:	f001 f8ed 	bl	8004f40 <xTaskGetSchedulerState>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d102      	bne.n	8003d72 <xQueueReceive+0x72>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <xQueueReceive+0x76>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <xQueueReceive+0x78>
 8003d76:	2300      	movs	r3, #0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10b      	bne.n	8003d94 <xQueueReceive+0x94>
	__asm volatile
 8003d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	61bb      	str	r3, [r7, #24]
}
 8003d8e:	bf00      	nop
 8003d90:	bf00      	nop
 8003d92:	e7fd      	b.n	8003d90 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d94:	f001 fc28 	bl	80055e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d01f      	beq.n	8003de4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003da8:	f000 fa1e 	bl	80041e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dae:	1e5a      	subs	r2, r3, #1
 8003db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00f      	beq.n	8003ddc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbe:	3310      	adds	r3, #16
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 fef7 	bl	8004bb4 <xTaskRemoveFromEventList>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d007      	beq.n	8003ddc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8003ec0 <xQueueReceive+0x1c0>)
 8003dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ddc:	f001 fc36 	bl	800564c <vPortExitCritical>
				return pdPASS;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e069      	b.n	8003eb8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d103      	bne.n	8003df2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dea:	f001 fc2f 	bl	800564c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e062      	b.n	8003eb8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d106      	bne.n	8003e06 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003df8:	f107 0310 	add.w	r3, r7, #16
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 ff3d 	bl	8004c7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e02:	2301      	movs	r3, #1
 8003e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e06:	f001 fc21 	bl	800564c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e0a:	f000 fce3 	bl	80047d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e0e:	f001 fbeb 	bl	80055e8 <vPortEnterCritical>
 8003e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e18:	b25b      	sxtb	r3, r3
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d103      	bne.n	8003e28 <xQueueReceive+0x128>
 8003e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e2e:	b25b      	sxtb	r3, r3
 8003e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e34:	d103      	bne.n	8003e3e <xQueueReceive+0x13e>
 8003e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e3e:	f001 fc05 	bl	800564c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e42:	1d3a      	adds	r2, r7, #4
 8003e44:	f107 0310 	add.w	r3, r7, #16
 8003e48:	4611      	mov	r1, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 ff2c 	bl	8004ca8 <xTaskCheckForTimeOut>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d123      	bne.n	8003e9e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e58:	f000 fa3e 	bl	80042d8 <prvIsQueueEmpty>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d017      	beq.n	8003e92 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e64:	3324      	adds	r3, #36	@ 0x24
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	4611      	mov	r1, r2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fe7c 	bl	8004b68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e72:	f000 f9df 	bl	8004234 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e76:	f000 fcbb 	bl	80047f0 <xTaskResumeAll>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d189      	bne.n	8003d94 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003e80:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec0 <xQueueReceive+0x1c0>)
 8003e82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	e780      	b.n	8003d94 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e94:	f000 f9ce 	bl	8004234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e98:	f000 fcaa 	bl	80047f0 <xTaskResumeAll>
 8003e9c:	e77a      	b.n	8003d94 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ea0:	f000 f9c8 	bl	8004234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ea4:	f000 fca4 	bl	80047f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ea8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003eaa:	f000 fa15 	bl	80042d8 <prvIsQueueEmpty>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f43f af6f 	beq.w	8003d94 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003eb6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3730      	adds	r7, #48	@ 0x30
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	e000ed04 	.word	0xe000ed04

08003ec4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08e      	sub	sp, #56	@ 0x38
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10b      	bne.n	8003ef8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	623b      	str	r3, [r7, #32]
}
 8003ef2:	bf00      	nop
 8003ef4:	bf00      	nop
 8003ef6:	e7fd      	b.n	8003ef4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00b      	beq.n	8003f18 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	61fb      	str	r3, [r7, #28]
}
 8003f12:	bf00      	nop
 8003f14:	bf00      	nop
 8003f16:	e7fd      	b.n	8003f14 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f18:	f001 f812 	bl	8004f40 <xTaskGetSchedulerState>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d102      	bne.n	8003f28 <xQueueSemaphoreTake+0x64>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <xQueueSemaphoreTake+0x68>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <xQueueSemaphoreTake+0x6a>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10b      	bne.n	8003f4a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	61bb      	str	r3, [r7, #24]
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop
 8003f48:	e7fd      	b.n	8003f46 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f4a:	f001 fb4d 	bl	80055e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f52:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d024      	beq.n	8003fa4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5c:	1e5a      	subs	r2, r3, #1
 8003f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f60:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d104      	bne.n	8003f74 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003f6a:	f001 f995 	bl	8005298 <pvTaskIncrementMutexHeldCount>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f72:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00f      	beq.n	8003f9c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7e:	3310      	adds	r3, #16
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fe17 	bl	8004bb4 <xTaskRemoveFromEventList>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d007      	beq.n	8003f9c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f8c:	4b54      	ldr	r3, [pc, #336]	@ (80040e0 <xQueueSemaphoreTake+0x21c>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f9c:	f001 fb56 	bl	800564c <vPortExitCritical>
				return pdPASS;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e098      	b.n	80040d6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d112      	bne.n	8003fd0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00b      	beq.n	8003fc8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	617b      	str	r3, [r7, #20]
}
 8003fc2:	bf00      	nop
 8003fc4:	bf00      	nop
 8003fc6:	e7fd      	b.n	8003fc4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003fc8:	f001 fb40 	bl	800564c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e082      	b.n	80040d6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fd6:	f107 030c 	add.w	r3, r7, #12
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fe4e 	bl	8004c7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fe4:	f001 fb32 	bl	800564c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fe8:	f000 fbf4 	bl	80047d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fec:	f001 fafc 	bl	80055e8 <vPortEnterCritical>
 8003ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ff6:	b25b      	sxtb	r3, r3
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffc:	d103      	bne.n	8004006 <xQueueSemaphoreTake+0x142>
 8003ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004008:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800400c:	b25b      	sxtb	r3, r3
 800400e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004012:	d103      	bne.n	800401c <xQueueSemaphoreTake+0x158>
 8004014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800401c:	f001 fb16 	bl	800564c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004020:	463a      	mov	r2, r7
 8004022:	f107 030c 	add.w	r3, r7, #12
 8004026:	4611      	mov	r1, r2
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fe3d 	bl	8004ca8 <xTaskCheckForTimeOut>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d132      	bne.n	800409a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004034:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004036:	f000 f94f 	bl	80042d8 <prvIsQueueEmpty>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d026      	beq.n	800408e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d109      	bne.n	800405c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004048:	f001 face 	bl	80055e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800404c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	4618      	mov	r0, r3
 8004052:	f000 ff93 	bl	8004f7c <xTaskPriorityInherit>
 8004056:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004058:	f001 faf8 	bl	800564c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800405c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800405e:	3324      	adds	r3, #36	@ 0x24
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	4611      	mov	r1, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fd7f 	bl	8004b68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800406a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800406c:	f000 f8e2 	bl	8004234 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004070:	f000 fbbe 	bl	80047f0 <xTaskResumeAll>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	f47f af67 	bne.w	8003f4a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800407c:	4b18      	ldr	r3, [pc, #96]	@ (80040e0 <xQueueSemaphoreTake+0x21c>)
 800407e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	e75d      	b.n	8003f4a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800408e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004090:	f000 f8d0 	bl	8004234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004094:	f000 fbac 	bl	80047f0 <xTaskResumeAll>
 8004098:	e757      	b.n	8003f4a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800409a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800409c:	f000 f8ca 	bl	8004234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040a0:	f000 fba6 	bl	80047f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80040a6:	f000 f917 	bl	80042d8 <prvIsQueueEmpty>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f43f af4c 	beq.w	8003f4a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80040b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00d      	beq.n	80040d4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80040b8:	f001 fa96 	bl	80055e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80040bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80040be:	f000 f811 	bl	80040e4 <prvGetDisinheritPriorityAfterTimeout>
 80040c2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80040c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 f854 	bl	8005178 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80040d0:	f001 fabc 	bl	800564c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80040d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3738      	adds	r7, #56	@ 0x38
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	e000ed04 	.word	0xe000ed04

080040e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d006      	beq.n	8004102 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f1c3 0307 	rsb	r3, r3, #7
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	e001      	b.n	8004106 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004106:	68fb      	ldr	r3, [r7, #12]
	}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004128:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10d      	bne.n	800414e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d14d      	bne.n	80041d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 ff92 	bl	8005068 <xTaskPriorityDisinherit>
 8004144:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	609a      	str	r2, [r3, #8]
 800414c:	e043      	b.n	80041d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d119      	bne.n	8004188 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6858      	ldr	r0, [r3, #4]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415c:	461a      	mov	r2, r3
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	f001 fd94 	bl	8005c8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416c:	441a      	add	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	429a      	cmp	r2, r3
 800417c:	d32b      	bcc.n	80041d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	605a      	str	r2, [r3, #4]
 8004186:	e026      	b.n	80041d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	68d8      	ldr	r0, [r3, #12]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004190:	461a      	mov	r2, r3
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	f001 fd7a 	bl	8005c8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a0:	425b      	negs	r3, r3
 80041a2:	441a      	add	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d207      	bcs.n	80041c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041bc:	425b      	negs	r3, r3
 80041be:	441a      	add	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d105      	bne.n	80041d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80041de:	697b      	ldr	r3, [r7, #20]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d018      	beq.n	800422c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	441a      	add	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	429a      	cmp	r2, r3
 8004212:	d303      	bcc.n	800421c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68d9      	ldr	r1, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004224:	461a      	mov	r2, r3
 8004226:	6838      	ldr	r0, [r7, #0]
 8004228:	f001 fd30 	bl	8005c8c <memcpy>
	}
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800423c:	f001 f9d4 	bl	80055e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004246:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004248:	e011      	b.n	800426e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	2b00      	cmp	r3, #0
 8004250:	d012      	beq.n	8004278 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3324      	adds	r3, #36	@ 0x24
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fcac 	bl	8004bb4 <xTaskRemoveFromEventList>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004262:	f000 fd85 	bl	8004d70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	3b01      	subs	r3, #1
 800426a:	b2db      	uxtb	r3, r3
 800426c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800426e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004272:	2b00      	cmp	r3, #0
 8004274:	dce9      	bgt.n	800424a <prvUnlockQueue+0x16>
 8004276:	e000      	b.n	800427a <prvUnlockQueue+0x46>
					break;
 8004278:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	22ff      	movs	r2, #255	@ 0xff
 800427e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004282:	f001 f9e3 	bl	800564c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004286:	f001 f9af 	bl	80055e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004290:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004292:	e011      	b.n	80042b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d012      	beq.n	80042c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3310      	adds	r3, #16
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fc87 	bl	8004bb4 <xTaskRemoveFromEventList>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042ac:	f000 fd60 	bl	8004d70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042b0:	7bbb      	ldrb	r3, [r7, #14]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	dce9      	bgt.n	8004294 <prvUnlockQueue+0x60>
 80042c0:	e000      	b.n	80042c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80042c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	22ff      	movs	r2, #255	@ 0xff
 80042c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80042cc:	f001 f9be 	bl	800564c <vPortExitCritical>
}
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042e0:	f001 f982 	bl	80055e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d102      	bne.n	80042f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80042ec:	2301      	movs	r3, #1
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	e001      	b.n	80042f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042f6:	f001 f9a9 	bl	800564c <vPortExitCritical>

	return xReturn;
 80042fa:	68fb      	ldr	r3, [r7, #12]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800430c:	f001 f96c 	bl	80055e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004318:	429a      	cmp	r2, r3
 800431a:	d102      	bne.n	8004322 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800431c:	2301      	movs	r3, #1
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	e001      	b.n	8004326 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004326:	f001 f991 	bl	800564c <vPortExitCritical>

	return xReturn;
 800432a:	68fb      	ldr	r3, [r7, #12]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08e      	sub	sp, #56	@ 0x38
 8004338:	af04      	add	r7, sp, #16
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	623b      	str	r3, [r7, #32]
}
 800435a:	bf00      	nop
 800435c:	bf00      	nop
 800435e:	e7fd      	b.n	800435c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10b      	bne.n	800437e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	61fb      	str	r3, [r7, #28]
}
 8004378:	bf00      	nop
 800437a:	bf00      	nop
 800437c:	e7fd      	b.n	800437a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800437e:	23a0      	movs	r3, #160	@ 0xa0
 8004380:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	2ba0      	cmp	r3, #160	@ 0xa0
 8004386:	d00b      	beq.n	80043a0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	61bb      	str	r3, [r7, #24]
}
 800439a:	bf00      	nop
 800439c:	bf00      	nop
 800439e:	e7fd      	b.n	800439c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01e      	beq.n	80043e6 <xTaskCreateStatic+0xb2>
 80043a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d01b      	beq.n	80043e6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043c0:	2300      	movs	r3, #0
 80043c2:	9303      	str	r3, [sp, #12]
 80043c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c6:	9302      	str	r3, [sp, #8]
 80043c8:	f107 0314 	add.w	r3, r7, #20
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f851 	bl	8004480 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043e0:	f000 f8ee 	bl	80045c0 <prvAddNewTaskToReadyList>
 80043e4:	e001      	b.n	80043ea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043ea:	697b      	ldr	r3, [r7, #20]
	}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3728      	adds	r7, #40	@ 0x28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08c      	sub	sp, #48	@ 0x30
 80043f8:	af04      	add	r7, sp, #16
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4618      	mov	r0, r3
 800440a:	f001 f9cd 	bl	80057a8 <pvPortMalloc>
 800440e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00e      	beq.n	8004434 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004416:	20a0      	movs	r0, #160	@ 0xa0
 8004418:	f001 f9c6 	bl	80057a8 <pvPortMalloc>
 800441c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	631a      	str	r2, [r3, #48]	@ 0x30
 800442a:	e005      	b.n	8004438 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800442c:	6978      	ldr	r0, [r7, #20]
 800442e:	f001 fa89 	bl	8005944 <vPortFree>
 8004432:	e001      	b.n	8004438 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004434:	2300      	movs	r3, #0
 8004436:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d017      	beq.n	800446e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004446:	88fa      	ldrh	r2, [r7, #6]
 8004448:	2300      	movs	r3, #0
 800444a:	9303      	str	r3, [sp, #12]
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	9302      	str	r3, [sp, #8]
 8004450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004452:	9301      	str	r3, [sp, #4]
 8004454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f80f 	bl	8004480 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004462:	69f8      	ldr	r0, [r7, #28]
 8004464:	f000 f8ac 	bl	80045c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004468:	2301      	movs	r3, #1
 800446a:	61bb      	str	r3, [r7, #24]
 800446c:	e002      	b.n	8004474 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800446e:	f04f 33ff 	mov.w	r3, #4294967295
 8004472:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004474:	69bb      	ldr	r3, [r7, #24]
	}
 8004476:	4618      	mov	r0, r3
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800448e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004498:	3b01      	subs	r3, #1
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	f023 0307 	bic.w	r3, r3, #7
 80044a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00b      	beq.n	80044ca <prvInitialiseNewTask+0x4a>
	__asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	617b      	str	r3, [r7, #20]
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	e7fd      	b.n	80044c6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d01f      	beq.n	8004510 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044d0:	2300      	movs	r3, #0
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	e012      	b.n	80044fc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	4413      	add	r3, r2
 80044dc:	7819      	ldrb	r1, [r3, #0]
 80044de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	4413      	add	r3, r2
 80044e4:	3334      	adds	r3, #52	@ 0x34
 80044e6:	460a      	mov	r2, r1
 80044e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	4413      	add	r3, r2
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d006      	beq.n	8004504 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	3301      	adds	r3, #1
 80044fa:	61fb      	str	r3, [r7, #28]
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	2b0f      	cmp	r3, #15
 8004500:	d9e9      	bls.n	80044d6 <prvInitialiseNewTask+0x56>
 8004502:	e000      	b.n	8004506 <prvInitialiseNewTask+0x86>
			{
				break;
 8004504:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800450e:	e003      	b.n	8004518 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451a:	2b06      	cmp	r3, #6
 800451c:	d901      	bls.n	8004522 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800451e:	2306      	movs	r3, #6
 8004520:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004524:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004526:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800452c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800452e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004530:	2200      	movs	r2, #0
 8004532:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004536:	3304      	adds	r3, #4
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff f8d6 	bl	80036ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800453e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004540:	3318      	adds	r3, #24
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff f8d1 	bl	80036ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800454c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800454e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004550:	f1c3 0207 	rsb	r2, r3, #7
 8004554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004556:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800455c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800455e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004560:	2200      	movs	r2, #0
 8004562:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004568:	2200      	movs	r2, #0
 800456a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004570:	334c      	adds	r3, #76	@ 0x4c
 8004572:	224c      	movs	r2, #76	@ 0x4c
 8004574:	2100      	movs	r1, #0
 8004576:	4618      	mov	r0, r3
 8004578:	f001 fb04 	bl	8005b84 <memset>
 800457c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457e:	4a0d      	ldr	r2, [pc, #52]	@ (80045b4 <prvInitialiseNewTask+0x134>)
 8004580:	651a      	str	r2, [r3, #80]	@ 0x50
 8004582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004584:	4a0c      	ldr	r2, [pc, #48]	@ (80045b8 <prvInitialiseNewTask+0x138>)
 8004586:	655a      	str	r2, [r3, #84]	@ 0x54
 8004588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458a:	4a0c      	ldr	r2, [pc, #48]	@ (80045bc <prvInitialiseNewTask+0x13c>)
 800458c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	68f9      	ldr	r1, [r7, #12]
 8004592:	69b8      	ldr	r0, [r7, #24]
 8004594:	f000 fefa 	bl	800538c <pxPortInitialiseStack>
 8004598:	4602      	mov	r2, r0
 800459a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800459e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045aa:	bf00      	nop
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20004214 	.word	0x20004214
 80045b8:	2000427c 	.word	0x2000427c
 80045bc:	200042e4 	.word	0x200042e4

080045c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045c8:	f001 f80e 	bl	80055e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004678 <prvAddNewTaskToReadyList+0xb8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3301      	adds	r3, #1
 80045d2:	4a29      	ldr	r2, [pc, #164]	@ (8004678 <prvAddNewTaskToReadyList+0xb8>)
 80045d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045d6:	4b29      	ldr	r3, [pc, #164]	@ (800467c <prvAddNewTaskToReadyList+0xbc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045de:	4a27      	ldr	r2, [pc, #156]	@ (800467c <prvAddNewTaskToReadyList+0xbc>)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045e4:	4b24      	ldr	r3, [pc, #144]	@ (8004678 <prvAddNewTaskToReadyList+0xb8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d110      	bne.n	800460e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045ec:	f000 fbe4 	bl	8004db8 <prvInitialiseTaskLists>
 80045f0:	e00d      	b.n	800460e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045f2:	4b23      	ldr	r3, [pc, #140]	@ (8004680 <prvAddNewTaskToReadyList+0xc0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d109      	bne.n	800460e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045fa:	4b20      	ldr	r3, [pc, #128]	@ (800467c <prvAddNewTaskToReadyList+0xbc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004604:	429a      	cmp	r2, r3
 8004606:	d802      	bhi.n	800460e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004608:	4a1c      	ldr	r2, [pc, #112]	@ (800467c <prvAddNewTaskToReadyList+0xbc>)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800460e:	4b1d      	ldr	r3, [pc, #116]	@ (8004684 <prvAddNewTaskToReadyList+0xc4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3301      	adds	r3, #1
 8004614:	4a1b      	ldr	r2, [pc, #108]	@ (8004684 <prvAddNewTaskToReadyList+0xc4>)
 8004616:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461c:	2201      	movs	r2, #1
 800461e:	409a      	lsls	r2, r3
 8004620:	4b19      	ldr	r3, [pc, #100]	@ (8004688 <prvAddNewTaskToReadyList+0xc8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4313      	orrs	r3, r2
 8004626:	4a18      	ldr	r2, [pc, #96]	@ (8004688 <prvAddNewTaskToReadyList+0xc8>)
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800462e:	4613      	mov	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4a15      	ldr	r2, [pc, #84]	@ (800468c <prvAddNewTaskToReadyList+0xcc>)
 8004638:	441a      	add	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3304      	adds	r3, #4
 800463e:	4619      	mov	r1, r3
 8004640:	4610      	mov	r0, r2
 8004642:	f7ff f85f 	bl	8003704 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004646:	f001 f801 	bl	800564c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800464a:	4b0d      	ldr	r3, [pc, #52]	@ (8004680 <prvAddNewTaskToReadyList+0xc0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00e      	beq.n	8004670 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004652:	4b0a      	ldr	r3, [pc, #40]	@ (800467c <prvAddNewTaskToReadyList+0xbc>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465c:	429a      	cmp	r2, r3
 800465e:	d207      	bcs.n	8004670 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004660:	4b0b      	ldr	r3, [pc, #44]	@ (8004690 <prvAddNewTaskToReadyList+0xd0>)
 8004662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004670:	bf00      	nop
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	200005c0 	.word	0x200005c0
 800467c:	200004c0 	.word	0x200004c0
 8004680:	200005cc 	.word	0x200005cc
 8004684:	200005dc 	.word	0x200005dc
 8004688:	200005c8 	.word	0x200005c8
 800468c:	200004c4 	.word	0x200004c4
 8004690:	e000ed04 	.word	0xe000ed04

08004694 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800469c:	2300      	movs	r3, #0
 800469e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d018      	beq.n	80046d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046a6:	4b14      	ldr	r3, [pc, #80]	@ (80046f8 <vTaskDelay+0x64>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00b      	beq.n	80046c6 <vTaskDelay+0x32>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	60bb      	str	r3, [r7, #8]
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	e7fd      	b.n	80046c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80046c6:	f000 f885 	bl	80047d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046ca:	2100      	movs	r1, #0
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fdf7 	bl	80052c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046d2:	f000 f88d 	bl	80047f0 <xTaskResumeAll>
 80046d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d107      	bne.n	80046ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80046de:	4b07      	ldr	r3, [pc, #28]	@ (80046fc <vTaskDelay+0x68>)
 80046e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046ee:	bf00      	nop
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	200005e8 	.word	0x200005e8
 80046fc:	e000ed04 	.word	0xe000ed04

08004700 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08a      	sub	sp, #40	@ 0x28
 8004704:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004706:	2300      	movs	r3, #0
 8004708:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800470a:	2300      	movs	r3, #0
 800470c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800470e:	463a      	mov	r2, r7
 8004710:	1d39      	adds	r1, r7, #4
 8004712:	f107 0308 	add.w	r3, r7, #8
 8004716:	4618      	mov	r0, r3
 8004718:	f7fb feda 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800471c:	6839      	ldr	r1, [r7, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	9202      	str	r2, [sp, #8]
 8004724:	9301      	str	r3, [sp, #4]
 8004726:	2300      	movs	r3, #0
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	2300      	movs	r3, #0
 800472c:	460a      	mov	r2, r1
 800472e:	4921      	ldr	r1, [pc, #132]	@ (80047b4 <vTaskStartScheduler+0xb4>)
 8004730:	4821      	ldr	r0, [pc, #132]	@ (80047b8 <vTaskStartScheduler+0xb8>)
 8004732:	f7ff fdff 	bl	8004334 <xTaskCreateStatic>
 8004736:	4603      	mov	r3, r0
 8004738:	4a20      	ldr	r2, [pc, #128]	@ (80047bc <vTaskStartScheduler+0xbc>)
 800473a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800473c:	4b1f      	ldr	r3, [pc, #124]	@ (80047bc <vTaskStartScheduler+0xbc>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004744:	2301      	movs	r3, #1
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	e001      	b.n	800474e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d11b      	bne.n	800478c <vTaskStartScheduler+0x8c>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	613b      	str	r3, [r7, #16]
}
 8004766:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004768:	4b15      	ldr	r3, [pc, #84]	@ (80047c0 <vTaskStartScheduler+0xc0>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	334c      	adds	r3, #76	@ 0x4c
 800476e:	4a15      	ldr	r2, [pc, #84]	@ (80047c4 <vTaskStartScheduler+0xc4>)
 8004770:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004772:	4b15      	ldr	r3, [pc, #84]	@ (80047c8 <vTaskStartScheduler+0xc8>)
 8004774:	f04f 32ff 	mov.w	r2, #4294967295
 8004778:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800477a:	4b14      	ldr	r3, [pc, #80]	@ (80047cc <vTaskStartScheduler+0xcc>)
 800477c:	2201      	movs	r2, #1
 800477e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004780:	4b13      	ldr	r3, [pc, #76]	@ (80047d0 <vTaskStartScheduler+0xd0>)
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004786:	f000 fe8b 	bl	80054a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800478a:	e00f      	b.n	80047ac <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004792:	d10b      	bne.n	80047ac <vTaskStartScheduler+0xac>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	60fb      	str	r3, [r7, #12]
}
 80047a6:	bf00      	nop
 80047a8:	bf00      	nop
 80047aa:	e7fd      	b.n	80047a8 <vTaskStartScheduler+0xa8>
}
 80047ac:	bf00      	nop
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	08005dd8 	.word	0x08005dd8
 80047b8:	08004d89 	.word	0x08004d89
 80047bc:	200005e4 	.word	0x200005e4
 80047c0:	200004c0 	.word	0x200004c0
 80047c4:	20000010 	.word	0x20000010
 80047c8:	200005e0 	.word	0x200005e0
 80047cc:	200005cc 	.word	0x200005cc
 80047d0:	200005c4 	.word	0x200005c4

080047d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80047d8:	4b04      	ldr	r3, [pc, #16]	@ (80047ec <vTaskSuspendAll+0x18>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3301      	adds	r3, #1
 80047de:	4a03      	ldr	r2, [pc, #12]	@ (80047ec <vTaskSuspendAll+0x18>)
 80047e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80047e2:	bf00      	nop
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	200005e8 	.word	0x200005e8

080047f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047fe:	4b42      	ldr	r3, [pc, #264]	@ (8004908 <xTaskResumeAll+0x118>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10b      	bne.n	800481e <xTaskResumeAll+0x2e>
	__asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	603b      	str	r3, [r7, #0]
}
 8004818:	bf00      	nop
 800481a:	bf00      	nop
 800481c:	e7fd      	b.n	800481a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800481e:	f000 fee3 	bl	80055e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004822:	4b39      	ldr	r3, [pc, #228]	@ (8004908 <xTaskResumeAll+0x118>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3b01      	subs	r3, #1
 8004828:	4a37      	ldr	r2, [pc, #220]	@ (8004908 <xTaskResumeAll+0x118>)
 800482a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800482c:	4b36      	ldr	r3, [pc, #216]	@ (8004908 <xTaskResumeAll+0x118>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d161      	bne.n	80048f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004834:	4b35      	ldr	r3, [pc, #212]	@ (800490c <xTaskResumeAll+0x11c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d05d      	beq.n	80048f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800483c:	e02e      	b.n	800489c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800483e:	4b34      	ldr	r3, [pc, #208]	@ (8004910 <xTaskResumeAll+0x120>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3318      	adds	r3, #24
 800484a:	4618      	mov	r0, r3
 800484c:	f7fe ffb7 	bl	80037be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3304      	adds	r3, #4
 8004854:	4618      	mov	r0, r3
 8004856:	f7fe ffb2 	bl	80037be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485e:	2201      	movs	r2, #1
 8004860:	409a      	lsls	r2, r3
 8004862:	4b2c      	ldr	r3, [pc, #176]	@ (8004914 <xTaskResumeAll+0x124>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4313      	orrs	r3, r2
 8004868:	4a2a      	ldr	r2, [pc, #168]	@ (8004914 <xTaskResumeAll+0x124>)
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4a27      	ldr	r2, [pc, #156]	@ (8004918 <xTaskResumeAll+0x128>)
 800487a:	441a      	add	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3304      	adds	r3, #4
 8004880:	4619      	mov	r1, r3
 8004882:	4610      	mov	r0, r2
 8004884:	f7fe ff3e 	bl	8003704 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488c:	4b23      	ldr	r3, [pc, #140]	@ (800491c <xTaskResumeAll+0x12c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004892:	429a      	cmp	r2, r3
 8004894:	d302      	bcc.n	800489c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004896:	4b22      	ldr	r3, [pc, #136]	@ (8004920 <xTaskResumeAll+0x130>)
 8004898:	2201      	movs	r2, #1
 800489a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800489c:	4b1c      	ldr	r3, [pc, #112]	@ (8004910 <xTaskResumeAll+0x120>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1cc      	bne.n	800483e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048aa:	f000 fb29 	bl	8004f00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80048ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004924 <xTaskResumeAll+0x134>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d010      	beq.n	80048dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048ba:	f000 f837 	bl	800492c <xTaskIncrementTick>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80048c4:	4b16      	ldr	r3, [pc, #88]	@ (8004920 <xTaskResumeAll+0x130>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f1      	bne.n	80048ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80048d6:	4b13      	ldr	r3, [pc, #76]	@ (8004924 <xTaskResumeAll+0x134>)
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048dc:	4b10      	ldr	r3, [pc, #64]	@ (8004920 <xTaskResumeAll+0x130>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d009      	beq.n	80048f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048e4:	2301      	movs	r3, #1
 80048e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004928 <xTaskResumeAll+0x138>)
 80048ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048f8:	f000 fea8 	bl	800564c <vPortExitCritical>

	return xAlreadyYielded;
 80048fc:	68bb      	ldr	r3, [r7, #8]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	200005e8 	.word	0x200005e8
 800490c:	200005c0 	.word	0x200005c0
 8004910:	20000580 	.word	0x20000580
 8004914:	200005c8 	.word	0x200005c8
 8004918:	200004c4 	.word	0x200004c4
 800491c:	200004c0 	.word	0x200004c0
 8004920:	200005d4 	.word	0x200005d4
 8004924:	200005d0 	.word	0x200005d0
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004936:	4b4f      	ldr	r3, [pc, #316]	@ (8004a74 <xTaskIncrementTick+0x148>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f040 808f 	bne.w	8004a5e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004940:	4b4d      	ldr	r3, [pc, #308]	@ (8004a78 <xTaskIncrementTick+0x14c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3301      	adds	r3, #1
 8004946:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004948:	4a4b      	ldr	r2, [pc, #300]	@ (8004a78 <xTaskIncrementTick+0x14c>)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d121      	bne.n	8004998 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004954:	4b49      	ldr	r3, [pc, #292]	@ (8004a7c <xTaskIncrementTick+0x150>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <xTaskIncrementTick+0x4a>
	__asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	603b      	str	r3, [r7, #0]
}
 8004970:	bf00      	nop
 8004972:	bf00      	nop
 8004974:	e7fd      	b.n	8004972 <xTaskIncrementTick+0x46>
 8004976:	4b41      	ldr	r3, [pc, #260]	@ (8004a7c <xTaskIncrementTick+0x150>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	4b40      	ldr	r3, [pc, #256]	@ (8004a80 <xTaskIncrementTick+0x154>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a3e      	ldr	r2, [pc, #248]	@ (8004a7c <xTaskIncrementTick+0x150>)
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	4a3e      	ldr	r2, [pc, #248]	@ (8004a80 <xTaskIncrementTick+0x154>)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a84 <xTaskIncrementTick+0x158>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3301      	adds	r3, #1
 8004990:	4a3c      	ldr	r2, [pc, #240]	@ (8004a84 <xTaskIncrementTick+0x158>)
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	f000 fab4 	bl	8004f00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004998:	4b3b      	ldr	r3, [pc, #236]	@ (8004a88 <xTaskIncrementTick+0x15c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d348      	bcc.n	8004a34 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049a2:	4b36      	ldr	r3, [pc, #216]	@ (8004a7c <xTaskIncrementTick+0x150>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ac:	4b36      	ldr	r3, [pc, #216]	@ (8004a88 <xTaskIncrementTick+0x15c>)
 80049ae:	f04f 32ff 	mov.w	r2, #4294967295
 80049b2:	601a      	str	r2, [r3, #0]
					break;
 80049b4:	e03e      	b.n	8004a34 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049b6:	4b31      	ldr	r3, [pc, #196]	@ (8004a7c <xTaskIncrementTick+0x150>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d203      	bcs.n	80049d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049ce:	4a2e      	ldr	r2, [pc, #184]	@ (8004a88 <xTaskIncrementTick+0x15c>)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80049d4:	e02e      	b.n	8004a34 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	3304      	adds	r3, #4
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe feef 	bl	80037be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d004      	beq.n	80049f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	3318      	adds	r3, #24
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fe fee6 	bl	80037be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f6:	2201      	movs	r2, #1
 80049f8:	409a      	lsls	r2, r3
 80049fa:	4b24      	ldr	r3, [pc, #144]	@ (8004a8c <xTaskIncrementTick+0x160>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	4a22      	ldr	r2, [pc, #136]	@ (8004a8c <xTaskIncrementTick+0x160>)
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4a1f      	ldr	r2, [pc, #124]	@ (8004a90 <xTaskIncrementTick+0x164>)
 8004a12:	441a      	add	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f7fe fe72 	bl	8003704 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a24:	4b1b      	ldr	r3, [pc, #108]	@ (8004a94 <xTaskIncrementTick+0x168>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d3b9      	bcc.n	80049a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a32:	e7b6      	b.n	80049a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a34:	4b17      	ldr	r3, [pc, #92]	@ (8004a94 <xTaskIncrementTick+0x168>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3a:	4915      	ldr	r1, [pc, #84]	@ (8004a90 <xTaskIncrementTick+0x164>)
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	440b      	add	r3, r1
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d901      	bls.n	8004a50 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a50:	4b11      	ldr	r3, [pc, #68]	@ (8004a98 <xTaskIncrementTick+0x16c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	e004      	b.n	8004a68 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a9c <xTaskIncrementTick+0x170>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3301      	adds	r3, #1
 8004a64:	4a0d      	ldr	r2, [pc, #52]	@ (8004a9c <xTaskIncrementTick+0x170>)
 8004a66:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a68:	697b      	ldr	r3, [r7, #20]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	200005e8 	.word	0x200005e8
 8004a78:	200005c4 	.word	0x200005c4
 8004a7c:	20000578 	.word	0x20000578
 8004a80:	2000057c 	.word	0x2000057c
 8004a84:	200005d8 	.word	0x200005d8
 8004a88:	200005e0 	.word	0x200005e0
 8004a8c:	200005c8 	.word	0x200005c8
 8004a90:	200004c4 	.word	0x200004c4
 8004a94:	200004c0 	.word	0x200004c0
 8004a98:	200005d4 	.word	0x200005d4
 8004a9c:	200005d0 	.word	0x200005d0

08004aa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8004b50 <vTaskSwitchContext+0xb0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004aae:	4b29      	ldr	r3, [pc, #164]	@ (8004b54 <vTaskSwitchContext+0xb4>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ab4:	e045      	b.n	8004b42 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004ab6:	4b27      	ldr	r3, [pc, #156]	@ (8004b54 <vTaskSwitchContext+0xb4>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004abc:	4b26      	ldr	r3, [pc, #152]	@ (8004b58 <vTaskSwitchContext+0xb8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	fab3 f383 	clz	r3, r3
 8004ac8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004aca:	7afb      	ldrb	r3, [r7, #11]
 8004acc:	f1c3 031f 	rsb	r3, r3, #31
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	4922      	ldr	r1, [pc, #136]	@ (8004b5c <vTaskSwitchContext+0xbc>)
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10b      	bne.n	8004afe <vTaskSwitchContext+0x5e>
	__asm volatile
 8004ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	607b      	str	r3, [r7, #4]
}
 8004af8:	bf00      	nop
 8004afa:	bf00      	nop
 8004afc:	e7fd      	b.n	8004afa <vTaskSwitchContext+0x5a>
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4a14      	ldr	r2, [pc, #80]	@ (8004b5c <vTaskSwitchContext+0xbc>)
 8004b0a:	4413      	add	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	3308      	adds	r3, #8
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d104      	bne.n	8004b2e <vTaskSwitchContext+0x8e>
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	605a      	str	r2, [r3, #4]
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	4a0a      	ldr	r2, [pc, #40]	@ (8004b60 <vTaskSwitchContext+0xc0>)
 8004b36:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b38:	4b09      	ldr	r3, [pc, #36]	@ (8004b60 <vTaskSwitchContext+0xc0>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	334c      	adds	r3, #76	@ 0x4c
 8004b3e:	4a09      	ldr	r2, [pc, #36]	@ (8004b64 <vTaskSwitchContext+0xc4>)
 8004b40:	6013      	str	r3, [r2, #0]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	200005e8 	.word	0x200005e8
 8004b54:	200005d4 	.word	0x200005d4
 8004b58:	200005c8 	.word	0x200005c8
 8004b5c:	200004c4 	.word	0x200004c4
 8004b60:	200004c0 	.word	0x200004c0
 8004b64:	20000010 	.word	0x20000010

08004b68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10b      	bne.n	8004b90 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	60fb      	str	r3, [r7, #12]
}
 8004b8a:	bf00      	nop
 8004b8c:	bf00      	nop
 8004b8e:	e7fd      	b.n	8004b8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b90:	4b07      	ldr	r3, [pc, #28]	@ (8004bb0 <vTaskPlaceOnEventList+0x48>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3318      	adds	r3, #24
 8004b96:	4619      	mov	r1, r3
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7fe fdd7 	bl	800374c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	6838      	ldr	r0, [r7, #0]
 8004ba2:	f000 fb8d 	bl	80052c0 <prvAddCurrentTaskToDelayedList>
}
 8004ba6:	bf00      	nop
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	200004c0 	.word	0x200004c0

08004bb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	60fb      	str	r3, [r7, #12]
}
 8004bdc:	bf00      	nop
 8004bde:	bf00      	nop
 8004be0:	e7fd      	b.n	8004bde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	3318      	adds	r3, #24
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fe fde9 	bl	80037be <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bec:	4b1d      	ldr	r3, [pc, #116]	@ (8004c64 <xTaskRemoveFromEventList+0xb0>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d11c      	bne.n	8004c2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fe fde0 	bl	80037be <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	2201      	movs	r2, #1
 8004c04:	409a      	lsls	r2, r3
 8004c06:	4b18      	ldr	r3, [pc, #96]	@ (8004c68 <xTaskRemoveFromEventList+0xb4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	4a16      	ldr	r2, [pc, #88]	@ (8004c68 <xTaskRemoveFromEventList+0xb4>)
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4a13      	ldr	r2, [pc, #76]	@ (8004c6c <xTaskRemoveFromEventList+0xb8>)
 8004c1e:	441a      	add	r2, r3
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	3304      	adds	r3, #4
 8004c24:	4619      	mov	r1, r3
 8004c26:	4610      	mov	r0, r2
 8004c28:	f7fe fd6c 	bl	8003704 <vListInsertEnd>
 8004c2c:	e005      	b.n	8004c3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	3318      	adds	r3, #24
 8004c32:	4619      	mov	r1, r3
 8004c34:	480e      	ldr	r0, [pc, #56]	@ (8004c70 <xTaskRemoveFromEventList+0xbc>)
 8004c36:	f7fe fd65 	bl	8003704 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c74 <xTaskRemoveFromEventList+0xc0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d905      	bls.n	8004c54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c78 <xTaskRemoveFromEventList+0xc4>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	e001      	b.n	8004c58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c58:	697b      	ldr	r3, [r7, #20]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	200005e8 	.word	0x200005e8
 8004c68:	200005c8 	.word	0x200005c8
 8004c6c:	200004c4 	.word	0x200004c4
 8004c70:	20000580 	.word	0x20000580
 8004c74:	200004c0 	.word	0x200004c0
 8004c78:	200005d4 	.word	0x200005d4

08004c7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c84:	4b06      	ldr	r3, [pc, #24]	@ (8004ca0 <vTaskInternalSetTimeOutState+0x24>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ca4 <vTaskInternalSetTimeOutState+0x28>)
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	605a      	str	r2, [r3, #4]
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	200005d8 	.word	0x200005d8
 8004ca4:	200005c4 	.word	0x200005c4

08004ca8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10b      	bne.n	8004cd0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	613b      	str	r3, [r7, #16]
}
 8004cca:	bf00      	nop
 8004ccc:	bf00      	nop
 8004cce:	e7fd      	b.n	8004ccc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10b      	bne.n	8004cee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	60fb      	str	r3, [r7, #12]
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	e7fd      	b.n	8004cea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004cee:	f000 fc7b 	bl	80055e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d68 <xTaskCheckForTimeOut+0xc0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0a:	d102      	bne.n	8004d12 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61fb      	str	r3, [r7, #28]
 8004d10:	e023      	b.n	8004d5a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	4b15      	ldr	r3, [pc, #84]	@ (8004d6c <xTaskCheckForTimeOut+0xc4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d007      	beq.n	8004d2e <xTaskCheckForTimeOut+0x86>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d302      	bcc.n	8004d2e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	e015      	b.n	8004d5a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d20b      	bcs.n	8004d50 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	1ad2      	subs	r2, r2, r3
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7ff ff99 	bl	8004c7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	e004      	b.n	8004d5a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d56:	2301      	movs	r3, #1
 8004d58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d5a:	f000 fc77 	bl	800564c <vPortExitCritical>

	return xReturn;
 8004d5e:	69fb      	ldr	r3, [r7, #28]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3720      	adds	r7, #32
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	200005c4 	.word	0x200005c4
 8004d6c:	200005d8 	.word	0x200005d8

08004d70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d74:	4b03      	ldr	r3, [pc, #12]	@ (8004d84 <vTaskMissedYield+0x14>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	601a      	str	r2, [r3, #0]
}
 8004d7a:	bf00      	nop
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	200005d4 	.word	0x200005d4

08004d88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d90:	f000 f852 	bl	8004e38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d94:	4b06      	ldr	r3, [pc, #24]	@ (8004db0 <prvIdleTask+0x28>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d9f9      	bls.n	8004d90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d9c:	4b05      	ldr	r3, [pc, #20]	@ (8004db4 <prvIdleTask+0x2c>)
 8004d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004dac:	e7f0      	b.n	8004d90 <prvIdleTask+0x8>
 8004dae:	bf00      	nop
 8004db0:	200004c4 	.word	0x200004c4
 8004db4:	e000ed04 	.word	0xe000ed04

08004db8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	607b      	str	r3, [r7, #4]
 8004dc2:	e00c      	b.n	8004dde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4a12      	ldr	r2, [pc, #72]	@ (8004e18 <prvInitialiseTaskLists+0x60>)
 8004dd0:	4413      	add	r3, r2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fe fc69 	bl	80036aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	607b      	str	r3, [r7, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b06      	cmp	r3, #6
 8004de2:	d9ef      	bls.n	8004dc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004de4:	480d      	ldr	r0, [pc, #52]	@ (8004e1c <prvInitialiseTaskLists+0x64>)
 8004de6:	f7fe fc60 	bl	80036aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004dea:	480d      	ldr	r0, [pc, #52]	@ (8004e20 <prvInitialiseTaskLists+0x68>)
 8004dec:	f7fe fc5d 	bl	80036aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004df0:	480c      	ldr	r0, [pc, #48]	@ (8004e24 <prvInitialiseTaskLists+0x6c>)
 8004df2:	f7fe fc5a 	bl	80036aa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004df6:	480c      	ldr	r0, [pc, #48]	@ (8004e28 <prvInitialiseTaskLists+0x70>)
 8004df8:	f7fe fc57 	bl	80036aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004dfc:	480b      	ldr	r0, [pc, #44]	@ (8004e2c <prvInitialiseTaskLists+0x74>)
 8004dfe:	f7fe fc54 	bl	80036aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e02:	4b0b      	ldr	r3, [pc, #44]	@ (8004e30 <prvInitialiseTaskLists+0x78>)
 8004e04:	4a05      	ldr	r2, [pc, #20]	@ (8004e1c <prvInitialiseTaskLists+0x64>)
 8004e06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e08:	4b0a      	ldr	r3, [pc, #40]	@ (8004e34 <prvInitialiseTaskLists+0x7c>)
 8004e0a:	4a05      	ldr	r2, [pc, #20]	@ (8004e20 <prvInitialiseTaskLists+0x68>)
 8004e0c:	601a      	str	r2, [r3, #0]
}
 8004e0e:	bf00      	nop
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	200004c4 	.word	0x200004c4
 8004e1c:	20000550 	.word	0x20000550
 8004e20:	20000564 	.word	0x20000564
 8004e24:	20000580 	.word	0x20000580
 8004e28:	20000594 	.word	0x20000594
 8004e2c:	200005ac 	.word	0x200005ac
 8004e30:	20000578 	.word	0x20000578
 8004e34:	2000057c 	.word	0x2000057c

08004e38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e3e:	e019      	b.n	8004e74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e40:	f000 fbd2 	bl	80055e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e44:	4b10      	ldr	r3, [pc, #64]	@ (8004e88 <prvCheckTasksWaitingTermination+0x50>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fe fcb4 	bl	80037be <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e56:	4b0d      	ldr	r3, [pc, #52]	@ (8004e8c <prvCheckTasksWaitingTermination+0x54>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8004e8c <prvCheckTasksWaitingTermination+0x54>)
 8004e5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e60:	4b0b      	ldr	r3, [pc, #44]	@ (8004e90 <prvCheckTasksWaitingTermination+0x58>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	4a0a      	ldr	r2, [pc, #40]	@ (8004e90 <prvCheckTasksWaitingTermination+0x58>)
 8004e68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e6a:	f000 fbef 	bl	800564c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f810 	bl	8004e94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e74:	4b06      	ldr	r3, [pc, #24]	@ (8004e90 <prvCheckTasksWaitingTermination+0x58>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1e1      	bne.n	8004e40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e7c:	bf00      	nop
 8004e7e:	bf00      	nop
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	20000594 	.word	0x20000594
 8004e8c:	200005c0 	.word	0x200005c0
 8004e90:	200005a8 	.word	0x200005a8

08004e94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	334c      	adds	r3, #76	@ 0x4c
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fe77 	bl	8005b94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d108      	bne.n	8004ec2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fd45 	bl	8005944 <vPortFree>
				vPortFree( pxTCB );
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fd42 	bl	8005944 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ec0:	e019      	b.n	8004ef6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d103      	bne.n	8004ed4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fd39 	bl	8005944 <vPortFree>
	}
 8004ed2:	e010      	b.n	8004ef6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d00b      	beq.n	8004ef6 <prvDeleteTCB+0x62>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	60fb      	str	r3, [r7, #12]
}
 8004ef0:	bf00      	nop
 8004ef2:	bf00      	nop
 8004ef4:	e7fd      	b.n	8004ef2 <prvDeleteTCB+0x5e>
	}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f06:	4b0c      	ldr	r3, [pc, #48]	@ (8004f38 <prvResetNextTaskUnblockTime+0x38>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d104      	bne.n	8004f1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f10:	4b0a      	ldr	r3, [pc, #40]	@ (8004f3c <prvResetNextTaskUnblockTime+0x3c>)
 8004f12:	f04f 32ff 	mov.w	r2, #4294967295
 8004f16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f18:	e008      	b.n	8004f2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f1a:	4b07      	ldr	r3, [pc, #28]	@ (8004f38 <prvResetNextTaskUnblockTime+0x38>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	4a04      	ldr	r2, [pc, #16]	@ (8004f3c <prvResetNextTaskUnblockTime+0x3c>)
 8004f2a:	6013      	str	r3, [r2, #0]
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	20000578 	.word	0x20000578
 8004f3c:	200005e0 	.word	0x200005e0

08004f40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f46:	4b0b      	ldr	r3, [pc, #44]	@ (8004f74 <xTaskGetSchedulerState+0x34>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d102      	bne.n	8004f54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	607b      	str	r3, [r7, #4]
 8004f52:	e008      	b.n	8004f66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f54:	4b08      	ldr	r3, [pc, #32]	@ (8004f78 <xTaskGetSchedulerState+0x38>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d102      	bne.n	8004f62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	607b      	str	r3, [r7, #4]
 8004f60:	e001      	b.n	8004f66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f62:	2300      	movs	r3, #0
 8004f64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f66:	687b      	ldr	r3, [r7, #4]
	}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	200005cc 	.word	0x200005cc
 8004f78:	200005e8 	.word	0x200005e8

08004f7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d05e      	beq.n	8005050 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f96:	4b31      	ldr	r3, [pc, #196]	@ (800505c <xTaskPriorityInherit+0xe0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d24e      	bcs.n	800503e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	db06      	blt.n	8004fb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fa8:	4b2c      	ldr	r3, [pc, #176]	@ (800505c <xTaskPriorityInherit+0xe0>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fae:	f1c3 0207 	rsb	r2, r3, #7
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	6959      	ldr	r1, [r3, #20]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4a26      	ldr	r2, [pc, #152]	@ (8005060 <xTaskPriorityInherit+0xe4>)
 8004fc8:	4413      	add	r3, r2
 8004fca:	4299      	cmp	r1, r3
 8004fcc:	d12f      	bne.n	800502e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fe fbf3 	bl	80037be <uxListRemove>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10a      	bne.n	8004ff4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	43da      	mvns	r2, r3
 8004fea:	4b1e      	ldr	r3, [pc, #120]	@ (8005064 <xTaskPriorityInherit+0xe8>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8005064 <xTaskPriorityInherit+0xe8>)
 8004ff2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ff4:	4b19      	ldr	r3, [pc, #100]	@ (800505c <xTaskPriorityInherit+0xe0>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005002:	2201      	movs	r2, #1
 8005004:	409a      	lsls	r2, r3
 8005006:	4b17      	ldr	r3, [pc, #92]	@ (8005064 <xTaskPriorityInherit+0xe8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4313      	orrs	r3, r2
 800500c:	4a15      	ldr	r2, [pc, #84]	@ (8005064 <xTaskPriorityInherit+0xe8>)
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005014:	4613      	mov	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4a10      	ldr	r2, [pc, #64]	@ (8005060 <xTaskPriorityInherit+0xe4>)
 800501e:	441a      	add	r2, r3
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	3304      	adds	r3, #4
 8005024:	4619      	mov	r1, r3
 8005026:	4610      	mov	r0, r2
 8005028:	f7fe fb6c 	bl	8003704 <vListInsertEnd>
 800502c:	e004      	b.n	8005038 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800502e:	4b0b      	ldr	r3, [pc, #44]	@ (800505c <xTaskPriorityInherit+0xe0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005038:	2301      	movs	r3, #1
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	e008      	b.n	8005050 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005042:	4b06      	ldr	r3, [pc, #24]	@ (800505c <xTaskPriorityInherit+0xe0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005048:	429a      	cmp	r2, r3
 800504a:	d201      	bcs.n	8005050 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800504c:	2301      	movs	r3, #1
 800504e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005050:	68fb      	ldr	r3, [r7, #12]
	}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	200004c0 	.word	0x200004c0
 8005060:	200004c4 	.word	0x200004c4
 8005064:	200005c8 	.word	0x200005c8

08005068 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d070      	beq.n	8005160 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800507e:	4b3b      	ldr	r3, [pc, #236]	@ (800516c <xTaskPriorityDisinherit+0x104>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	429a      	cmp	r2, r3
 8005086:	d00b      	beq.n	80050a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	60fb      	str	r3, [r7, #12]
}
 800509a:	bf00      	nop
 800509c:	bf00      	nop
 800509e:	e7fd      	b.n	800509c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10b      	bne.n	80050c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	60bb      	str	r3, [r7, #8]
}
 80050ba:	bf00      	nop
 80050bc:	bf00      	nop
 80050be:	e7fd      	b.n	80050bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050c4:	1e5a      	subs	r2, r3, #1
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d044      	beq.n	8005160 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d140      	bne.n	8005160 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	3304      	adds	r3, #4
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe fb6b 	bl	80037be <uxListRemove>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d115      	bne.n	800511a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f2:	491f      	ldr	r1, [pc, #124]	@ (8005170 <xTaskPriorityDisinherit+0x108>)
 80050f4:	4613      	mov	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <xTaskPriorityDisinherit+0xb2>
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005108:	2201      	movs	r2, #1
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	43da      	mvns	r2, r3
 8005110:	4b18      	ldr	r3, [pc, #96]	@ (8005174 <xTaskPriorityDisinherit+0x10c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4013      	ands	r3, r2
 8005116:	4a17      	ldr	r2, [pc, #92]	@ (8005174 <xTaskPriorityDisinherit+0x10c>)
 8005118:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005126:	f1c3 0207 	rsb	r2, r3, #7
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005132:	2201      	movs	r2, #1
 8005134:	409a      	lsls	r2, r3
 8005136:	4b0f      	ldr	r3, [pc, #60]	@ (8005174 <xTaskPriorityDisinherit+0x10c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4313      	orrs	r3, r2
 800513c:	4a0d      	ldr	r2, [pc, #52]	@ (8005174 <xTaskPriorityDisinherit+0x10c>)
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4a08      	ldr	r2, [pc, #32]	@ (8005170 <xTaskPriorityDisinherit+0x108>)
 800514e:	441a      	add	r2, r3
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	3304      	adds	r3, #4
 8005154:	4619      	mov	r1, r3
 8005156:	4610      	mov	r0, r2
 8005158:	f7fe fad4 	bl	8003704 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800515c:	2301      	movs	r3, #1
 800515e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005160:	697b      	ldr	r3, [r7, #20]
	}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	200004c0 	.word	0x200004c0
 8005170:	200004c4 	.word	0x200004c4
 8005174:	200005c8 	.word	0x200005c8

08005178 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005178:	b580      	push	{r7, lr}
 800517a:	b088      	sub	sp, #32
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005186:	2301      	movs	r3, #1
 8005188:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d079      	beq.n	8005284 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10b      	bne.n	80051b0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	60fb      	str	r3, [r7, #12]
}
 80051aa:	bf00      	nop
 80051ac:	bf00      	nop
 80051ae:	e7fd      	b.n	80051ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d902      	bls.n	80051c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	e002      	b.n	80051c6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d059      	beq.n	8005284 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d154      	bne.n	8005284 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80051da:	4b2c      	ldr	r3, [pc, #176]	@ (800528c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d10b      	bne.n	80051fc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	60bb      	str	r3, [r7, #8]
}
 80051f6:	bf00      	nop
 80051f8:	bf00      	nop
 80051fa:	e7fd      	b.n	80051f8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005200:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	69fa      	ldr	r2, [r7, #28]
 8005206:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	db04      	blt.n	800521a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f1c3 0207 	rsb	r2, r3, #7
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	6959      	ldr	r1, [r3, #20]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4613      	mov	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4a19      	ldr	r2, [pc, #100]	@ (8005290 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800522a:	4413      	add	r3, r2
 800522c:	4299      	cmp	r1, r3
 800522e:	d129      	bne.n	8005284 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	3304      	adds	r3, #4
 8005234:	4618      	mov	r0, r3
 8005236:	f7fe fac2 	bl	80037be <uxListRemove>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005244:	2201      	movs	r2, #1
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	43da      	mvns	r2, r3
 800524c:	4b11      	ldr	r3, [pc, #68]	@ (8005294 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4013      	ands	r3, r2
 8005252:	4a10      	ldr	r2, [pc, #64]	@ (8005294 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005254:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525a:	2201      	movs	r2, #1
 800525c:	409a      	lsls	r2, r3
 800525e:	4b0d      	ldr	r3, [pc, #52]	@ (8005294 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4313      	orrs	r3, r2
 8005264:	4a0b      	ldr	r2, [pc, #44]	@ (8005294 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4a06      	ldr	r2, [pc, #24]	@ (8005290 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005276:	441a      	add	r2, r3
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	3304      	adds	r3, #4
 800527c:	4619      	mov	r1, r3
 800527e:	4610      	mov	r0, r2
 8005280:	f7fe fa40 	bl	8003704 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005284:	bf00      	nop
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	200004c0 	.word	0x200004c0
 8005290:	200004c4 	.word	0x200004c4
 8005294:	200005c8 	.word	0x200005c8

08005298 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800529c:	4b07      	ldr	r3, [pc, #28]	@ (80052bc <pvTaskIncrementMutexHeldCount+0x24>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d004      	beq.n	80052ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80052a4:	4b05      	ldr	r3, [pc, #20]	@ (80052bc <pvTaskIncrementMutexHeldCount+0x24>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052aa:	3201      	adds	r2, #1
 80052ac:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80052ae:	4b03      	ldr	r3, [pc, #12]	@ (80052bc <pvTaskIncrementMutexHeldCount+0x24>)
 80052b0:	681b      	ldr	r3, [r3, #0]
	}
 80052b2:	4618      	mov	r0, r3
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	200004c0 	.word	0x200004c0

080052c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052ca:	4b29      	ldr	r3, [pc, #164]	@ (8005370 <prvAddCurrentTaskToDelayedList+0xb0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052d0:	4b28      	ldr	r3, [pc, #160]	@ (8005374 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3304      	adds	r3, #4
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fe fa71 	bl	80037be <uxListRemove>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10b      	bne.n	80052fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80052e2:	4b24      	ldr	r3, [pc, #144]	@ (8005374 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e8:	2201      	movs	r2, #1
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
 80052ee:	43da      	mvns	r2, r3
 80052f0:	4b21      	ldr	r3, [pc, #132]	@ (8005378 <prvAddCurrentTaskToDelayedList+0xb8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4013      	ands	r3, r2
 80052f6:	4a20      	ldr	r2, [pc, #128]	@ (8005378 <prvAddCurrentTaskToDelayedList+0xb8>)
 80052f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005300:	d10a      	bne.n	8005318 <prvAddCurrentTaskToDelayedList+0x58>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d007      	beq.n	8005318 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005308:	4b1a      	ldr	r3, [pc, #104]	@ (8005374 <prvAddCurrentTaskToDelayedList+0xb4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3304      	adds	r3, #4
 800530e:	4619      	mov	r1, r3
 8005310:	481a      	ldr	r0, [pc, #104]	@ (800537c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005312:	f7fe f9f7 	bl	8003704 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005316:	e026      	b.n	8005366 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4413      	add	r3, r2
 800531e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005320:	4b14      	ldr	r3, [pc, #80]	@ (8005374 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	429a      	cmp	r2, r3
 800532e:	d209      	bcs.n	8005344 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005330:	4b13      	ldr	r3, [pc, #76]	@ (8005380 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	4b0f      	ldr	r3, [pc, #60]	@ (8005374 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3304      	adds	r3, #4
 800533a:	4619      	mov	r1, r3
 800533c:	4610      	mov	r0, r2
 800533e:	f7fe fa05 	bl	800374c <vListInsert>
}
 8005342:	e010      	b.n	8005366 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005344:	4b0f      	ldr	r3, [pc, #60]	@ (8005384 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	4b0a      	ldr	r3, [pc, #40]	@ (8005374 <prvAddCurrentTaskToDelayedList+0xb4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3304      	adds	r3, #4
 800534e:	4619      	mov	r1, r3
 8005350:	4610      	mov	r0, r2
 8005352:	f7fe f9fb 	bl	800374c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005356:	4b0c      	ldr	r3, [pc, #48]	@ (8005388 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	429a      	cmp	r2, r3
 800535e:	d202      	bcs.n	8005366 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005360:	4a09      	ldr	r2, [pc, #36]	@ (8005388 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	6013      	str	r3, [r2, #0]
}
 8005366:	bf00      	nop
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	200005c4 	.word	0x200005c4
 8005374:	200004c0 	.word	0x200004c0
 8005378:	200005c8 	.word	0x200005c8
 800537c:	200005ac 	.word	0x200005ac
 8005380:	2000057c 	.word	0x2000057c
 8005384:	20000578 	.word	0x20000578
 8005388:	200005e0 	.word	0x200005e0

0800538c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3b04      	subs	r3, #4
 800539c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80053a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3b04      	subs	r3, #4
 80053aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f023 0201 	bic.w	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	3b04      	subs	r3, #4
 80053ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053bc:	4a0c      	ldr	r2, [pc, #48]	@ (80053f0 <pxPortInitialiseStack+0x64>)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3b14      	subs	r3, #20
 80053c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3b04      	subs	r3, #4
 80053d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f06f 0202 	mvn.w	r2, #2
 80053da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3b20      	subs	r3, #32
 80053e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053e2:	68fb      	ldr	r3, [r7, #12]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	080053f5 	.word	0x080053f5

080053f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053fe:	4b13      	ldr	r3, [pc, #76]	@ (800544c <prvTaskExitError+0x58>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005406:	d00b      	beq.n	8005420 <prvTaskExitError+0x2c>
	__asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	60fb      	str	r3, [r7, #12]
}
 800541a:	bf00      	nop
 800541c:	bf00      	nop
 800541e:	e7fd      	b.n	800541c <prvTaskExitError+0x28>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	60bb      	str	r3, [r7, #8]
}
 8005432:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005434:	bf00      	nop
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0fc      	beq.n	8005436 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	2000000c 	.word	0x2000000c

08005450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005450:	4b07      	ldr	r3, [pc, #28]	@ (8005470 <pxCurrentTCBConst2>)
 8005452:	6819      	ldr	r1, [r3, #0]
 8005454:	6808      	ldr	r0, [r1, #0]
 8005456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545a:	f380 8809 	msr	PSP, r0
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f04f 0000 	mov.w	r0, #0
 8005466:	f380 8811 	msr	BASEPRI, r0
 800546a:	4770      	bx	lr
 800546c:	f3af 8000 	nop.w

08005470 <pxCurrentTCBConst2>:
 8005470:	200004c0 	.word	0x200004c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop

08005478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005478:	4808      	ldr	r0, [pc, #32]	@ (800549c <prvPortStartFirstTask+0x24>)
 800547a:	6800      	ldr	r0, [r0, #0]
 800547c:	6800      	ldr	r0, [r0, #0]
 800547e:	f380 8808 	msr	MSP, r0
 8005482:	f04f 0000 	mov.w	r0, #0
 8005486:	f380 8814 	msr	CONTROL, r0
 800548a:	b662      	cpsie	i
 800548c:	b661      	cpsie	f
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	df00      	svc	0
 8005498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800549a:	bf00      	nop
 800549c:	e000ed08 	.word	0xe000ed08

080054a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80054a6:	4b47      	ldr	r3, [pc, #284]	@ (80055c4 <xPortStartScheduler+0x124>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a47      	ldr	r2, [pc, #284]	@ (80055c8 <xPortStartScheduler+0x128>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d10b      	bne.n	80054c8 <xPortStartScheduler+0x28>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	613b      	str	r3, [r7, #16]
}
 80054c2:	bf00      	nop
 80054c4:	bf00      	nop
 80054c6:	e7fd      	b.n	80054c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054c8:	4b3e      	ldr	r3, [pc, #248]	@ (80055c4 <xPortStartScheduler+0x124>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a3f      	ldr	r2, [pc, #252]	@ (80055cc <xPortStartScheduler+0x12c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d10b      	bne.n	80054ea <xPortStartScheduler+0x4a>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	60fb      	str	r3, [r7, #12]
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	e7fd      	b.n	80054e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054ea:	4b39      	ldr	r3, [pc, #228]	@ (80055d0 <xPortStartScheduler+0x130>)
 80054ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	22ff      	movs	r2, #255	@ 0xff
 80054fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	b2db      	uxtb	r3, r3
 8005502:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800550c:	b2da      	uxtb	r2, r3
 800550e:	4b31      	ldr	r3, [pc, #196]	@ (80055d4 <xPortStartScheduler+0x134>)
 8005510:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005512:	4b31      	ldr	r3, [pc, #196]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005514:	2207      	movs	r2, #7
 8005516:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005518:	e009      	b.n	800552e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800551a:	4b2f      	ldr	r3, [pc, #188]	@ (80055d8 <xPortStartScheduler+0x138>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3b01      	subs	r3, #1
 8005520:	4a2d      	ldr	r2, [pc, #180]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005522:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	b2db      	uxtb	r3, r3
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	b2db      	uxtb	r3, r3
 800552c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	b2db      	uxtb	r3, r3
 8005532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005536:	2b80      	cmp	r3, #128	@ 0x80
 8005538:	d0ef      	beq.n	800551a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800553a:	4b27      	ldr	r3, [pc, #156]	@ (80055d8 <xPortStartScheduler+0x138>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f1c3 0307 	rsb	r3, r3, #7
 8005542:	2b04      	cmp	r3, #4
 8005544:	d00b      	beq.n	800555e <xPortStartScheduler+0xbe>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	60bb      	str	r3, [r7, #8]
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	e7fd      	b.n	800555a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800555e:	4b1e      	ldr	r3, [pc, #120]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	021b      	lsls	r3, r3, #8
 8005564:	4a1c      	ldr	r2, [pc, #112]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005566:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005568:	4b1b      	ldr	r3, [pc, #108]	@ (80055d8 <xPortStartScheduler+0x138>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005570:	4a19      	ldr	r2, [pc, #100]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005572:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	b2da      	uxtb	r2, r3
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800557c:	4b17      	ldr	r3, [pc, #92]	@ (80055dc <xPortStartScheduler+0x13c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a16      	ldr	r2, [pc, #88]	@ (80055dc <xPortStartScheduler+0x13c>)
 8005582:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005586:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005588:	4b14      	ldr	r3, [pc, #80]	@ (80055dc <xPortStartScheduler+0x13c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a13      	ldr	r2, [pc, #76]	@ (80055dc <xPortStartScheduler+0x13c>)
 800558e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005592:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005594:	f000 f8da 	bl	800574c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005598:	4b11      	ldr	r3, [pc, #68]	@ (80055e0 <xPortStartScheduler+0x140>)
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800559e:	f000 f8f9 	bl	8005794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055a2:	4b10      	ldr	r3, [pc, #64]	@ (80055e4 <xPortStartScheduler+0x144>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a0f      	ldr	r2, [pc, #60]	@ (80055e4 <xPortStartScheduler+0x144>)
 80055a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80055ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055ae:	f7ff ff63 	bl	8005478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055b2:	f7ff fa75 	bl	8004aa0 <vTaskSwitchContext>
	prvTaskExitError();
 80055b6:	f7ff ff1d 	bl	80053f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	e000ed00 	.word	0xe000ed00
 80055c8:	410fc271 	.word	0x410fc271
 80055cc:	410fc270 	.word	0x410fc270
 80055d0:	e000e400 	.word	0xe000e400
 80055d4:	200005ec 	.word	0x200005ec
 80055d8:	200005f0 	.word	0x200005f0
 80055dc:	e000ed20 	.word	0xe000ed20
 80055e0:	2000000c 	.word	0x2000000c
 80055e4:	e000ef34 	.word	0xe000ef34

080055e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	607b      	str	r3, [r7, #4]
}
 8005600:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005602:	4b10      	ldr	r3, [pc, #64]	@ (8005644 <vPortEnterCritical+0x5c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3301      	adds	r3, #1
 8005608:	4a0e      	ldr	r2, [pc, #56]	@ (8005644 <vPortEnterCritical+0x5c>)
 800560a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800560c:	4b0d      	ldr	r3, [pc, #52]	@ (8005644 <vPortEnterCritical+0x5c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d110      	bne.n	8005636 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005614:	4b0c      	ldr	r3, [pc, #48]	@ (8005648 <vPortEnterCritical+0x60>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <vPortEnterCritical+0x4e>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	603b      	str	r3, [r7, #0]
}
 8005630:	bf00      	nop
 8005632:	bf00      	nop
 8005634:	e7fd      	b.n	8005632 <vPortEnterCritical+0x4a>
	}
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	2000000c 	.word	0x2000000c
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005652:	4b12      	ldr	r3, [pc, #72]	@ (800569c <vPortExitCritical+0x50>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10b      	bne.n	8005672 <vPortExitCritical+0x26>
	__asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	607b      	str	r3, [r7, #4]
}
 800566c:	bf00      	nop
 800566e:	bf00      	nop
 8005670:	e7fd      	b.n	800566e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005672:	4b0a      	ldr	r3, [pc, #40]	@ (800569c <vPortExitCritical+0x50>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3b01      	subs	r3, #1
 8005678:	4a08      	ldr	r2, [pc, #32]	@ (800569c <vPortExitCritical+0x50>)
 800567a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800567c:	4b07      	ldr	r3, [pc, #28]	@ (800569c <vPortExitCritical+0x50>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d105      	bne.n	8005690 <vPortExitCritical+0x44>
 8005684:	2300      	movs	r3, #0
 8005686:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800568e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	2000000c 	.word	0x2000000c

080056a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056a0:	f3ef 8009 	mrs	r0, PSP
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	4b15      	ldr	r3, [pc, #84]	@ (8005700 <pxCurrentTCBConst>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	f01e 0f10 	tst.w	lr, #16
 80056b0:	bf08      	it	eq
 80056b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ba:	6010      	str	r0, [r2, #0]
 80056bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80056c4:	f380 8811 	msr	BASEPRI, r0
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f7ff f9e6 	bl	8004aa0 <vTaskSwitchContext>
 80056d4:	f04f 0000 	mov.w	r0, #0
 80056d8:	f380 8811 	msr	BASEPRI, r0
 80056dc:	bc09      	pop	{r0, r3}
 80056de:	6819      	ldr	r1, [r3, #0]
 80056e0:	6808      	ldr	r0, [r1, #0]
 80056e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e6:	f01e 0f10 	tst.w	lr, #16
 80056ea:	bf08      	it	eq
 80056ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80056f0:	f380 8809 	msr	PSP, r0
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	f3af 8000 	nop.w

08005700 <pxCurrentTCBConst>:
 8005700:	200004c0 	.word	0x200004c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop

08005708 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	607b      	str	r3, [r7, #4]
}
 8005720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005722:	f7ff f903 	bl	800492c <xTaskIncrementTick>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800572c:	4b06      	ldr	r3, [pc, #24]	@ (8005748 <SysTick_Handler+0x40>)
 800572e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	2300      	movs	r3, #0
 8005736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	f383 8811 	msr	BASEPRI, r3
}
 800573e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005740:	bf00      	nop
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005750:	4b0b      	ldr	r3, [pc, #44]	@ (8005780 <vPortSetupTimerInterrupt+0x34>)
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005756:	4b0b      	ldr	r3, [pc, #44]	@ (8005784 <vPortSetupTimerInterrupt+0x38>)
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800575c:	4b0a      	ldr	r3, [pc, #40]	@ (8005788 <vPortSetupTimerInterrupt+0x3c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a0a      	ldr	r2, [pc, #40]	@ (800578c <vPortSetupTimerInterrupt+0x40>)
 8005762:	fba2 2303 	umull	r2, r3, r2, r3
 8005766:	099b      	lsrs	r3, r3, #6
 8005768:	4a09      	ldr	r2, [pc, #36]	@ (8005790 <vPortSetupTimerInterrupt+0x44>)
 800576a:	3b01      	subs	r3, #1
 800576c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800576e:	4b04      	ldr	r3, [pc, #16]	@ (8005780 <vPortSetupTimerInterrupt+0x34>)
 8005770:	2207      	movs	r2, #7
 8005772:	601a      	str	r2, [r3, #0]
}
 8005774:	bf00      	nop
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	e000e010 	.word	0xe000e010
 8005784:	e000e018 	.word	0xe000e018
 8005788:	20000000 	.word	0x20000000
 800578c:	10624dd3 	.word	0x10624dd3
 8005790:	e000e014 	.word	0xe000e014

08005794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005794:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80057a4 <vPortEnableVFP+0x10>
 8005798:	6801      	ldr	r1, [r0, #0]
 800579a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800579e:	6001      	str	r1, [r0, #0]
 80057a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80057a2:	bf00      	nop
 80057a4:	e000ed88 	.word	0xe000ed88

080057a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08a      	sub	sp, #40	@ 0x28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057b4:	f7ff f80e 	bl	80047d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057b8:	4b5c      	ldr	r3, [pc, #368]	@ (800592c <pvPortMalloc+0x184>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057c0:	f000 f924 	bl	8005a0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057c4:	4b5a      	ldr	r3, [pc, #360]	@ (8005930 <pvPortMalloc+0x188>)
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f040 8095 	bne.w	80058fc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d01e      	beq.n	8005816 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80057d8:	2208      	movs	r2, #8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4413      	add	r3, r2
 80057de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d015      	beq.n	8005816 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f023 0307 	bic.w	r3, r3, #7
 80057f0:	3308      	adds	r3, #8
 80057f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <pvPortMalloc+0x6e>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	617b      	str	r3, [r7, #20]
}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	e7fd      	b.n	8005812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d06f      	beq.n	80058fc <pvPortMalloc+0x154>
 800581c:	4b45      	ldr	r3, [pc, #276]	@ (8005934 <pvPortMalloc+0x18c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	429a      	cmp	r2, r3
 8005824:	d86a      	bhi.n	80058fc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005826:	4b44      	ldr	r3, [pc, #272]	@ (8005938 <pvPortMalloc+0x190>)
 8005828:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800582a:	4b43      	ldr	r3, [pc, #268]	@ (8005938 <pvPortMalloc+0x190>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005830:	e004      	b.n	800583c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800583c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	429a      	cmp	r2, r3
 8005844:	d903      	bls.n	800584e <pvPortMalloc+0xa6>
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1f1      	bne.n	8005832 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800584e:	4b37      	ldr	r3, [pc, #220]	@ (800592c <pvPortMalloc+0x184>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005854:	429a      	cmp	r2, r3
 8005856:	d051      	beq.n	80058fc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2208      	movs	r2, #8
 800585e:	4413      	add	r3, r2
 8005860:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	1ad2      	subs	r2, r2, r3
 8005872:	2308      	movs	r3, #8
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	429a      	cmp	r2, r3
 8005878:	d920      	bls.n	80058bc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800587a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4413      	add	r3, r2
 8005880:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00b      	beq.n	80058a4 <pvPortMalloc+0xfc>
	__asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	613b      	str	r3, [r7, #16]
}
 800589e:	bf00      	nop
 80058a0:	bf00      	nop
 80058a2:	e7fd      	b.n	80058a0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	1ad2      	subs	r2, r2, r3
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058b6:	69b8      	ldr	r0, [r7, #24]
 80058b8:	f000 f90a 	bl	8005ad0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005934 <pvPortMalloc+0x18c>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005934 <pvPortMalloc+0x18c>)
 80058c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005934 <pvPortMalloc+0x18c>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	4b1b      	ldr	r3, [pc, #108]	@ (800593c <pvPortMalloc+0x194>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d203      	bcs.n	80058de <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058d6:	4b17      	ldr	r3, [pc, #92]	@ (8005934 <pvPortMalloc+0x18c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a18      	ldr	r2, [pc, #96]	@ (800593c <pvPortMalloc+0x194>)
 80058dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	4b13      	ldr	r3, [pc, #76]	@ (8005930 <pvPortMalloc+0x188>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	431a      	orrs	r2, r3
 80058e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80058f2:	4b13      	ldr	r3, [pc, #76]	@ (8005940 <pvPortMalloc+0x198>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3301      	adds	r3, #1
 80058f8:	4a11      	ldr	r2, [pc, #68]	@ (8005940 <pvPortMalloc+0x198>)
 80058fa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058fc:	f7fe ff78 	bl	80047f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00b      	beq.n	8005922 <pvPortMalloc+0x17a>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	60fb      	str	r3, [r7, #12]
}
 800591c:	bf00      	nop
 800591e:	bf00      	nop
 8005920:	e7fd      	b.n	800591e <pvPortMalloc+0x176>
	return pvReturn;
 8005922:	69fb      	ldr	r3, [r7, #28]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3728      	adds	r7, #40	@ 0x28
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	200041fc 	.word	0x200041fc
 8005930:	20004210 	.word	0x20004210
 8005934:	20004200 	.word	0x20004200
 8005938:	200041f4 	.word	0x200041f4
 800593c:	20004204 	.word	0x20004204
 8005940:	20004208 	.word	0x20004208

08005944 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d04f      	beq.n	80059f6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005956:	2308      	movs	r3, #8
 8005958:	425b      	negs	r3, r3
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4413      	add	r3, r2
 800595e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	4b25      	ldr	r3, [pc, #148]	@ (8005a00 <vPortFree+0xbc>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4013      	ands	r3, r2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10b      	bne.n	800598a <vPortFree+0x46>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	60fb      	str	r3, [r7, #12]
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop
 8005988:	e7fd      	b.n	8005986 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00b      	beq.n	80059aa <vPortFree+0x66>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	60bb      	str	r3, [r7, #8]
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop
 80059a8:	e7fd      	b.n	80059a6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	4b14      	ldr	r3, [pc, #80]	@ (8005a00 <vPortFree+0xbc>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4013      	ands	r3, r2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01e      	beq.n	80059f6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d11a      	bne.n	80059f6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005a00 <vPortFree+0xbc>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	43db      	mvns	r3, r3
 80059ca:	401a      	ands	r2, r3
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059d0:	f7fe ff00 	bl	80047d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005a04 <vPortFree+0xc0>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4413      	add	r3, r2
 80059de:	4a09      	ldr	r2, [pc, #36]	@ (8005a04 <vPortFree+0xc0>)
 80059e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059e2:	6938      	ldr	r0, [r7, #16]
 80059e4:	f000 f874 	bl	8005ad0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80059e8:	4b07      	ldr	r3, [pc, #28]	@ (8005a08 <vPortFree+0xc4>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3301      	adds	r3, #1
 80059ee:	4a06      	ldr	r2, [pc, #24]	@ (8005a08 <vPortFree+0xc4>)
 80059f0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80059f2:	f7fe fefd 	bl	80047f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059f6:	bf00      	nop
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20004210 	.word	0x20004210
 8005a04:	20004200 	.word	0x20004200
 8005a08:	2000420c 	.word	0x2000420c

08005a0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a12:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005a16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a18:	4b27      	ldr	r3, [pc, #156]	@ (8005ab8 <prvHeapInit+0xac>)
 8005a1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00c      	beq.n	8005a40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	3307      	adds	r3, #7
 8005a2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0307 	bic.w	r3, r3, #7
 8005a32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ab8 <prvHeapInit+0xac>)
 8005a3c:	4413      	add	r3, r2
 8005a3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a44:	4a1d      	ldr	r2, [pc, #116]	@ (8005abc <prvHeapInit+0xb0>)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8005abc <prvHeapInit+0xb0>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	4413      	add	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a58:	2208      	movs	r2, #8
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0307 	bic.w	r3, r3, #7
 8005a66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4a15      	ldr	r2, [pc, #84]	@ (8005ac0 <prvHeapInit+0xb4>)
 8005a6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a6e:	4b14      	ldr	r3, [pc, #80]	@ (8005ac0 <prvHeapInit+0xb4>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2200      	movs	r2, #0
 8005a74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a76:	4b12      	ldr	r3, [pc, #72]	@ (8005ac0 <prvHeapInit+0xb4>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	1ad2      	subs	r2, r2, r3
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac0 <prvHeapInit+0xb4>)
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	4a0a      	ldr	r2, [pc, #40]	@ (8005ac4 <prvHeapInit+0xb8>)
 8005a9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4a09      	ldr	r2, [pc, #36]	@ (8005ac8 <prvHeapInit+0xbc>)
 8005aa2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005aa4:	4b09      	ldr	r3, [pc, #36]	@ (8005acc <prvHeapInit+0xc0>)
 8005aa6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005aaa:	601a      	str	r2, [r3, #0]
}
 8005aac:	bf00      	nop
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	200005f4 	.word	0x200005f4
 8005abc:	200041f4 	.word	0x200041f4
 8005ac0:	200041fc 	.word	0x200041fc
 8005ac4:	20004204 	.word	0x20004204
 8005ac8:	20004200 	.word	0x20004200
 8005acc:	20004210 	.word	0x20004210

08005ad0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ad8:	4b28      	ldr	r3, [pc, #160]	@ (8005b7c <prvInsertBlockIntoFreeList+0xac>)
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	e002      	b.n	8005ae4 <prvInsertBlockIntoFreeList+0x14>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d8f7      	bhi.n	8005ade <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	4413      	add	r3, r2
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d108      	bne.n	8005b12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	441a      	add	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	441a      	add	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d118      	bne.n	8005b58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4b15      	ldr	r3, [pc, #84]	@ (8005b80 <prvInsertBlockIntoFreeList+0xb0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d00d      	beq.n	8005b4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	441a      	add	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	e008      	b.n	8005b60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b80 <prvInsertBlockIntoFreeList+0xb0>)
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	e003      	b.n	8005b60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d002      	beq.n	8005b6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b6e:	bf00      	nop
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	200041f4 	.word	0x200041f4
 8005b80:	200041fc 	.word	0x200041fc

08005b84 <memset>:
 8005b84:	4402      	add	r2, r0
 8005b86:	4603      	mov	r3, r0
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d100      	bne.n	8005b8e <memset+0xa>
 8005b8c:	4770      	bx	lr
 8005b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b92:	e7f9      	b.n	8005b88 <memset+0x4>

08005b94 <_reclaim_reent>:
 8005b94:	4b29      	ldr	r3, [pc, #164]	@ (8005c3c <_reclaim_reent+0xa8>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4283      	cmp	r3, r0
 8005b9a:	b570      	push	{r4, r5, r6, lr}
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	d04b      	beq.n	8005c38 <_reclaim_reent+0xa4>
 8005ba0:	69c3      	ldr	r3, [r0, #28]
 8005ba2:	b1ab      	cbz	r3, 8005bd0 <_reclaim_reent+0x3c>
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	b16b      	cbz	r3, 8005bc4 <_reclaim_reent+0x30>
 8005ba8:	2500      	movs	r5, #0
 8005baa:	69e3      	ldr	r3, [r4, #28]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	5959      	ldr	r1, [r3, r5]
 8005bb0:	2900      	cmp	r1, #0
 8005bb2:	d13b      	bne.n	8005c2c <_reclaim_reent+0x98>
 8005bb4:	3504      	adds	r5, #4
 8005bb6:	2d80      	cmp	r5, #128	@ 0x80
 8005bb8:	d1f7      	bne.n	8005baa <_reclaim_reent+0x16>
 8005bba:	69e3      	ldr	r3, [r4, #28]
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	68d9      	ldr	r1, [r3, #12]
 8005bc0:	f000 f872 	bl	8005ca8 <_free_r>
 8005bc4:	69e3      	ldr	r3, [r4, #28]
 8005bc6:	6819      	ldr	r1, [r3, #0]
 8005bc8:	b111      	cbz	r1, 8005bd0 <_reclaim_reent+0x3c>
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f000 f86c 	bl	8005ca8 <_free_r>
 8005bd0:	6961      	ldr	r1, [r4, #20]
 8005bd2:	b111      	cbz	r1, 8005bda <_reclaim_reent+0x46>
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	f000 f867 	bl	8005ca8 <_free_r>
 8005bda:	69e1      	ldr	r1, [r4, #28]
 8005bdc:	b111      	cbz	r1, 8005be4 <_reclaim_reent+0x50>
 8005bde:	4620      	mov	r0, r4
 8005be0:	f000 f862 	bl	8005ca8 <_free_r>
 8005be4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005be6:	b111      	cbz	r1, 8005bee <_reclaim_reent+0x5a>
 8005be8:	4620      	mov	r0, r4
 8005bea:	f000 f85d 	bl	8005ca8 <_free_r>
 8005bee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bf0:	b111      	cbz	r1, 8005bf8 <_reclaim_reent+0x64>
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f000 f858 	bl	8005ca8 <_free_r>
 8005bf8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005bfa:	b111      	cbz	r1, 8005c02 <_reclaim_reent+0x6e>
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f000 f853 	bl	8005ca8 <_free_r>
 8005c02:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005c04:	b111      	cbz	r1, 8005c0c <_reclaim_reent+0x78>
 8005c06:	4620      	mov	r0, r4
 8005c08:	f000 f84e 	bl	8005ca8 <_free_r>
 8005c0c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005c0e:	b111      	cbz	r1, 8005c16 <_reclaim_reent+0x82>
 8005c10:	4620      	mov	r0, r4
 8005c12:	f000 f849 	bl	8005ca8 <_free_r>
 8005c16:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005c18:	b111      	cbz	r1, 8005c20 <_reclaim_reent+0x8c>
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	f000 f844 	bl	8005ca8 <_free_r>
 8005c20:	6a23      	ldr	r3, [r4, #32]
 8005c22:	b14b      	cbz	r3, 8005c38 <_reclaim_reent+0xa4>
 8005c24:	4620      	mov	r0, r4
 8005c26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c2a:	4718      	bx	r3
 8005c2c:	680e      	ldr	r6, [r1, #0]
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f000 f83a 	bl	8005ca8 <_free_r>
 8005c34:	4631      	mov	r1, r6
 8005c36:	e7bb      	b.n	8005bb0 <_reclaim_reent+0x1c>
 8005c38:	bd70      	pop	{r4, r5, r6, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000010 	.word	0x20000010

08005c40 <__libc_init_array>:
 8005c40:	b570      	push	{r4, r5, r6, lr}
 8005c42:	4d0d      	ldr	r5, [pc, #52]	@ (8005c78 <__libc_init_array+0x38>)
 8005c44:	4c0d      	ldr	r4, [pc, #52]	@ (8005c7c <__libc_init_array+0x3c>)
 8005c46:	1b64      	subs	r4, r4, r5
 8005c48:	10a4      	asrs	r4, r4, #2
 8005c4a:	2600      	movs	r6, #0
 8005c4c:	42a6      	cmp	r6, r4
 8005c4e:	d109      	bne.n	8005c64 <__libc_init_array+0x24>
 8005c50:	4d0b      	ldr	r5, [pc, #44]	@ (8005c80 <__libc_init_array+0x40>)
 8005c52:	4c0c      	ldr	r4, [pc, #48]	@ (8005c84 <__libc_init_array+0x44>)
 8005c54:	f000 f87e 	bl	8005d54 <_init>
 8005c58:	1b64      	subs	r4, r4, r5
 8005c5a:	10a4      	asrs	r4, r4, #2
 8005c5c:	2600      	movs	r6, #0
 8005c5e:	42a6      	cmp	r6, r4
 8005c60:	d105      	bne.n	8005c6e <__libc_init_array+0x2e>
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
 8005c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c68:	4798      	blx	r3
 8005c6a:	3601      	adds	r6, #1
 8005c6c:	e7ee      	b.n	8005c4c <__libc_init_array+0xc>
 8005c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c72:	4798      	blx	r3
 8005c74:	3601      	adds	r6, #1
 8005c76:	e7f2      	b.n	8005c5e <__libc_init_array+0x1e>
 8005c78:	08005e00 	.word	0x08005e00
 8005c7c:	08005e00 	.word	0x08005e00
 8005c80:	08005e00 	.word	0x08005e00
 8005c84:	08005e04 	.word	0x08005e04

08005c88 <__retarget_lock_acquire_recursive>:
 8005c88:	4770      	bx	lr

08005c8a <__retarget_lock_release_recursive>:
 8005c8a:	4770      	bx	lr

08005c8c <memcpy>:
 8005c8c:	440a      	add	r2, r1
 8005c8e:	4291      	cmp	r1, r2
 8005c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c94:	d100      	bne.n	8005c98 <memcpy+0xc>
 8005c96:	4770      	bx	lr
 8005c98:	b510      	push	{r4, lr}
 8005c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ca2:	4291      	cmp	r1, r2
 8005ca4:	d1f9      	bne.n	8005c9a <memcpy+0xe>
 8005ca6:	bd10      	pop	{r4, pc}

08005ca8 <_free_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	4605      	mov	r5, r0
 8005cac:	2900      	cmp	r1, #0
 8005cae:	d041      	beq.n	8005d34 <_free_r+0x8c>
 8005cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cb4:	1f0c      	subs	r4, r1, #4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	bfb8      	it	lt
 8005cba:	18e4      	addlt	r4, r4, r3
 8005cbc:	f000 f83e 	bl	8005d3c <__malloc_lock>
 8005cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d38 <_free_r+0x90>)
 8005cc2:	6813      	ldr	r3, [r2, #0]
 8005cc4:	b933      	cbnz	r3, 8005cd4 <_free_r+0x2c>
 8005cc6:	6063      	str	r3, [r4, #4]
 8005cc8:	6014      	str	r4, [r2, #0]
 8005cca:	4628      	mov	r0, r5
 8005ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cd0:	f000 b83a 	b.w	8005d48 <__malloc_unlock>
 8005cd4:	42a3      	cmp	r3, r4
 8005cd6:	d908      	bls.n	8005cea <_free_r+0x42>
 8005cd8:	6820      	ldr	r0, [r4, #0]
 8005cda:	1821      	adds	r1, r4, r0
 8005cdc:	428b      	cmp	r3, r1
 8005cde:	bf01      	itttt	eq
 8005ce0:	6819      	ldreq	r1, [r3, #0]
 8005ce2:	685b      	ldreq	r3, [r3, #4]
 8005ce4:	1809      	addeq	r1, r1, r0
 8005ce6:	6021      	streq	r1, [r4, #0]
 8005ce8:	e7ed      	b.n	8005cc6 <_free_r+0x1e>
 8005cea:	461a      	mov	r2, r3
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	b10b      	cbz	r3, 8005cf4 <_free_r+0x4c>
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	d9fa      	bls.n	8005cea <_free_r+0x42>
 8005cf4:	6811      	ldr	r1, [r2, #0]
 8005cf6:	1850      	adds	r0, r2, r1
 8005cf8:	42a0      	cmp	r0, r4
 8005cfa:	d10b      	bne.n	8005d14 <_free_r+0x6c>
 8005cfc:	6820      	ldr	r0, [r4, #0]
 8005cfe:	4401      	add	r1, r0
 8005d00:	1850      	adds	r0, r2, r1
 8005d02:	4283      	cmp	r3, r0
 8005d04:	6011      	str	r1, [r2, #0]
 8005d06:	d1e0      	bne.n	8005cca <_free_r+0x22>
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	6053      	str	r3, [r2, #4]
 8005d0e:	4408      	add	r0, r1
 8005d10:	6010      	str	r0, [r2, #0]
 8005d12:	e7da      	b.n	8005cca <_free_r+0x22>
 8005d14:	d902      	bls.n	8005d1c <_free_r+0x74>
 8005d16:	230c      	movs	r3, #12
 8005d18:	602b      	str	r3, [r5, #0]
 8005d1a:	e7d6      	b.n	8005cca <_free_r+0x22>
 8005d1c:	6820      	ldr	r0, [r4, #0]
 8005d1e:	1821      	adds	r1, r4, r0
 8005d20:	428b      	cmp	r3, r1
 8005d22:	bf04      	itt	eq
 8005d24:	6819      	ldreq	r1, [r3, #0]
 8005d26:	685b      	ldreq	r3, [r3, #4]
 8005d28:	6063      	str	r3, [r4, #4]
 8005d2a:	bf04      	itt	eq
 8005d2c:	1809      	addeq	r1, r1, r0
 8005d2e:	6021      	streq	r1, [r4, #0]
 8005d30:	6054      	str	r4, [r2, #4]
 8005d32:	e7ca      	b.n	8005cca <_free_r+0x22>
 8005d34:	bd38      	pop	{r3, r4, r5, pc}
 8005d36:	bf00      	nop
 8005d38:	20004350 	.word	0x20004350

08005d3c <__malloc_lock>:
 8005d3c:	4801      	ldr	r0, [pc, #4]	@ (8005d44 <__malloc_lock+0x8>)
 8005d3e:	f7ff bfa3 	b.w	8005c88 <__retarget_lock_acquire_recursive>
 8005d42:	bf00      	nop
 8005d44:	2000434c 	.word	0x2000434c

08005d48 <__malloc_unlock>:
 8005d48:	4801      	ldr	r0, [pc, #4]	@ (8005d50 <__malloc_unlock+0x8>)
 8005d4a:	f7ff bf9e 	b.w	8005c8a <__retarget_lock_release_recursive>
 8005d4e:	bf00      	nop
 8005d50:	2000434c 	.word	0x2000434c

08005d54 <_init>:
 8005d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d56:	bf00      	nop
 8005d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d5a:	bc08      	pop	{r3}
 8005d5c:	469e      	mov	lr, r3
 8005d5e:	4770      	bx	lr

08005d60 <_fini>:
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d62:	bf00      	nop
 8005d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d66:	bc08      	pop	{r3}
 8005d68:	469e      	mov	lr, r3
 8005d6a:	4770      	bx	lr
