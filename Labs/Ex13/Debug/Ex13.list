
Ex13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005708  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080058a8  080058a8  000158a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005948  08005948  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08005948  08005948  00015948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005950  08005950  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005950  08005950  00015950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005954  08005954  00015954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042ec  20000064  080059bc  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004350  080059bc  00024350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017e27  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038d5  00000000  00000000  00037efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001628  00000000  00000000  0003b7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001142  00000000  00000000  0003ce00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c9c  00000000  00000000  0003df42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a6b2  00000000  00000000  00056bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009acc7  00000000  00000000  00071290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006044  00000000  00000000  0010bf58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00111f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005890 	.word	0x08005890

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08005890 	.word	0x08005890

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000080 	.word	0x20000080
 800050c:	20000120 	.word	0x20000120

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b5b0      	push	{r4, r5, r7, lr}
 8000512:	b09a      	sub	sp, #104	; 0x68
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fe9b 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f86f 	bl	80005fc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800051e:	f000 f8d5 	bl	80006cc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f9b5 	bl	8000890 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000526:	f000 f8f1 	bl	800070c <MX_I2C1_Init>
  MX_I2S2_Init();
 800052a:	f000 f91d 	bl	8000768 <MX_I2S2_Init>
  MX_I2S3_Init();
 800052e:	f000 f949 	bl	80007c4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000532:	f000 f977 	bl	8000824 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of CriticalResourceMutex */
  osMutexDef(CriticalResourceMutex);
 8000536:	2300      	movs	r3, #0
 8000538:	663b      	str	r3, [r7, #96]	; 0x60
 800053a:	2300      	movs	r3, #0
 800053c:	667b      	str	r3, [r7, #100]	; 0x64
  CriticalResourceMutexHandle = osMutexCreate(osMutex(CriticalResourceMutex));
 800053e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000542:	4618      	mov	r0, r3
 8000544:	f003 f8db 	bl	80036fe <osMutexCreate>
 8000548:	4603      	mov	r3, r0
 800054a:	4a24      	ldr	r2, [pc, #144]	; (80005dc <main+0xcc>)
 800054c:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of CriticalResourceSemaphore */
  osSemaphoreDef(CriticalResourceSemaphore);
 800054e:	2300      	movs	r3, #0
 8000550:	65bb      	str	r3, [r7, #88]	; 0x58
 8000552:	2300      	movs	r3, #0
 8000554:	65fb      	str	r3, [r7, #92]	; 0x5c
  CriticalResourceSemaphoreHandle = osSemaphoreCreate(osSemaphore(CriticalResourceSemaphore), 1);
 8000556:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800055a:	2101      	movs	r1, #1
 800055c:	4618      	mov	r0, r3
 800055e:	f003 f8e6 	bl	800372e <osSemaphoreCreate>
 8000562:	4603      	mov	r3, r0
 8000564:	4a1e      	ldr	r2, [pc, #120]	; (80005e0 <main+0xd0>)
 8000566:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of FlashGreenLed */
  osThreadDef(FlashGreenLed, StartFlashGreenLedTask, osPriorityNormal, 0, 128);
 8000568:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <main+0xd4>)
 800056a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800056e:	461d      	mov	r5, r3
 8000570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000574:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000578:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FlashGreenLedHandle = osThreadCreate(osThread(FlashGreenLed), NULL);
 800057c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f003 f85b 	bl	800363e <osThreadCreate>
 8000588:	4603      	mov	r3, r0
 800058a:	4a17      	ldr	r2, [pc, #92]	; (80005e8 <main+0xd8>)
 800058c:	6013      	str	r3, [r2, #0]

  /* definition and creation of FlashRedLed */
  osThreadDef(FlashRedLed, StartFlashRedLedTask, osPriorityNormal, 0, 128);
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <main+0xdc>)
 8000590:	f107 0420 	add.w	r4, r7, #32
 8000594:	461d      	mov	r5, r3
 8000596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FlashRedLedHandle = osThreadCreate(osThread(FlashRedLed), NULL);
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 f848 	bl	800363e <osThreadCreate>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a0f      	ldr	r2, [pc, #60]	; (80005f0 <main+0xe0>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of FlashBlueLed */
  osThreadDef(FlashBlueLed, StartFlashBlueLedTask, osPriorityNormal, 0, 128);
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <main+0xe4>)
 80005b6:	1d3c      	adds	r4, r7, #4
 80005b8:	461d      	mov	r5, r3
 80005ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FlashBlueLedHandle = osThreadCreate(osThread(FlashBlueLed), NULL);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 f837 	bl	800363e <osThreadCreate>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <main+0xe8>)
 80005d4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005d6:	f003 f82b 	bl	8003630 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005da:	e7fe      	b.n	80005da <main+0xca>
 80005dc:	20000468 	.word	0x20000468
 80005e0:	2000046c 	.word	0x2000046c
 80005e4:	080058b8 	.word	0x080058b8
 80005e8:	2000045c 	.word	0x2000045c
 80005ec:	080058e0 	.word	0x080058e0
 80005f0:	20000460 	.word	0x20000460
 80005f4:	0800590c 	.word	0x0800590c
 80005f8:	20000464 	.word	0x20000464

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f005 f856 	bl	80056bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <SystemClock_Config+0xc8>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a26      	ldr	r2, [pc, #152]	; (80006c4 <SystemClock_Config+0xc8>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <SystemClock_Config+0xc8>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <SystemClock_Config+0xcc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a20      	ldr	r2, [pc, #128]	; (80006c8 <SystemClock_Config+0xcc>)
 8000646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <SystemClock_Config+0xcc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000670:	23c0      	movs	r3, #192	; 0xc0
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000674:	2304      	movs	r3, #4
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0320 	add.w	r3, r7, #32
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fea5 	bl	80023d0 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800068c:	f000 fb28 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2103      	movs	r1, #3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 f907 	bl	80028c0 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006b8:	f000 fb12 	bl	8000ce0 <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	3750      	adds	r7, #80	; 0x50
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006d2:	463b      	mov	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
 80006e0:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006e2:	2301      	movs	r3, #1
 80006e4:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80006e6:	23c8      	movs	r3, #200	; 0xc8
 80006e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80006ea:	2305      	movs	r3, #5
 80006ec:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fb35 	bl	8002d64 <HAL_RCCEx_PeriphCLKConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000700:	f000 faee 	bl	8000ce0 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_I2C1_Init+0x50>)
 8000712:	4a13      	ldr	r2, [pc, #76]	; (8000760 <MX_I2C1_Init+0x54>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_I2C1_Init+0x50>)
 8000718:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_I2C1_Init+0x58>)
 800071a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_I2C1_Init+0x50>)
 800072a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800072e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_I2C1_Init+0x50>)
 800074a:	f001 f85d 	bl	8001808 <HAL_I2C_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000754:	f000 fac4 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000320 	.word	0x20000320
 8000760:	40005400 	.word	0x40005400
 8000764:	000186a0 	.word	0x000186a0

08000768 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2S2_Init+0x50>)
 800076e:	4a13      	ldr	r2, [pc, #76]	; (80007bc <MX_I2S2_Init+0x54>)
 8000770:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_I2S2_Init+0x50>)
 8000774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000778:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_I2S2_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000780:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_I2S2_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_I2S2_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_I2S2_Init+0x50>)
 800078e:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <MX_I2S2_Init+0x58>)
 8000790:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_I2S2_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_I2S2_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_I2S2_Init+0x50>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_I2S2_Init+0x50>)
 80007a6:	f001 f973 	bl	8001a90 <HAL_I2S_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007b0:	f000 fa96 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000374 	.word	0x20000374
 80007bc:	40003800 	.word	0x40003800
 80007c0:	00017700 	.word	0x00017700

080007c4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_I2S3_Init+0x54>)
 80007ca:	4a14      	ldr	r2, [pc, #80]	; (800081c <MX_I2S3_Init+0x58>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2S3_Init+0x54>)
 80007d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_I2S3_Init+0x54>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_I2S3_Init+0x54>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_I2S3_Init+0x54>)
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_I2S3_Init+0x54>)
 80007ec:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <MX_I2S3_Init+0x5c>)
 80007ee:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_I2S3_Init+0x54>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_I2S3_Init+0x54>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_I2S3_Init+0x54>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_I2S3_Init+0x54>)
 8000804:	f001 f944 	bl	8001a90 <HAL_I2S_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800080e:	f000 fa67 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200003bc 	.word	0x200003bc
 800081c:	40003c00 	.word	0x40003c00
 8000820:	00017700 	.word	0x00017700

08000824 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_SPI1_Init+0x64>)
 800082a:	4a18      	ldr	r2, [pc, #96]	; (800088c <MX_SPI1_Init+0x68>)
 800082c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_SPI1_Init+0x64>)
 8000830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000834:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_SPI1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_SPI1_Init+0x64>)
 8000850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000854:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_SPI1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_SPI1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_SPI1_Init+0x64>)
 8000870:	220a      	movs	r2, #10
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_SPI1_Init+0x64>)
 8000876:	f002 fbc7 	bl	8003008 <HAL_SPI_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000880:	f000 fa2e 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000404 	.word	0x20000404
 800088c:	40013000 	.word	0x40013000

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
 80008aa:	4b70      	ldr	r3, [pc, #448]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a6f      	ldr	r2, [pc, #444]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 80008b0:	f043 0310 	orr.w	r3, r3, #16
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b6d      	ldr	r3, [pc, #436]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0310 	and.w	r3, r3, #16
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	4b69      	ldr	r3, [pc, #420]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a68      	ldr	r2, [pc, #416]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b66      	ldr	r3, [pc, #408]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b62      	ldr	r3, [pc, #392]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a61      	ldr	r2, [pc, #388]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b5f      	ldr	r3, [pc, #380]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b5b      	ldr	r3, [pc, #364]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a5a      	ldr	r2, [pc, #360]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b58      	ldr	r3, [pc, #352]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b54      	ldr	r3, [pc, #336]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a53      	ldr	r2, [pc, #332]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b51      	ldr	r3, [pc, #324]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b4d      	ldr	r3, [pc, #308]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a4c      	ldr	r2, [pc, #304]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b4a      	ldr	r3, [pc, #296]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2108      	movs	r1, #8
 8000952:	4847      	ldr	r0, [pc, #284]	; (8000a70 <MX_GPIO_Init+0x1e0>)
 8000954:	f000 ff24 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2101      	movs	r1, #1
 800095c:	4845      	ldr	r0, [pc, #276]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 800095e:	f000 ff1f 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8000962:	2200      	movs	r2, #0
 8000964:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000968:	4843      	ldr	r0, [pc, #268]	; (8000a78 <MX_GPIO_Init+0x1e8>)
 800096a:	f000 ff19 	bl	80017a0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800096e:	2304      	movs	r3, #4
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	483b      	ldr	r0, [pc, #236]	; (8000a70 <MX_GPIO_Init+0x1e0>)
 8000982:	f000 fd89 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000986:	2308      	movs	r3, #8
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4834      	ldr	r0, [pc, #208]	; (8000a70 <MX_GPIO_Init+0x1e0>)
 800099e:	f000 fd7b 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80009a2:	2332      	movs	r3, #50	; 0x32
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	482e      	ldr	r0, [pc, #184]	; (8000a70 <MX_GPIO_Init+0x1e0>)
 80009b8:	f000 fd6e 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009bc:	2301      	movs	r3, #1
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4828      	ldr	r0, [pc, #160]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80009d4:	f000 fd60 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009d8:	2301      	movs	r3, #1
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009dc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4823      	ldr	r0, [pc, #140]	; (8000a7c <MX_GPIO_Init+0x1ec>)
 80009ee:	f000 fd53 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 80009f2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009f6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	481b      	ldr	r0, [pc, #108]	; (8000a78 <MX_GPIO_Init+0x1e8>)
 8000a0c:	f000 fd44 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4815      	ldr	r0, [pc, #84]	; (8000a7c <MX_GPIO_Init+0x1ec>)
 8000a26:	f000 fd37 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a2a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a3c:	230a      	movs	r3, #10
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	480d      	ldr	r0, [pc, #52]	; (8000a7c <MX_GPIO_Init+0x1ec>)
 8000a48:	f000 fd26 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a4c:	2320      	movs	r3, #32
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4806      	ldr	r0, [pc, #24]	; (8000a78 <MX_GPIO_Init+0x1e8>)
 8000a60:	f000 fd1a 	bl	8001498 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a64:	bf00      	nop
 8000a66:	3730      	adds	r7, #48	; 0x30
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40020800 	.word	0x40020800
 8000a78:	40020c00 	.word	0x40020c00
 8000a7c:	40020000 	.word	0x40020000

08000a80 <StartFlashGreenLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFlashGreenLedTask */
void StartFlashGreenLedTask(void const * argument)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  for(int i=0;i<=100;++i)//100*100 mSec = 10 seconds
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	e014      	b.n	8000ab8 <StartFlashGreenLedTask+0x38>
		  {
		  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_SET);//led on
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a94:	482b      	ldr	r0, [pc, #172]	; (8000b44 <StartFlashGreenLedTask+0xc4>)
 8000a96:	f000 fe83 	bl	80017a0 <HAL_GPIO_WritePin>
		  osDelay(50);//50mSec delay
 8000a9a:	2032      	movs	r0, #50	; 0x32
 8000a9c:	f002 fe1b 	bl	80036d6 <osDelay>
		  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_RESET);//led off
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa6:	4827      	ldr	r0, [pc, #156]	; (8000b44 <StartFlashGreenLedTask+0xc4>)
 8000aa8:	f000 fe7a 	bl	80017a0 <HAL_GPIO_WritePin>
		  osDelay(50);//50mSec delay
 8000aac:	2032      	movs	r0, #50	; 0x32
 8000aae:	f002 fe12 	bl	80036d6 <osDelay>
	  for(int i=0;i<=100;++i)//100*100 mSec = 10 seconds
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	2b64      	cmp	r3, #100	; 0x64
 8000abc:	dde7      	ble.n	8000a8e <StartFlashGreenLedTask+0xe>
		  }//nested for

	  Set_Flag(1);
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f000 f914 	bl	8000cec <Set_Flag>

	  for(int i=0;i<=10;++i)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	e016      	b.n	8000af8 <StartFlashGreenLedTask+0x78>
		  {
		  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_SET);//led on
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad0:	481c      	ldr	r0, [pc, #112]	; (8000b44 <StartFlashGreenLedTask+0xc4>)
 8000ad2:	f000 fe65 	bl	80017a0 <HAL_GPIO_WritePin>
		  osDelay(500);//half a second delay
 8000ad6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ada:	f002 fdfc 	bl	80036d6 <osDelay>
		  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_RESET);//led off
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae4:	4817      	ldr	r0, [pc, #92]	; (8000b44 <StartFlashGreenLedTask+0xc4>)
 8000ae6:	f000 fe5b 	bl	80017a0 <HAL_GPIO_WritePin>
		  osDelay(500);//half a second delay
 8000aea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aee:	f002 fdf2 	bl	80036d6 <osDelay>
	  for(int i=0;i<=10;++i)
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	3301      	adds	r3, #1
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	2b0a      	cmp	r3, #10
 8000afc:	dde5      	ble.n	8000aca <StartFlashGreenLedTask+0x4a>
		  }//nested for

	  Reset_Flag(1);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f000 f912 	bl	8000d28 <Reset_Flag>

	  for(int i=0;i<=100;++i)//100*100 mSec = 10 seconds
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	e014      	b.n	8000b34 <StartFlashGreenLedTask+0xb4>
		  {
		  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_SET);//led on
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <StartFlashGreenLedTask+0xc4>)
 8000b12:	f000 fe45 	bl	80017a0 <HAL_GPIO_WritePin>
		  osDelay(50);//50mSec delay
 8000b16:	2032      	movs	r0, #50	; 0x32
 8000b18:	f002 fddd 	bl	80036d6 <osDelay>
		  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_RESET);//led off
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b22:	4808      	ldr	r0, [pc, #32]	; (8000b44 <StartFlashGreenLedTask+0xc4>)
 8000b24:	f000 fe3c 	bl	80017a0 <HAL_GPIO_WritePin>
		  osDelay(50);//50mSec delay
 8000b28:	2032      	movs	r0, #50	; 0x32
 8000b2a:	f002 fdd4 	bl	80036d6 <osDelay>
	  for(int i=0;i<=100;++i)//100*100 mSec = 10 seconds
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3301      	adds	r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2b64      	cmp	r3, #100	; 0x64
 8000b38:	dde7      	ble.n	8000b0a <StartFlashGreenLedTask+0x8a>
		  }//nested for

	  vTaskSuspend(NULL);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f003 fc14 	bl	8004368 <vTaskSuspend>
	  for(int i=0;i<=100;++i)//100*100 mSec = 10 seconds
 8000b40:	e7a2      	b.n	8000a88 <StartFlashGreenLedTask+0x8>
 8000b42:	bf00      	nop
 8000b44:	40020c00 	.word	0x40020c00

08000b48 <StartFlashRedLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlashRedLedTask */
void StartFlashRedLedTask(void const * argument)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlashRedLedTask */
  /* Infinite loop */
  for(;;)
  {
	  for(int i=0;i<=150;++i)//150*100 mSec = 15 seconds
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	e014      	b.n	8000b80 <StartFlashRedLedTask+0x38>
		  {
		  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_SET);//led on
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b5c:	482b      	ldr	r0, [pc, #172]	; (8000c0c <StartFlashRedLedTask+0xc4>)
 8000b5e:	f000 fe1f 	bl	80017a0 <HAL_GPIO_WritePin>
		  osDelay(50);//50mSec delay
 8000b62:	2032      	movs	r0, #50	; 0x32
 8000b64:	f002 fdb7 	bl	80036d6 <osDelay>
		  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_RESET);//led off
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b6e:	4827      	ldr	r0, [pc, #156]	; (8000c0c <StartFlashRedLedTask+0xc4>)
 8000b70:	f000 fe16 	bl	80017a0 <HAL_GPIO_WritePin>
		  osDelay(50);//50mSec delay
 8000b74:	2032      	movs	r0, #50	; 0x32
 8000b76:	f002 fdae 	bl	80036d6 <osDelay>
	  for(int i=0;i<=150;++i)//150*100 mSec = 15 seconds
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	2b96      	cmp	r3, #150	; 0x96
 8000b84:	dde7      	ble.n	8000b56 <StartFlashRedLedTask+0xe>
		  }//nested for

	  Set_Flag(2);
 8000b86:	2002      	movs	r0, #2
 8000b88:	f000 f8b0 	bl	8000cec <Set_Flag>

	  for(int i=0;i<=10;++i)//1 Hz
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	e016      	b.n	8000bc0 <StartFlashRedLedTask+0x78>
	  {
		  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_SET);//led on
 8000b92:	2201      	movs	r2, #1
 8000b94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b98:	481c      	ldr	r0, [pc, #112]	; (8000c0c <StartFlashRedLedTask+0xc4>)
 8000b9a:	f000 fe01 	bl	80017a0 <HAL_GPIO_WritePin>
		  osDelay(500);//half a second delay
 8000b9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ba2:	f002 fd98 	bl	80036d6 <osDelay>
		  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_RESET);//led off
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bac:	4817      	ldr	r0, [pc, #92]	; (8000c0c <StartFlashRedLedTask+0xc4>)
 8000bae:	f000 fdf7 	bl	80017a0 <HAL_GPIO_WritePin>
		  osDelay(500);//half a second delay
 8000bb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bb6:	f002 fd8e 	bl	80036d6 <osDelay>
	  for(int i=0;i<=10;++i)//1 Hz
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	2b0a      	cmp	r3, #10
 8000bc4:	dde5      	ble.n	8000b92 <StartFlashRedLedTask+0x4a>
	  }//nested for

	  Reset_Flag(2);
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f000 f8ae 	bl	8000d28 <Reset_Flag>

	  for(int i=0;i<=50;++i)//50*100 mSec = 5 seconds
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e014      	b.n	8000bfc <StartFlashRedLedTask+0xb4>
	  {
		  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_SET);//led on
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <StartFlashRedLedTask+0xc4>)
 8000bda:	f000 fde1 	bl	80017a0 <HAL_GPIO_WritePin>
		  osDelay(50);//50mSec delay
 8000bde:	2032      	movs	r0, #50	; 0x32
 8000be0:	f002 fd79 	bl	80036d6 <osDelay>
		  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_RESET);//led off
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bea:	4808      	ldr	r0, [pc, #32]	; (8000c0c <StartFlashRedLedTask+0xc4>)
 8000bec:	f000 fdd8 	bl	80017a0 <HAL_GPIO_WritePin>
		  osDelay(50);//50mSec delay
 8000bf0:	2032      	movs	r0, #50	; 0x32
 8000bf2:	f002 fd70 	bl	80036d6 <osDelay>
	  for(int i=0;i<=50;++i)//50*100 mSec = 5 seconds
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b32      	cmp	r3, #50	; 0x32
 8000c00:	dde7      	ble.n	8000bd2 <StartFlashRedLedTask+0x8a>
	  }//nested for

	  vTaskSuspend(NULL);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f003 fbb0 	bl	8004368 <vTaskSuspend>
	  for(int i=0;i<=150;++i)//150*100 mSec = 15 seconds
 8000c08:	e7a2      	b.n	8000b50 <StartFlashRedLedTask+0x8>
 8000c0a:	bf00      	nop
 8000c0c:	40020c00 	.word	0x40020c00

08000c10 <StartFlashBlueLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlashBlueLedTask */
void StartFlashBlueLedTask(void const * argument)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlashBlueLedTask */
  /* Infinite loop */
  for(;;)
  {
	  if( (Check_Flag(1)==Reset) | (Check_Flag(2)==Reset) ){
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f000 f8a3 	bl	8000d64 <Check_Flag>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	bf0c      	ite	eq
 8000c24:	2301      	moveq	r3, #1
 8000c26:	2300      	movne	r3, #0
 8000c28:	b2dc      	uxtb	r4, r3
 8000c2a:	2002      	movs	r0, #2
 8000c2c:	f000 f89a 	bl	8000d64 <Check_Flag>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	bf0c      	ite	eq
 8000c36:	2301      	moveq	r3, #1
 8000c38:	2300      	movne	r3, #0
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	4323      	orrs	r3, r4
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d00f      	beq.n	8000c64 <StartFlashBlueLedTask+0x54>
		  HAL_GPIO_TogglePin(GPIOD, LED_BLUE_Pin);
 8000c44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c48:	481b      	ldr	r0, [pc, #108]	; (8000cb8 <StartFlashBlueLedTask+0xa8>)
 8000c4a:	f000 fdc2 	bl	80017d2 <HAL_GPIO_TogglePin>
		  osDelay(50);//50mSec delay
 8000c4e:	2032      	movs	r0, #50	; 0x32
 8000c50:	f002 fd41 	bl	80036d6 <osDelay>
		  HAL_GPIO_TogglePin(GPIOD, LED_BLUE_Pin);
 8000c54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c58:	4817      	ldr	r0, [pc, #92]	; (8000cb8 <StartFlashBlueLedTask+0xa8>)
 8000c5a:	f000 fdba 	bl	80017d2 <HAL_GPIO_TogglePin>
		  osDelay(50);//50mSec delay
 8000c5e:	2032      	movs	r0, #50	; 0x32
 8000c60:	f002 fd39 	bl	80036d6 <osDelay>
		  }

	  if( (Check_Flag(1)==Set) & (Check_Flag(2)==Set) ){
 8000c64:	2001      	movs	r0, #1
 8000c66:	f000 f87d 	bl	8000d64 <Check_Flag>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	bf0c      	ite	eq
 8000c70:	2301      	moveq	r3, #1
 8000c72:	2300      	movne	r3, #0
 8000c74:	b2dc      	uxtb	r4, r3
 8000c76:	2002      	movs	r0, #2
 8000c78:	f000 f874 	bl	8000d64 <Check_Flag>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	bf0c      	ite	eq
 8000c82:	2301      	moveq	r3, #1
 8000c84:	2300      	movne	r3, #0
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	4023      	ands	r3, r4
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0c3      	beq.n	8000c18 <StartFlashBlueLedTask+0x8>
		  HAL_GPIO_TogglePin(GPIOD, LED_BLUE_Pin);
 8000c90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c94:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <StartFlashBlueLedTask+0xa8>)
 8000c96:	f000 fd9c 	bl	80017d2 <HAL_GPIO_TogglePin>
		  osDelay(500);//50mSec delay
 8000c9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c9e:	f002 fd1a 	bl	80036d6 <osDelay>
		  HAL_GPIO_TogglePin(GPIOD, LED_BLUE_Pin);
 8000ca2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ca6:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <StartFlashBlueLedTask+0xa8>)
 8000ca8:	f000 fd93 	bl	80017d2 <HAL_GPIO_TogglePin>
		  osDelay(500);//50mSec delay
 8000cac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cb0:	f002 fd11 	bl	80036d6 <osDelay>
	  if( (Check_Flag(1)==Reset) | (Check_Flag(2)==Reset) ){
 8000cb4:	e7b0      	b.n	8000c18 <StartFlashBlueLedTask+0x8>
 8000cb6:	bf00      	nop
 8000cb8:	40020c00 	.word	0x40020c00

08000cbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d101      	bne.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cce:	f000 fae1 	bl	8001294 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40010000 	.word	0x40010000

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <Set_Flag>:

Flag SFlag1 = Reset;
Flag SFlag2 = Reset;

void Set_Flag (int flag_num)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	switch(flag_num)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d003      	beq.n	8000d02 <Set_Flag+0x16>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d004      	beq.n	8000d0a <Set_Flag+0x1e>
	case 1 : SFlag1 = Set;
	break;
	case 2 : SFlag2 = Set;
	break;
	}
	return;
 8000d00:	e008      	b.n	8000d14 <Set_Flag+0x28>
	case 1 : SFlag1 = Set;
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <Set_Flag+0x34>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
	break;
 8000d08:	e003      	b.n	8000d12 <Set_Flag+0x26>
	case 2 : SFlag2 = Set;
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <Set_Flag+0x38>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
	break;
 8000d10:	bf00      	nop
	return;
 8000d12:	bf00      	nop
}
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000001 	.word	0x20000001

08000d28 <Reset_Flag>:

void Reset_Flag (int flag_num)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	switch(flag_num)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d003      	beq.n	8000d3e <Reset_Flag+0x16>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d004      	beq.n	8000d46 <Reset_Flag+0x1e>
	case 1 : SFlag1 = Reset;
	break;
	case 2 : SFlag2 = Reset;
	break;
	}
	return;
 8000d3c:	e008      	b.n	8000d50 <Reset_Flag+0x28>
	case 1 : SFlag1 = Reset;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <Reset_Flag+0x34>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
	break;
 8000d44:	e003      	b.n	8000d4e <Reset_Flag+0x26>
	case 2 : SFlag2 = Reset;
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <Reset_Flag+0x38>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
	break;
 8000d4c:	bf00      	nop
	return;
 8000d4e:	bf00      	nop
}
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000001 	.word	0x20000001

08000d64 <Check_Flag>:

Flag Check_Flag(int flag_num)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	Flag temp;
	switch(flag_num)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d003      	beq.n	8000d7a <Check_Flag+0x16>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d004      	beq.n	8000d82 <Check_Flag+0x1e>
 8000d78:	e007      	b.n	8000d8a <Check_Flag+0x26>
	{
	case 1 :  temp = SFlag1;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <Check_Flag+0x34>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	73fb      	strb	r3, [r7, #15]
	break;
 8000d80:	e003      	b.n	8000d8a <Check_Flag+0x26>
	case 2 :  temp = SFlag2;
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <Check_Flag+0x38>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	73fb      	strb	r3, [r7, #15]
	break;
 8000d88:	bf00      	nop
	}
	return temp;
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	20000001 	.word	0x20000001

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_MspInit+0x54>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a11      	ldr	r2, [pc, #68]	; (8000df4 <HAL_MspInit+0x54>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_MspInit+0x54>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_MspInit+0x54>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <HAL_MspInit+0x54>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_MspInit+0x54>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	210f      	movs	r1, #15
 8000de2:	f06f 0001 	mvn.w	r0, #1
 8000de6:	f000 fb2d 	bl	8001444 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800

08000df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a19      	ldr	r2, [pc, #100]	; (8000e7c <HAL_I2C_MspInit+0x84>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d12c      	bne.n	8000e74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <HAL_I2C_MspInit+0x88>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <HAL_I2C_MspInit+0x88>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_I2C_MspInit+0x88>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e36:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3c:	2312      	movs	r3, #18
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	480c      	ldr	r0, [pc, #48]	; (8000e84 <HAL_I2C_MspInit+0x8c>)
 8000e54:	f000 fb20 	bl	8001498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_I2C_MspInit+0x88>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_I2C_MspInit+0x88>)
 8000e62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e66:	6413      	str	r3, [r2, #64]	; 0x40
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_I2C_MspInit+0x88>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e74:	bf00      	nop
 8000e76:	3728      	adds	r7, #40	; 0x28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40005400 	.word	0x40005400
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020400 	.word	0x40020400

08000e88 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08e      	sub	sp, #56	; 0x38
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a59      	ldr	r2, [pc, #356]	; (800100c <HAL_I2S_MspInit+0x184>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d15b      	bne.n	8000f62 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
 8000eae:	4b58      	ldr	r3, [pc, #352]	; (8001010 <HAL_I2S_MspInit+0x188>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a57      	ldr	r2, [pc, #348]	; (8001010 <HAL_I2S_MspInit+0x188>)
 8000eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b55      	ldr	r3, [pc, #340]	; (8001010 <HAL_I2S_MspInit+0x188>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec2:	623b      	str	r3, [r7, #32]
 8000ec4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
 8000eca:	4b51      	ldr	r3, [pc, #324]	; (8001010 <HAL_I2S_MspInit+0x188>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a50      	ldr	r2, [pc, #320]	; (8001010 <HAL_I2S_MspInit+0x188>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b4e      	ldr	r3, [pc, #312]	; (8001010 <HAL_I2S_MspInit+0x188>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	61fb      	str	r3, [r7, #28]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
 8000ee6:	4b4a      	ldr	r3, [pc, #296]	; (8001010 <HAL_I2S_MspInit+0x188>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a49      	ldr	r2, [pc, #292]	; (8001010 <HAL_I2S_MspInit+0x188>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b47      	ldr	r3, [pc, #284]	; (8001010 <HAL_I2S_MspInit+0x188>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000efe:	2304      	movs	r3, #4
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000f0e:	2306      	movs	r3, #6
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f16:	4619      	mov	r1, r3
 8000f18:	483e      	ldr	r0, [pc, #248]	; (8001014 <HAL_I2S_MspInit+0x18c>)
 8000f1a:	f000 fabd 	bl	8001498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f1e:	2308      	movs	r3, #8
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f2e:	2305      	movs	r3, #5
 8000f30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f36:	4619      	mov	r1, r3
 8000f38:	4836      	ldr	r0, [pc, #216]	; (8001014 <HAL_I2S_MspInit+0x18c>)
 8000f3a:	f000 faad 	bl	8001498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000f3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f50:	2305      	movs	r3, #5
 8000f52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	4619      	mov	r1, r3
 8000f5a:	482f      	ldr	r0, [pc, #188]	; (8001018 <HAL_I2S_MspInit+0x190>)
 8000f5c:	f000 fa9c 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f60:	e04f      	b.n	8001002 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a2d      	ldr	r2, [pc, #180]	; (800101c <HAL_I2S_MspInit+0x194>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d14a      	bne.n	8001002 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <HAL_I2S_MspInit+0x188>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	4a26      	ldr	r2, [pc, #152]	; (8001010 <HAL_I2S_MspInit+0x188>)
 8000f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7c:	4b24      	ldr	r3, [pc, #144]	; (8001010 <HAL_I2S_MspInit+0x188>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	4b20      	ldr	r3, [pc, #128]	; (8001010 <HAL_I2S_MspInit+0x188>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	4a1f      	ldr	r2, [pc, #124]	; (8001010 <HAL_I2S_MspInit+0x188>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6313      	str	r3, [r2, #48]	; 0x30
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <HAL_I2S_MspInit+0x188>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_I2S_MspInit+0x188>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	4a18      	ldr	r2, [pc, #96]	; (8001010 <HAL_I2S_MspInit+0x188>)
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <HAL_I2S_MspInit+0x188>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fd0:	2306      	movs	r3, #6
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4811      	ldr	r0, [pc, #68]	; (8001020 <HAL_I2S_MspInit+0x198>)
 8000fdc:	f000 fa5c 	bl	8001498 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000fe0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ff2:	2306      	movs	r3, #6
 8000ff4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	; (8001014 <HAL_I2S_MspInit+0x18c>)
 8000ffe:	f000 fa4b 	bl	8001498 <HAL_GPIO_Init>
}
 8001002:	bf00      	nop
 8001004:	3738      	adds	r7, #56	; 0x38
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40003800 	.word	0x40003800
 8001010:	40023800 	.word	0x40023800
 8001014:	40020800 	.word	0x40020800
 8001018:	40020400 	.word	0x40020400
 800101c:	40003c00 	.word	0x40003c00
 8001020:	40020000 	.word	0x40020000

08001024 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a19      	ldr	r2, [pc, #100]	; (80010a8 <HAL_SPI_MspInit+0x84>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d12b      	bne.n	800109e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_SPI_MspInit+0x88>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	4a17      	ldr	r2, [pc, #92]	; (80010ac <HAL_SPI_MspInit+0x88>)
 8001050:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001054:	6453      	str	r3, [r2, #68]	; 0x44
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_SPI_MspInit+0x88>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_SPI_MspInit+0x88>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a10      	ldr	r2, [pc, #64]	; (80010ac <HAL_SPI_MspInit+0x88>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <HAL_SPI_MspInit+0x88>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800107e:	23e0      	movs	r3, #224	; 0xe0
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800108e:	2305      	movs	r3, #5
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <HAL_SPI_MspInit+0x8c>)
 800109a:	f000 f9fd 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	; 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40013000 	.word	0x40013000
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020000 	.word	0x40020000

080010b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80010bc:	2300      	movs	r3, #0
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <HAL_InitTick+0xd0>)
 80010ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010cc:	4a2d      	ldr	r2, [pc, #180]	; (8001184 <HAL_InitTick+0xd0>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6453      	str	r3, [r2, #68]	; 0x44
 80010d4:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <HAL_InitTick+0xd0>)
 80010d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010e0:	f107 020c 	add.w	r2, r7, #12
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 fe08 	bl	8002d00 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010f0:	f001 fdf2 	bl	8002cd8 <HAL_RCC_GetPCLK2Freq>
 80010f4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f8:	4a23      	ldr	r2, [pc, #140]	; (8001188 <HAL_InitTick+0xd4>)
 80010fa:	fba2 2303 	umull	r2, r3, r2, r3
 80010fe:	0c9b      	lsrs	r3, r3, #18
 8001100:	3b01      	subs	r3, #1
 8001102:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001104:	4b21      	ldr	r3, [pc, #132]	; (800118c <HAL_InitTick+0xd8>)
 8001106:	4a22      	ldr	r2, [pc, #136]	; (8001190 <HAL_InitTick+0xdc>)
 8001108:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800110a:	4b20      	ldr	r3, [pc, #128]	; (800118c <HAL_InitTick+0xd8>)
 800110c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001110:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001112:	4a1e      	ldr	r2, [pc, #120]	; (800118c <HAL_InitTick+0xd8>)
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <HAL_InitTick+0xd8>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <HAL_InitTick+0xd8>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_InitTick+0xd8>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800112a:	4818      	ldr	r0, [pc, #96]	; (800118c <HAL_InitTick+0xd8>)
 800112c:	f001 fff5 	bl	800311a <HAL_TIM_Base_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800113a:	2b00      	cmp	r3, #0
 800113c:	d11b      	bne.n	8001176 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800113e:	4813      	ldr	r0, [pc, #76]	; (800118c <HAL_InitTick+0xd8>)
 8001140:	f002 f844 	bl	80031cc <HAL_TIM_Base_Start_IT>
 8001144:	4603      	mov	r3, r0
 8001146:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800114a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800114e:	2b00      	cmp	r3, #0
 8001150:	d111      	bne.n	8001176 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001152:	2019      	movs	r0, #25
 8001154:	f000 f992 	bl	800147c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b0f      	cmp	r3, #15
 800115c:	d808      	bhi.n	8001170 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800115e:	2200      	movs	r2, #0
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	2019      	movs	r0, #25
 8001164:	f000 f96e 	bl	8001444 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001168:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_InitTick+0xe0>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e002      	b.n	8001176 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001176:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800117a:	4618      	mov	r0, r3
 800117c:	3730      	adds	r7, #48	; 0x30
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	431bde83 	.word	0x431bde83
 800118c:	20000470 	.word	0x20000470
 8001190:	40010000 	.word	0x40010000
 8001194:	20000008 	.word	0x20000008

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800119c:	e7fe      	b.n	800119c <NMI_Handler+0x4>

0800119e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80011ca:	f002 f861 	bl	8003290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000470 	.word	0x20000470

080011d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <SystemInit+0x20>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <SystemInit+0x20>)
 80011e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001234 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001200:	f7ff ffea 	bl	80011d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001206:	490d      	ldr	r1, [pc, #52]	; (800123c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800121c:	4c0a      	ldr	r4, [pc, #40]	; (8001248 <LoopFillZerobss+0x22>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122a:	f004 faa5 	bl	8005778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122e:	f7ff f96f 	bl	8000510 <main>
  bx  lr    
 8001232:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001234:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001240:	08005958 	.word	0x08005958
  ldr r2, =_sbss
 8001244:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001248:	20004350 	.word	0x20004350

0800124c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_Init+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0d      	ldr	r2, [pc, #52]	; (8001290 <HAL_Init+0x40>)
 800125a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_Init+0x40>)
 8001266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_Init+0x40>)
 8001272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001278:	2003      	movs	r0, #3
 800127a:	f000 f8d8 	bl	800142e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127e:	200f      	movs	r0, #15
 8001280:	f7ff ff18 	bl	80010b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001284:	f7ff fd8c 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023c00 	.word	0x40023c00

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	2000000c 	.word	0x2000000c
 80012b8:	200004b8 	.word	0x200004b8

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200004b8 	.word	0x200004b8

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	4907      	ldr	r1, [pc, #28]	; (8001370 <__NVIC_EnableIRQ+0x38>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	4313      	orrs	r3, r2
         );
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff4c 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001456:	f7ff ff61 	bl	800131c <__NVIC_GetPriorityGrouping>
 800145a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	68b9      	ldr	r1, [r7, #8]
 8001460:	6978      	ldr	r0, [r7, #20]
 8001462:	f7ff ffb1 	bl	80013c8 <NVIC_EncodePriority>
 8001466:	4602      	mov	r2, r0
 8001468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff80 	bl	8001374 <__NVIC_SetPriority>
}
 8001474:	bf00      	nop
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff54 	bl	8001338 <__NVIC_EnableIRQ>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	e159      	b.n	8001768 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014b4:	2201      	movs	r2, #1
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	f040 8148 	bne.w	8001762 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d005      	beq.n	80014ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d130      	bne.n	800154c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001520:	2201      	movs	r2, #1
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 0201 	and.w	r2, r3, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b03      	cmp	r3, #3
 8001556:	d017      	beq.n	8001588 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2203      	movs	r2, #3
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d123      	bne.n	80015dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	08da      	lsrs	r2, r3, #3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3208      	adds	r2, #8
 800159c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	220f      	movs	r2, #15
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	691a      	ldr	r2, [r3, #16]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	08da      	lsrs	r2, r3, #3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3208      	adds	r2, #8
 80015d6:	69b9      	ldr	r1, [r7, #24]
 80015d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0203 	and.w	r2, r3, #3
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80a2 	beq.w	8001762 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b57      	ldr	r3, [pc, #348]	; (8001780 <HAL_GPIO_Init+0x2e8>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a56      	ldr	r2, [pc, #344]	; (8001780 <HAL_GPIO_Init+0x2e8>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b54      	ldr	r3, [pc, #336]	; (8001780 <HAL_GPIO_Init+0x2e8>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800163a:	4a52      	ldr	r2, [pc, #328]	; (8001784 <HAL_GPIO_Init+0x2ec>)
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	220f      	movs	r2, #15
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a49      	ldr	r2, [pc, #292]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d019      	beq.n	800169a <HAL_GPIO_Init+0x202>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a48      	ldr	r2, [pc, #288]	; (800178c <HAL_GPIO_Init+0x2f4>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d013      	beq.n	8001696 <HAL_GPIO_Init+0x1fe>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a47      	ldr	r2, [pc, #284]	; (8001790 <HAL_GPIO_Init+0x2f8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d00d      	beq.n	8001692 <HAL_GPIO_Init+0x1fa>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a46      	ldr	r2, [pc, #280]	; (8001794 <HAL_GPIO_Init+0x2fc>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d007      	beq.n	800168e <HAL_GPIO_Init+0x1f6>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a45      	ldr	r2, [pc, #276]	; (8001798 <HAL_GPIO_Init+0x300>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d101      	bne.n	800168a <HAL_GPIO_Init+0x1f2>
 8001686:	2304      	movs	r3, #4
 8001688:	e008      	b.n	800169c <HAL_GPIO_Init+0x204>
 800168a:	2307      	movs	r3, #7
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x204>
 800168e:	2303      	movs	r3, #3
 8001690:	e004      	b.n	800169c <HAL_GPIO_Init+0x204>
 8001692:	2302      	movs	r3, #2
 8001694:	e002      	b.n	800169c <HAL_GPIO_Init+0x204>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_GPIO_Init+0x204>
 800169a:	2300      	movs	r3, #0
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	f002 0203 	and.w	r2, r2, #3
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	4093      	lsls	r3, r2
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ac:	4935      	ldr	r1, [pc, #212]	; (8001784 <HAL_GPIO_Init+0x2ec>)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	089b      	lsrs	r3, r3, #2
 80016b2:	3302      	adds	r3, #2
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ba:	4b38      	ldr	r3, [pc, #224]	; (800179c <HAL_GPIO_Init+0x304>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016de:	4a2f      	ldr	r2, [pc, #188]	; (800179c <HAL_GPIO_Init+0x304>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_GPIO_Init+0x304>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001708:	4a24      	ldr	r2, [pc, #144]	; (800179c <HAL_GPIO_Init+0x304>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800170e:	4b23      	ldr	r3, [pc, #140]	; (800179c <HAL_GPIO_Init+0x304>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001732:	4a1a      	ldr	r2, [pc, #104]	; (800179c <HAL_GPIO_Init+0x304>)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001738:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_GPIO_Init+0x304>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800175c:	4a0f      	ldr	r2, [pc, #60]	; (800179c <HAL_GPIO_Init+0x304>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3301      	adds	r3, #1
 8001766:	61fb      	str	r3, [r7, #28]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	2b0f      	cmp	r3, #15
 800176c:	f67f aea2 	bls.w	80014b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3724      	adds	r7, #36	; 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40013800 	.word	0x40013800
 8001788:	40020000 	.word	0x40020000
 800178c:	40020400 	.word	0x40020400
 8001790:	40020800 	.word	0x40020800
 8001794:	40020c00 	.word	0x40020c00
 8001798:	40021000 	.word	0x40021000
 800179c:	40013c00 	.word	0x40013c00

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017bc:	e003      	b.n	80017c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	041a      	lsls	r2, r3, #16
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	619a      	str	r2, [r3, #24]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017e4:	887a      	ldrh	r2, [r7, #2]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4013      	ands	r3, r2
 80017ea:	041a      	lsls	r2, r3, #16
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	400b      	ands	r3, r1
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	619a      	str	r2, [r3, #24]
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e12b      	b.n	8001a72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d106      	bne.n	8001834 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fae2 	bl	8000df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2224      	movs	r2, #36	; 0x24
 8001838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0201 	bic.w	r2, r2, #1
 800184a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800185a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800186a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800186c:	f001 fa20 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 8001870:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4a81      	ldr	r2, [pc, #516]	; (8001a7c <HAL_I2C_Init+0x274>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d807      	bhi.n	800188c <HAL_I2C_Init+0x84>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4a80      	ldr	r2, [pc, #512]	; (8001a80 <HAL_I2C_Init+0x278>)
 8001880:	4293      	cmp	r3, r2
 8001882:	bf94      	ite	ls
 8001884:	2301      	movls	r3, #1
 8001886:	2300      	movhi	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	e006      	b.n	800189a <HAL_I2C_Init+0x92>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4a7d      	ldr	r2, [pc, #500]	; (8001a84 <HAL_I2C_Init+0x27c>)
 8001890:	4293      	cmp	r3, r2
 8001892:	bf94      	ite	ls
 8001894:	2301      	movls	r3, #1
 8001896:	2300      	movhi	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e0e7      	b.n	8001a72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4a78      	ldr	r2, [pc, #480]	; (8001a88 <HAL_I2C_Init+0x280>)
 80018a6:	fba2 2303 	umull	r2, r3, r2, r3
 80018aa:	0c9b      	lsrs	r3, r3, #18
 80018ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	430a      	orrs	r2, r1
 80018c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	4a6a      	ldr	r2, [pc, #424]	; (8001a7c <HAL_I2C_Init+0x274>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d802      	bhi.n	80018dc <HAL_I2C_Init+0xd4>
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	3301      	adds	r3, #1
 80018da:	e009      	b.n	80018f0 <HAL_I2C_Init+0xe8>
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018e2:	fb02 f303 	mul.w	r3, r2, r3
 80018e6:	4a69      	ldr	r2, [pc, #420]	; (8001a8c <HAL_I2C_Init+0x284>)
 80018e8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ec:	099b      	lsrs	r3, r3, #6
 80018ee:	3301      	adds	r3, #1
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	430b      	orrs	r3, r1
 80018f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001902:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	495c      	ldr	r1, [pc, #368]	; (8001a7c <HAL_I2C_Init+0x274>)
 800190c:	428b      	cmp	r3, r1
 800190e:	d819      	bhi.n	8001944 <HAL_I2C_Init+0x13c>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	1e59      	subs	r1, r3, #1
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	fbb1 f3f3 	udiv	r3, r1, r3
 800191e:	1c59      	adds	r1, r3, #1
 8001920:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001924:	400b      	ands	r3, r1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00a      	beq.n	8001940 <HAL_I2C_Init+0x138>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1e59      	subs	r1, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	fbb1 f3f3 	udiv	r3, r1, r3
 8001938:	3301      	adds	r3, #1
 800193a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193e:	e051      	b.n	80019e4 <HAL_I2C_Init+0x1dc>
 8001940:	2304      	movs	r3, #4
 8001942:	e04f      	b.n	80019e4 <HAL_I2C_Init+0x1dc>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d111      	bne.n	8001970 <HAL_I2C_Init+0x168>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	1e58      	subs	r0, r3, #1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6859      	ldr	r1, [r3, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	440b      	add	r3, r1
 800195a:	fbb0 f3f3 	udiv	r3, r0, r3
 800195e:	3301      	adds	r3, #1
 8001960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001964:	2b00      	cmp	r3, #0
 8001966:	bf0c      	ite	eq
 8001968:	2301      	moveq	r3, #1
 800196a:	2300      	movne	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	e012      	b.n	8001996 <HAL_I2C_Init+0x18e>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1e58      	subs	r0, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6859      	ldr	r1, [r3, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	0099      	lsls	r1, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	fbb0 f3f3 	udiv	r3, r0, r3
 8001986:	3301      	adds	r3, #1
 8001988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198c:	2b00      	cmp	r3, #0
 800198e:	bf0c      	ite	eq
 8001990:	2301      	moveq	r3, #1
 8001992:	2300      	movne	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_I2C_Init+0x196>
 800199a:	2301      	movs	r3, #1
 800199c:	e022      	b.n	80019e4 <HAL_I2C_Init+0x1dc>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10e      	bne.n	80019c4 <HAL_I2C_Init+0x1bc>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1e58      	subs	r0, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6859      	ldr	r1, [r3, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	440b      	add	r3, r1
 80019b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b8:	3301      	adds	r3, #1
 80019ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c2:	e00f      	b.n	80019e4 <HAL_I2C_Init+0x1dc>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1e58      	subs	r0, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	0099      	lsls	r1, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019da:	3301      	adds	r3, #1
 80019dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	6809      	ldr	r1, [r1, #0]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69da      	ldr	r2, [r3, #28]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6911      	ldr	r1, [r2, #16]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68d2      	ldr	r2, [r2, #12]
 8001a1e:	4311      	orrs	r1, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	430b      	orrs	r3, r1
 8001a26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695a      	ldr	r2, [r3, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0201 	orr.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	000186a0 	.word	0x000186a0
 8001a80:	001e847f 	.word	0x001e847f
 8001a84:	003d08ff 	.word	0x003d08ff
 8001a88:	431bde83 	.word	0x431bde83
 8001a8c:	10624dd3 	.word	0x10624dd3

08001a90 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e128      	b.n	8001cf4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d109      	bne.n	8001ac2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a90      	ldr	r2, [pc, #576]	; (8001cfc <HAL_I2S_Init+0x26c>)
 8001aba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff f9e3 	bl	8000e88 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ad8:	f023 030f 	bic.w	r3, r3, #15
 8001adc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d060      	beq.n	8001bb0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d102      	bne.n	8001afc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001af6:	2310      	movs	r3, #16
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	e001      	b.n	8001b00 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001afc:	2320      	movs	r3, #32
 8001afe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b20      	cmp	r3, #32
 8001b06:	d802      	bhi.n	8001b0e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f001 fa18 	bl	8002f44 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b14:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b1e:	d125      	bne.n	8001b6c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d010      	beq.n	8001b4a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b44:	3305      	adds	r3, #5
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	e01f      	b.n	8001b8a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b66:	3305      	adds	r3, #5
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	e00e      	b.n	8001b8a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b86:	3305      	adds	r3, #5
 8001b88:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4a5c      	ldr	r2, [pc, #368]	; (8001d00 <HAL_I2S_Init+0x270>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	08db      	lsrs	r3, r3, #3
 8001b94:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	085b      	lsrs	r3, r3, #1
 8001ba6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	61bb      	str	r3, [r7, #24]
 8001bae:	e003      	b.n	8001bb8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d902      	bls.n	8001bc4 <HAL_I2S_Init+0x134>
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	2bff      	cmp	r3, #255	; 0xff
 8001bc2:	d907      	bls.n	8001bd4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	f043 0210 	orr.w	r2, r3, #16
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e08f      	b.n	8001cf4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691a      	ldr	r2, [r3, #16]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	ea42 0103 	orr.w	r1, r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001bf2:	f023 030f 	bic.w	r3, r3, #15
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6851      	ldr	r1, [r2, #4]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6892      	ldr	r2, [r2, #8]
 8001bfe:	4311      	orrs	r1, r2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	68d2      	ldr	r2, [r2, #12]
 8001c04:	4311      	orrs	r1, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6992      	ldr	r2, [r2, #24]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c16:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d161      	bne.n	8001ce4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a38      	ldr	r2, [pc, #224]	; (8001d04 <HAL_I2S_Init+0x274>)
 8001c24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a37      	ldr	r2, [pc, #220]	; (8001d08 <HAL_I2S_Init+0x278>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d101      	bne.n	8001c34 <HAL_I2S_Init+0x1a4>
 8001c30:	4b36      	ldr	r3, [pc, #216]	; (8001d0c <HAL_I2S_Init+0x27c>)
 8001c32:	e001      	b.n	8001c38 <HAL_I2S_Init+0x1a8>
 8001c34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	4932      	ldr	r1, [pc, #200]	; (8001d08 <HAL_I2S_Init+0x278>)
 8001c40:	428a      	cmp	r2, r1
 8001c42:	d101      	bne.n	8001c48 <HAL_I2S_Init+0x1b8>
 8001c44:	4a31      	ldr	r2, [pc, #196]	; (8001d0c <HAL_I2S_Init+0x27c>)
 8001c46:	e001      	b.n	8001c4c <HAL_I2S_Init+0x1bc>
 8001c48:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001c4c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001c50:	f023 030f 	bic.w	r3, r3, #15
 8001c54:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a2b      	ldr	r2, [pc, #172]	; (8001d08 <HAL_I2S_Init+0x278>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_I2S_Init+0x1d4>
 8001c60:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <HAL_I2S_Init+0x27c>)
 8001c62:	e001      	b.n	8001c68 <HAL_I2S_Init+0x1d8>
 8001c64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c68:	2202      	movs	r2, #2
 8001c6a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a25      	ldr	r2, [pc, #148]	; (8001d08 <HAL_I2S_Init+0x278>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d101      	bne.n	8001c7a <HAL_I2S_Init+0x1ea>
 8001c76:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <HAL_I2S_Init+0x27c>)
 8001c78:	e001      	b.n	8001c7e <HAL_I2S_Init+0x1ee>
 8001c7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c8a:	d003      	beq.n	8001c94 <HAL_I2S_Init+0x204>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d103      	bne.n	8001c9c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	e001      	b.n	8001ca0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001caa:	4313      	orrs	r3, r2
 8001cac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	897b      	ldrh	r3, [r7, #10]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ccc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <HAL_I2S_Init+0x278>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d101      	bne.n	8001cdc <HAL_I2S_Init+0x24c>
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <HAL_I2S_Init+0x27c>)
 8001cda:	e001      	b.n	8001ce0 <HAL_I2S_Init+0x250>
 8001cdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ce0:	897a      	ldrh	r2, [r7, #10]
 8001ce2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	08001e07 	.word	0x08001e07
 8001d00:	cccccccd 	.word	0xcccccccd
 8001d04:	08001f1d 	.word	0x08001f1d
 8001d08:	40003800 	.word	0x40003800
 8001d0c:	40003400 	.word	0x40003400

08001d10 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	881a      	ldrh	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	1c9a      	adds	r2, r3, #2
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10e      	bne.n	8001da0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d90:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ffb8 	bl	8001d10 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	b292      	uxth	r2, r2
 8001dbc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	1c9a      	adds	r2, r3, #2
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10e      	bne.n	8001dfe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff93 	bl	8001d24 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d13a      	bne.n	8001e98 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d109      	bne.n	8001e40 <I2S_IRQHandler+0x3a>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e36:	2b40      	cmp	r3, #64	; 0x40
 8001e38:	d102      	bne.n	8001e40 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ffb4 	bl	8001da8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e46:	2b40      	cmp	r3, #64	; 0x40
 8001e48:	d126      	bne.n	8001e98 <I2S_IRQHandler+0x92>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0320 	and.w	r3, r3, #32
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	d11f      	bne.n	8001e98 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e66:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e68:	2300      	movs	r3, #0
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	f043 0202 	orr.w	r2, r3, #2
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ff50 	bl	8001d38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d136      	bne.n	8001f12 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d109      	bne.n	8001ec2 <I2S_IRQHandler+0xbc>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb8:	2b80      	cmp	r3, #128	; 0x80
 8001eba:	d102      	bne.n	8001ec2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff45 	bl	8001d4c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d122      	bne.n	8001f12 <I2S_IRQHandler+0x10c>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d11b      	bne.n	8001f12 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ee8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	f043 0204 	orr.w	r2, r3, #4
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff13 	bl	8001d38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f12:	bf00      	nop
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a92      	ldr	r2, [pc, #584]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001f36:	4b92      	ldr	r3, [pc, #584]	; (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f38:	e001      	b.n	8001f3e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001f3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a8b      	ldr	r2, [pc, #556]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d101      	bne.n	8001f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001f54:	4b8a      	ldr	r3, [pc, #552]	; (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f56:	e001      	b.n	8001f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001f58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f68:	d004      	beq.n	8001f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 8099 	bne.w	80020a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d107      	bne.n	8001f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d002      	beq.n	8001f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f925 	bl	80021d8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d107      	bne.n	8001fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f9c8 	bl	8002338 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fae:	2b40      	cmp	r3, #64	; 0x40
 8001fb0:	d13a      	bne.n	8002028 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d035      	beq.n	8002028 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a6e      	ldr	r2, [pc, #440]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001fc6:	4b6e      	ldr	r3, [pc, #440]	; (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fc8:	e001      	b.n	8001fce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001fca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4969      	ldr	r1, [pc, #420]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fd6:	428b      	cmp	r3, r1
 8001fd8:	d101      	bne.n	8001fde <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001fda:	4b69      	ldr	r3, [pc, #420]	; (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fdc:	e001      	b.n	8001fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001fde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fe2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fe6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ff6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f043 0202 	orr.w	r2, r3, #2
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff fe88 	bl	8001d38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b08      	cmp	r3, #8
 8002030:	f040 80c3 	bne.w	80021ba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f003 0320 	and.w	r3, r3, #32
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 80bd 	beq.w	80021ba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800204e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a49      	ldr	r2, [pc, #292]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d101      	bne.n	800205e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800205a:	4b49      	ldr	r3, [pc, #292]	; (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800205c:	e001      	b.n	8002062 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800205e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4944      	ldr	r1, [pc, #272]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800206a:	428b      	cmp	r3, r1
 800206c:	d101      	bne.n	8002072 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800206e:	4b44      	ldr	r3, [pc, #272]	; (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002070:	e001      	b.n	8002076 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002072:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002076:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800207a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800207c:	2300      	movs	r3, #0
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f043 0204 	orr.w	r2, r3, #4
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff fe4a 	bl	8001d38 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020a4:	e089      	b.n	80021ba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d107      	bne.n	80020c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f8be 	bl	800223c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d107      	bne.n	80020da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f8fd 	bl	80022d4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e0:	2b40      	cmp	r3, #64	; 0x40
 80020e2:	d12f      	bne.n	8002144 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f003 0320 	and.w	r3, r3, #32
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d02a      	beq.n	8002144 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020fc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a1e      	ldr	r2, [pc, #120]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d101      	bne.n	800210c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002108:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800210a:	e001      	b.n	8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800210c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4919      	ldr	r1, [pc, #100]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002118:	428b      	cmp	r3, r1
 800211a:	d101      	bne.n	8002120 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800211c:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800211e:	e001      	b.n	8002124 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002120:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002124:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002128:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f043 0202 	orr.w	r2, r3, #2
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff fdfa 	bl	8001d38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b08      	cmp	r3, #8
 800214c:	d136      	bne.n	80021bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b00      	cmp	r3, #0
 8002156:	d031      	beq.n	80021bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a07      	ldr	r2, [pc, #28]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d101      	bne.n	8002166 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002164:	e001      	b.n	800216a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002166:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4902      	ldr	r1, [pc, #8]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002172:	428b      	cmp	r3, r1
 8002174:	d106      	bne.n	8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002176:	4b02      	ldr	r3, [pc, #8]	; (8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002178:	e006      	b.n	8002188 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800217a:	bf00      	nop
 800217c:	40003800 	.word	0x40003800
 8002180:	40003400 	.word	0x40003400
 8002184:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002188:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800218c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800219c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f043 0204 	orr.w	r2, r3, #4
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fdc0 	bl	8001d38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021b8:	e000      	b.n	80021bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80021ba:	bf00      	nop
}
 80021bc:	bf00      	nop
 80021be:	3720      	adds	r7, #32
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	1c99      	adds	r1, r3, #2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6251      	str	r1, [r2, #36]	; 0x24
 80021ea:	881a      	ldrh	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002204:	b29b      	uxth	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d113      	bne.n	8002232 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002218:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d106      	bne.n	8002232 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ffc9 	bl	80021c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	1c99      	adds	r1, r3, #2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6251      	str	r1, [r2, #36]	; 0x24
 800224e:	8819      	ldrh	r1, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <I2SEx_TxISR_I2SExt+0x90>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d101      	bne.n	800225e <I2SEx_TxISR_I2SExt+0x22>
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <I2SEx_TxISR_I2SExt+0x94>)
 800225c:	e001      	b.n	8002262 <I2SEx_TxISR_I2SExt+0x26>
 800225e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002262:	460a      	mov	r2, r1
 8002264:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002278:	b29b      	uxth	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d121      	bne.n	80022c2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a12      	ldr	r2, [pc, #72]	; (80022cc <I2SEx_TxISR_I2SExt+0x90>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d101      	bne.n	800228c <I2SEx_TxISR_I2SExt+0x50>
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <I2SEx_TxISR_I2SExt+0x94>)
 800228a:	e001      	b.n	8002290 <I2SEx_TxISR_I2SExt+0x54>
 800228c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	490d      	ldr	r1, [pc, #52]	; (80022cc <I2SEx_TxISR_I2SExt+0x90>)
 8002298:	428b      	cmp	r3, r1
 800229a:	d101      	bne.n	80022a0 <I2SEx_TxISR_I2SExt+0x64>
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <I2SEx_TxISR_I2SExt+0x94>)
 800229e:	e001      	b.n	80022a4 <I2SEx_TxISR_I2SExt+0x68>
 80022a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d106      	bne.n	80022c2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff81 	bl	80021c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40003800 	.word	0x40003800
 80022d0:	40003400 	.word	0x40003400

080022d4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68d8      	ldr	r0, [r3, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	1c99      	adds	r1, r3, #2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	62d1      	str	r1, [r2, #44]	; 0x2c
 80022ec:	b282      	uxth	r2, r0
 80022ee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002302:	b29b      	uxth	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d113      	bne.n	8002330 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002316:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ff4a 	bl	80021c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a20      	ldr	r2, [pc, #128]	; (80023c8 <I2SEx_RxISR_I2SExt+0x90>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d101      	bne.n	800234e <I2SEx_RxISR_I2SExt+0x16>
 800234a:	4b20      	ldr	r3, [pc, #128]	; (80023cc <I2SEx_RxISR_I2SExt+0x94>)
 800234c:	e001      	b.n	8002352 <I2SEx_RxISR_I2SExt+0x1a>
 800234e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002352:	68d8      	ldr	r0, [r3, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	1c99      	adds	r1, r3, #2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800235e:	b282      	uxth	r2, r0
 8002360:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002366:	b29b      	uxth	r3, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002374:	b29b      	uxth	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d121      	bne.n	80023be <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <I2SEx_RxISR_I2SExt+0x90>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d101      	bne.n	8002388 <I2SEx_RxISR_I2SExt+0x50>
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <I2SEx_RxISR_I2SExt+0x94>)
 8002386:	e001      	b.n	800238c <I2SEx_RxISR_I2SExt+0x54>
 8002388:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	490d      	ldr	r1, [pc, #52]	; (80023c8 <I2SEx_RxISR_I2SExt+0x90>)
 8002394:	428b      	cmp	r3, r1
 8002396:	d101      	bne.n	800239c <I2SEx_RxISR_I2SExt+0x64>
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <I2SEx_RxISR_I2SExt+0x94>)
 800239a:	e001      	b.n	80023a0 <I2SEx_RxISR_I2SExt+0x68>
 800239c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023a4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d106      	bne.n	80023be <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff03 	bl	80021c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40003800 	.word	0x40003800
 80023cc:	40003400 	.word	0x40003400

080023d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e267      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d075      	beq.n	80024da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ee:	4b88      	ldr	r3, [pc, #544]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d00c      	beq.n	8002414 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023fa:	4b85      	ldr	r3, [pc, #532]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002402:	2b08      	cmp	r3, #8
 8002404:	d112      	bne.n	800242c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002406:	4b82      	ldr	r3, [pc, #520]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002412:	d10b      	bne.n	800242c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002414:	4b7e      	ldr	r3, [pc, #504]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d05b      	beq.n	80024d8 <HAL_RCC_OscConfig+0x108>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d157      	bne.n	80024d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e242      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002434:	d106      	bne.n	8002444 <HAL_RCC_OscConfig+0x74>
 8002436:	4b76      	ldr	r3, [pc, #472]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a75      	ldr	r2, [pc, #468]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e01d      	b.n	8002480 <HAL_RCC_OscConfig+0xb0>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x98>
 800244e:	4b70      	ldr	r3, [pc, #448]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a6f      	ldr	r2, [pc, #444]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b6d      	ldr	r3, [pc, #436]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a6c      	ldr	r2, [pc, #432]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0xb0>
 8002468:	4b69      	ldr	r3, [pc, #420]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a68      	ldr	r2, [pc, #416]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800246e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b66      	ldr	r3, [pc, #408]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a65      	ldr	r2, [pc, #404]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800247a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7fe ff18 	bl	80012bc <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002490:	f7fe ff14 	bl	80012bc <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e207      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	4b5b      	ldr	r3, [pc, #364]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0xc0>
 80024ae:	e014      	b.n	80024da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7fe ff04 	bl	80012bc <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b8:	f7fe ff00 	bl	80012bc <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e1f3      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ca:	4b51      	ldr	r3, [pc, #324]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0xe8>
 80024d6:	e000      	b.n	80024da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d063      	beq.n	80025ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024e6:	4b4a      	ldr	r3, [pc, #296]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f2:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d11c      	bne.n	8002538 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024fe:	4b44      	ldr	r3, [pc, #272]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d116      	bne.n	8002538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	4b41      	ldr	r3, [pc, #260]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <HAL_RCC_OscConfig+0x152>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d001      	beq.n	8002522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e1c7      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002522:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4937      	ldr	r1, [pc, #220]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002536:	e03a      	b.n	80025ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002540:	4b34      	ldr	r3, [pc, #208]	; (8002614 <HAL_RCC_OscConfig+0x244>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7fe feb9 	bl	80012bc <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800254e:	f7fe feb5 	bl	80012bc <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e1a8      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b28      	ldr	r3, [pc, #160]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4925      	ldr	r1, [pc, #148]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]
 8002580:	e015      	b.n	80025ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002582:	4b24      	ldr	r3, [pc, #144]	; (8002614 <HAL_RCC_OscConfig+0x244>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe fe98 	bl	80012bc <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002590:	f7fe fe94 	bl	80012bc <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e187      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d036      	beq.n	8002628 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <HAL_RCC_OscConfig+0x248>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7fe fe78 	bl	80012bc <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d0:	f7fe fe74 	bl	80012bc <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e167      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80025e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x200>
 80025ee:	e01b      	b.n	8002628 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f0:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_RCC_OscConfig+0x248>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f6:	f7fe fe61 	bl	80012bc <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fc:	e00e      	b.n	800261c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025fe:	f7fe fe5d 	bl	80012bc <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d907      	bls.n	800261c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e150      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
 8002610:	40023800 	.word	0x40023800
 8002614:	42470000 	.word	0x42470000
 8002618:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261c:	4b88      	ldr	r3, [pc, #544]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800261e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1ea      	bne.n	80025fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 8097 	beq.w	8002764 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263a:	4b81      	ldr	r3, [pc, #516]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10f      	bne.n	8002666 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	4b7d      	ldr	r3, [pc, #500]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	4a7c      	ldr	r2, [pc, #496]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	6413      	str	r3, [r2, #64]	; 0x40
 8002656:	4b7a      	ldr	r3, [pc, #488]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002662:	2301      	movs	r3, #1
 8002664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002666:	4b77      	ldr	r3, [pc, #476]	; (8002844 <HAL_RCC_OscConfig+0x474>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d118      	bne.n	80026a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002672:	4b74      	ldr	r3, [pc, #464]	; (8002844 <HAL_RCC_OscConfig+0x474>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a73      	ldr	r2, [pc, #460]	; (8002844 <HAL_RCC_OscConfig+0x474>)
 8002678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267e:	f7fe fe1d 	bl	80012bc <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002686:	f7fe fe19 	bl	80012bc <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e10c      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	4b6a      	ldr	r3, [pc, #424]	; (8002844 <HAL_RCC_OscConfig+0x474>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x2ea>
 80026ac:	4b64      	ldr	r3, [pc, #400]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	4a63      	ldr	r2, [pc, #396]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6713      	str	r3, [r2, #112]	; 0x70
 80026b8:	e01c      	b.n	80026f4 <HAL_RCC_OscConfig+0x324>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b05      	cmp	r3, #5
 80026c0:	d10c      	bne.n	80026dc <HAL_RCC_OscConfig+0x30c>
 80026c2:	4b5f      	ldr	r3, [pc, #380]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	4a5e      	ldr	r2, [pc, #376]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	6713      	str	r3, [r2, #112]	; 0x70
 80026ce:	4b5c      	ldr	r3, [pc, #368]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	4a5b      	ldr	r2, [pc, #364]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6713      	str	r3, [r2, #112]	; 0x70
 80026da:	e00b      	b.n	80026f4 <HAL_RCC_OscConfig+0x324>
 80026dc:	4b58      	ldr	r3, [pc, #352]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	4a57      	ldr	r2, [pc, #348]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	6713      	str	r3, [r2, #112]	; 0x70
 80026e8:	4b55      	ldr	r3, [pc, #340]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	4a54      	ldr	r2, [pc, #336]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026ee:	f023 0304 	bic.w	r3, r3, #4
 80026f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d015      	beq.n	8002728 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7fe fdde 	bl	80012bc <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002702:	e00a      	b.n	800271a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002704:	f7fe fdda 	bl	80012bc <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e0cb      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271a:	4b49      	ldr	r3, [pc, #292]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0ee      	beq.n	8002704 <HAL_RCC_OscConfig+0x334>
 8002726:	e014      	b.n	8002752 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002728:	f7fe fdc8 	bl	80012bc <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272e:	e00a      	b.n	8002746 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002730:	f7fe fdc4 	bl	80012bc <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e0b5      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002746:	4b3e      	ldr	r3, [pc, #248]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1ee      	bne.n	8002730 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002752:	7dfb      	ldrb	r3, [r7, #23]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d105      	bne.n	8002764 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002758:	4b39      	ldr	r3, [pc, #228]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	4a38      	ldr	r2, [pc, #224]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800275e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002762:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80a1 	beq.w	80028b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800276e:	4b34      	ldr	r3, [pc, #208]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b08      	cmp	r3, #8
 8002778:	d05c      	beq.n	8002834 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d141      	bne.n	8002806 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002782:	4b31      	ldr	r3, [pc, #196]	; (8002848 <HAL_RCC_OscConfig+0x478>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7fe fd98 	bl	80012bc <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002790:	f7fe fd94 	bl	80012bc <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e087      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a2:	4b27      	ldr	r3, [pc, #156]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69da      	ldr	r2, [r3, #28]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	019b      	lsls	r3, r3, #6
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	085b      	lsrs	r3, r3, #1
 80027c6:	3b01      	subs	r3, #1
 80027c8:	041b      	lsls	r3, r3, #16
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	061b      	lsls	r3, r3, #24
 80027d2:	491b      	ldr	r1, [pc, #108]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d8:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCC_OscConfig+0x478>)
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7fe fd6d 	bl	80012bc <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e6:	f7fe fd69 	bl	80012bc <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e05c      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x416>
 8002804:	e054      	b.n	80028b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <HAL_RCC_OscConfig+0x478>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7fe fd56 	bl	80012bc <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002814:	f7fe fd52 	bl	80012bc <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e045      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x444>
 8002832:	e03d      	b.n	80028b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d107      	bne.n	800284c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e038      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
 8002840:	40023800 	.word	0x40023800
 8002844:	40007000 	.word	0x40007000
 8002848:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_RCC_OscConfig+0x4ec>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d028      	beq.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d121      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d11a      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800287c:	4013      	ands	r3, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002882:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002884:	4293      	cmp	r3, r2
 8002886:	d111      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	3b01      	subs	r3, #1
 8002896:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002898:	429a      	cmp	r2, r3
 800289a:	d107      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800

080028c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0cc      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d4:	4b68      	ldr	r3, [pc, #416]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d90c      	bls.n	80028fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e2:	4b65      	ldr	r3, [pc, #404]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b63      	ldr	r3, [pc, #396]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0b8      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d020      	beq.n	800294a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002914:	4b59      	ldr	r3, [pc, #356]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4a58      	ldr	r2, [pc, #352]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800291e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800292c:	4b53      	ldr	r3, [pc, #332]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4a52      	ldr	r2, [pc, #328]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002938:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	494d      	ldr	r1, [pc, #308]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d044      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d119      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e07f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d003      	beq.n	800297e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297a:	2b03      	cmp	r3, #3
 800297c:	d107      	bne.n	800298e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297e:	4b3f      	ldr	r3, [pc, #252]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e06f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298e:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e067      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299e:	4b37      	ldr	r3, [pc, #220]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f023 0203 	bic.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4934      	ldr	r1, [pc, #208]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b0:	f7fe fc84 	bl	80012bc <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b8:	f7fe fc80 	bl	80012bc <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e04f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 020c 	and.w	r2, r3, #12
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	429a      	cmp	r2, r3
 80029de:	d1eb      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e0:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d20c      	bcs.n	8002a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e032      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4916      	ldr	r1, [pc, #88]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	490e      	ldr	r1, [pc, #56]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a46:	f000 f821 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	490a      	ldr	r1, [pc, #40]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 8002a58:	5ccb      	ldrb	r3, [r1, r3]
 8002a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5e:	4a09      	ldr	r2, [pc, #36]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x1c8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fb24 	bl	80010b4 <HAL_InitTick>

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023c00 	.word	0x40023c00
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	08005930 	.word	0x08005930
 8002a84:	20000004 	.word	0x20000004
 8002a88:	20000008 	.word	0x20000008

08002a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a90:	b094      	sub	sp, #80	; 0x50
 8002a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	647b      	str	r3, [r7, #68]	; 0x44
 8002a98:	2300      	movs	r3, #0
 8002a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa4:	4b79      	ldr	r3, [pc, #484]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d00d      	beq.n	8002acc <HAL_RCC_GetSysClockFreq+0x40>
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	f200 80e1 	bhi.w	8002c78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d003      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002abe:	e0db      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac0:	4b73      	ldr	r3, [pc, #460]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ac2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ac4:	e0db      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ac6:	4b73      	ldr	r3, [pc, #460]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ac8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aca:	e0d8      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002acc:	4b6f      	ldr	r3, [pc, #444]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ad6:	4b6d      	ldr	r3, [pc, #436]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d063      	beq.n	8002baa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae2:	4b6a      	ldr	r3, [pc, #424]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	099b      	lsrs	r3, r3, #6
 8002ae8:	2200      	movs	r2, #0
 8002aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af4:	633b      	str	r3, [r7, #48]	; 0x30
 8002af6:	2300      	movs	r3, #0
 8002af8:	637b      	str	r3, [r7, #52]	; 0x34
 8002afa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002afe:	4622      	mov	r2, r4
 8002b00:	462b      	mov	r3, r5
 8002b02:	f04f 0000 	mov.w	r0, #0
 8002b06:	f04f 0100 	mov.w	r1, #0
 8002b0a:	0159      	lsls	r1, r3, #5
 8002b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b10:	0150      	lsls	r0, r2, #5
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4621      	mov	r1, r4
 8002b18:	1a51      	subs	r1, r2, r1
 8002b1a:	6139      	str	r1, [r7, #16]
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b30:	4659      	mov	r1, fp
 8002b32:	018b      	lsls	r3, r1, #6
 8002b34:	4651      	mov	r1, sl
 8002b36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b3a:	4651      	mov	r1, sl
 8002b3c:	018a      	lsls	r2, r1, #6
 8002b3e:	4651      	mov	r1, sl
 8002b40:	ebb2 0801 	subs.w	r8, r2, r1
 8002b44:	4659      	mov	r1, fp
 8002b46:	eb63 0901 	sbc.w	r9, r3, r1
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b5e:	4690      	mov	r8, r2
 8002b60:	4699      	mov	r9, r3
 8002b62:	4623      	mov	r3, r4
 8002b64:	eb18 0303 	adds.w	r3, r8, r3
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	462b      	mov	r3, r5
 8002b6c:	eb49 0303 	adc.w	r3, r9, r3
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b7e:	4629      	mov	r1, r5
 8002b80:	024b      	lsls	r3, r1, #9
 8002b82:	4621      	mov	r1, r4
 8002b84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b88:	4621      	mov	r1, r4
 8002b8a:	024a      	lsls	r2, r1, #9
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b92:	2200      	movs	r2, #0
 8002b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b9c:	f7fd fb20 	bl	80001e0 <__aeabi_uldivmod>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ba8:	e058      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002baa:	4b38      	ldr	r3, [pc, #224]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	099b      	lsrs	r3, r3, #6
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bba:	623b      	str	r3, [r7, #32]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bc4:	4642      	mov	r2, r8
 8002bc6:	464b      	mov	r3, r9
 8002bc8:	f04f 0000 	mov.w	r0, #0
 8002bcc:	f04f 0100 	mov.w	r1, #0
 8002bd0:	0159      	lsls	r1, r3, #5
 8002bd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd6:	0150      	lsls	r0, r2, #5
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4641      	mov	r1, r8
 8002bde:	ebb2 0a01 	subs.w	sl, r2, r1
 8002be2:	4649      	mov	r1, r9
 8002be4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bfc:	ebb2 040a 	subs.w	r4, r2, sl
 8002c00:	eb63 050b 	sbc.w	r5, r3, fp
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	00eb      	lsls	r3, r5, #3
 8002c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c12:	00e2      	lsls	r2, r4, #3
 8002c14:	4614      	mov	r4, r2
 8002c16:	461d      	mov	r5, r3
 8002c18:	4643      	mov	r3, r8
 8002c1a:	18e3      	adds	r3, r4, r3
 8002c1c:	603b      	str	r3, [r7, #0]
 8002c1e:	464b      	mov	r3, r9
 8002c20:	eb45 0303 	adc.w	r3, r5, r3
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c32:	4629      	mov	r1, r5
 8002c34:	028b      	lsls	r3, r1, #10
 8002c36:	4621      	mov	r1, r4
 8002c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	028a      	lsls	r2, r1, #10
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c46:	2200      	movs	r2, #0
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	61fa      	str	r2, [r7, #28]
 8002c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c50:	f7fd fac6 	bl	80001e0 <__aeabi_uldivmod>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4613      	mov	r3, r2
 8002c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	0c1b      	lsrs	r3, r3, #16
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	3301      	adds	r3, #1
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c76:	e002      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3750      	adds	r7, #80	; 0x50
 8002c84:	46bd      	mov	sp, r7
 8002c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	00f42400 	.word	0x00f42400
 8002c94:	007a1200 	.word	0x007a1200

08002c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <HAL_RCC_GetHCLKFreq+0x14>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000004 	.word	0x20000004

08002cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cb4:	f7ff fff0 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	0a9b      	lsrs	r3, r3, #10
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	4903      	ldr	r1, [pc, #12]	; (8002cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	08005940 	.word	0x08005940

08002cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cdc:	f7ff ffdc 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	0b5b      	lsrs	r3, r3, #13
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	4903      	ldr	r1, [pc, #12]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	08005940 	.word	0x08005940

08002d00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	220f      	movs	r2, #15
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d10:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0203 	and.w	r2, r3, #3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	08db      	lsrs	r3, r3, #3
 8002d3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <HAL_RCC_GetClockConfig+0x60>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0207 	and.w	r2, r3, #7
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	601a      	str	r2, [r3, #0]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40023c00 	.word	0x40023c00

08002d64 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d105      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d038      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d8c:	4b68      	ldr	r3, [pc, #416]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d92:	f7fe fa93 	bl	80012bc <HAL_GetTick>
 8002d96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d9a:	f7fe fa8f 	bl	80012bc <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e0bd      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dac:	4b61      	ldr	r3, [pc, #388]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	019b      	lsls	r3, r3, #6
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	071b      	lsls	r3, r3, #28
 8002dca:	495a      	ldr	r1, [pc, #360]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002dd2:	4b57      	ldr	r3, [pc, #348]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dd8:	f7fe fa70 	bl	80012bc <HAL_GetTick>
 8002ddc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002de0:	f7fe fa6c 	bl	80012bc <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e09a      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002df2:	4b50      	ldr	r3, [pc, #320]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8083 	beq.w	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	4b48      	ldr	r3, [pc, #288]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	4a47      	ldr	r2, [pc, #284]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1c:	4b45      	ldr	r3, [pc, #276]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e28:	4b43      	ldr	r3, [pc, #268]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a42      	ldr	r2, [pc, #264]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e32:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e34:	f7fe fa42 	bl	80012bc <HAL_GetTick>
 8002e38:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e3c:	f7fe fa3e 	bl	80012bc <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e06c      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e4e:	4b3a      	ldr	r3, [pc, #232]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e5a:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e62:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d02f      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d028      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e78:	4b2e      	ldr	r3, [pc, #184]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e80:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e82:	4b2e      	ldr	r3, [pc, #184]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e84:	2201      	movs	r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e88:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e8e:	4a29      	ldr	r2, [pc, #164]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e94:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d114      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fa0c 	bl	80012bc <HAL_GetTick>
 8002ea4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea6:	e00a      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea8:	f7fe fa08 	bl	80012bc <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e034      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebe:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0ee      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ed6:	d10d      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002ed8:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eec:	4911      	ldr	r1, [pc, #68]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	608b      	str	r3, [r1, #8]
 8002ef2:	e005      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002efe:	6093      	str	r3, [r2, #8]
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0c:	4909      	ldr	r1, [pc, #36]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	7d1a      	ldrb	r2, [r3, #20]
 8002f22:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002f24:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	42470068 	.word	0x42470068
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	42470e40 	.word	0x42470e40
 8002f40:	424711e0 	.word	0x424711e0

08002f44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d141      	bne.n	8002fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002f62:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d006      	beq.n	8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f78:	d131      	bne.n	8002fde <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002f7c:	617b      	str	r3, [r7, #20]
          break;
 8002f7e:	e031      	b.n	8002fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f80:	4b1d      	ldr	r3, [pc, #116]	; (8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f8c:	d109      	bne.n	8002fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002f8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f98:	4a19      	ldr	r2, [pc, #100]	; (8003000 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002fa2:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fac:	4a15      	ldr	r2, [pc, #84]	; (8003004 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8002fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb2:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002fb4:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fba:	099b      	lsrs	r3, r3, #6
 8002fbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	fb02 f303 	mul.w	r3, r2, r3
 8002fc6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fce:	0f1b      	lsrs	r3, r3, #28
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fda:	617b      	str	r3, [r7, #20]
          break;
 8002fdc:	e002      	b.n	8002fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
          break;
 8002fe2:	bf00      	nop
        }
      }
      break;
 8002fe4:	e000      	b.n	8002fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 8002fe6:	bf00      	nop
    }
  }
  return frequency;
 8002fe8:	697b      	ldr	r3, [r7, #20]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	00bb8000 	.word	0x00bb8000
 8003000:	007a1200 	.word	0x007a1200
 8003004:	00f42400 	.word	0x00f42400

08003008 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e07b      	b.n	8003112 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	2b00      	cmp	r3, #0
 8003020:	d108      	bne.n	8003034 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800302a:	d009      	beq.n	8003040 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	61da      	str	r2, [r3, #28]
 8003032:	e005      	b.n	8003040 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fd ffe2 	bl	8001024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003076:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c4:	ea42 0103 	orr.w	r1, r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	0c1b      	lsrs	r3, r3, #16
 80030de:	f003 0104 	and.w	r1, r3, #4
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	f003 0210 	and.w	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003100:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e041      	b.n	80031b0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d106      	bne.n	8003146 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f839 	bl	80031b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2202      	movs	r2, #2
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3304      	adds	r3, #4
 8003156:	4619      	mov	r1, r3
 8003158:	4610      	mov	r0, r2
 800315a:	f000 f9b1 	bl	80034c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d001      	beq.n	80031e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e044      	b.n	800326e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1e      	ldr	r2, [pc, #120]	; (800327c <HAL_TIM_Base_Start_IT+0xb0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d018      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x6c>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320e:	d013      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x6c>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1a      	ldr	r2, [pc, #104]	; (8003280 <HAL_TIM_Base_Start_IT+0xb4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00e      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x6c>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a19      	ldr	r2, [pc, #100]	; (8003284 <HAL_TIM_Base_Start_IT+0xb8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d009      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x6c>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a17      	ldr	r2, [pc, #92]	; (8003288 <HAL_TIM_Base_Start_IT+0xbc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x6c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a16      	ldr	r2, [pc, #88]	; (800328c <HAL_TIM_Base_Start_IT+0xc0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d111      	bne.n	800325c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b06      	cmp	r3, #6
 8003248:	d010      	beq.n	800326c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0201 	orr.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325a:	e007      	b.n	800326c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40010000 	.word	0x40010000
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800
 8003288:	40000c00 	.word	0x40000c00
 800328c:	40014000 	.word	0x40014000

08003290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d020      	beq.n	80032f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d01b      	beq.n	80032f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0202 	mvn.w	r2, #2
 80032c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f8d2 	bl	8003484 <HAL_TIM_IC_CaptureCallback>
 80032e0:	e005      	b.n	80032ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f8c4 	bl	8003470 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f8d5 	bl	8003498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d020      	beq.n	8003340 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01b      	beq.n	8003340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0204 	mvn.w	r2, #4
 8003310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2202      	movs	r2, #2
 8003316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f8ac 	bl	8003484 <HAL_TIM_IC_CaptureCallback>
 800332c:	e005      	b.n	800333a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f89e 	bl	8003470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f8af 	bl	8003498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d020      	beq.n	800338c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01b      	beq.n	800338c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0208 	mvn.w	r2, #8
 800335c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2204      	movs	r2, #4
 8003362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f886 	bl	8003484 <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f878 	bl	8003470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f889 	bl	8003498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b00      	cmp	r3, #0
 8003394:	d020      	beq.n	80033d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01b      	beq.n	80033d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0210 	mvn.w	r2, #16
 80033a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2208      	movs	r2, #8
 80033ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f860 	bl	8003484 <HAL_TIM_IC_CaptureCallback>
 80033c4:	e005      	b.n	80033d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f852 	bl	8003470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f863 	bl	8003498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00c      	beq.n	80033fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d007      	beq.n	80033fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0201 	mvn.w	r2, #1
 80033f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd fc60 	bl	8000cbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00c      	beq.n	8003420 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f8e6 	bl	80035ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00c      	beq.n	8003444 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800343c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f834 	bl	80034ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00c      	beq.n	8003468 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0220 	mvn.w	r2, #32
 8003460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f8b8 	bl	80035d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003468:	bf00      	nop
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a3a      	ldr	r2, [pc, #232]	; (80035bc <TIM_Base_SetConfig+0xfc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00f      	beq.n	80034f8 <TIM_Base_SetConfig+0x38>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034de:	d00b      	beq.n	80034f8 <TIM_Base_SetConfig+0x38>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a37      	ldr	r2, [pc, #220]	; (80035c0 <TIM_Base_SetConfig+0x100>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d007      	beq.n	80034f8 <TIM_Base_SetConfig+0x38>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a36      	ldr	r2, [pc, #216]	; (80035c4 <TIM_Base_SetConfig+0x104>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d003      	beq.n	80034f8 <TIM_Base_SetConfig+0x38>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a35      	ldr	r2, [pc, #212]	; (80035c8 <TIM_Base_SetConfig+0x108>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d108      	bne.n	800350a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a2b      	ldr	r2, [pc, #172]	; (80035bc <TIM_Base_SetConfig+0xfc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01b      	beq.n	800354a <TIM_Base_SetConfig+0x8a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003518:	d017      	beq.n	800354a <TIM_Base_SetConfig+0x8a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a28      	ldr	r2, [pc, #160]	; (80035c0 <TIM_Base_SetConfig+0x100>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d013      	beq.n	800354a <TIM_Base_SetConfig+0x8a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a27      	ldr	r2, [pc, #156]	; (80035c4 <TIM_Base_SetConfig+0x104>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00f      	beq.n	800354a <TIM_Base_SetConfig+0x8a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a26      	ldr	r2, [pc, #152]	; (80035c8 <TIM_Base_SetConfig+0x108>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00b      	beq.n	800354a <TIM_Base_SetConfig+0x8a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a25      	ldr	r2, [pc, #148]	; (80035cc <TIM_Base_SetConfig+0x10c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d007      	beq.n	800354a <TIM_Base_SetConfig+0x8a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a24      	ldr	r2, [pc, #144]	; (80035d0 <TIM_Base_SetConfig+0x110>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d003      	beq.n	800354a <TIM_Base_SetConfig+0x8a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a23      	ldr	r2, [pc, #140]	; (80035d4 <TIM_Base_SetConfig+0x114>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d108      	bne.n	800355c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a0e      	ldr	r2, [pc, #56]	; (80035bc <TIM_Base_SetConfig+0xfc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d103      	bne.n	8003590 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d105      	bne.n	80035ae <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f023 0201 	bic.w	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	611a      	str	r2, [r3, #16]
  }
}
 80035ae:	bf00      	nop
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40010000 	.word	0x40010000
 80035c0:	40000400 	.word	0x40000400
 80035c4:	40000800 	.word	0x40000800
 80035c8:	40000c00 	.word	0x40000c00
 80035cc:	40014000 	.word	0x40014000
 80035d0:	40014400 	.word	0x40014400
 80035d4:	40014800 	.word	0x40014800

080035d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800360e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003612:	2b84      	cmp	r3, #132	; 0x84
 8003614:	d005      	beq.n	8003622 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003616:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4413      	add	r3, r2
 800361e:	3303      	adds	r3, #3
 8003620:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003622:	68fb      	ldr	r3, [r7, #12]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003634:	f000 ff2a 	bl	800448c <vTaskStartScheduler>
  
  return osOK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	bd80      	pop	{r7, pc}

0800363e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800363e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003640:	b089      	sub	sp, #36	; 0x24
 8003642:	af04      	add	r7, sp, #16
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d020      	beq.n	8003692 <osThreadCreate+0x54>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d01c      	beq.n	8003692 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685c      	ldr	r4, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691e      	ldr	r6, [r3, #16]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff ffc8 	bl	8003600 <makeFreeRtosPriority>
 8003670:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800367a:	9202      	str	r2, [sp, #8]
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	9100      	str	r1, [sp, #0]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	4632      	mov	r2, r6
 8003684:	4629      	mov	r1, r5
 8003686:	4620      	mov	r0, r4
 8003688:	f000 fc90 	bl	8003fac <xTaskCreateStatic>
 800368c:	4603      	mov	r3, r0
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	e01c      	b.n	80036cc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685c      	ldr	r4, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800369e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff ffaa 	bl	8003600 <makeFreeRtosPriority>
 80036ac:	4602      	mov	r2, r0
 80036ae:	f107 030c 	add.w	r3, r7, #12
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	9200      	str	r2, [sp, #0]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	4632      	mov	r2, r6
 80036ba:	4629      	mov	r1, r5
 80036bc:	4620      	mov	r0, r4
 80036be:	f000 fcd2 	bl	8004066 <xTaskCreate>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d001      	beq.n	80036cc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e000      	b.n	80036ce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80036cc:	68fb      	ldr	r3, [r7, #12]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036d6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <osDelay+0x16>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	e000      	b.n	80036ee <osDelay+0x18>
 80036ec:	2301      	movs	r3, #1
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fe06 	bl	8004300 <vTaskDelay>
  
  return osOK;
 80036f4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	4619      	mov	r1, r3
 8003714:	2001      	movs	r0, #1
 8003716:	f000 fa5c 	bl	8003bd2 <xQueueCreateMutexStatic>
 800371a:	4603      	mov	r3, r0
 800371c:	e003      	b.n	8003726 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800371e:	2001      	movs	r0, #1
 8003720:	f000 fa3f 	bl	8003ba2 <xQueueCreateMutex>
 8003724:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800372e:	b580      	push	{r7, lr}
 8003730:	b086      	sub	sp, #24
 8003732:	af02      	add	r7, sp, #8
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00f      	beq.n	8003760 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d10a      	bne.n	800375c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2203      	movs	r2, #3
 800374c:	9200      	str	r2, [sp, #0]
 800374e:	2200      	movs	r2, #0
 8003750:	2100      	movs	r1, #0
 8003752:	2001      	movs	r0, #1
 8003754:	f000 f93a 	bl	80039cc <xQueueGenericCreateStatic>
 8003758:	4603      	mov	r3, r0
 800375a:	e016      	b.n	800378a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800375c:	2300      	movs	r3, #0
 800375e:	e014      	b.n	800378a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d110      	bne.n	8003788 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8003766:	2203      	movs	r2, #3
 8003768:	2100      	movs	r1, #0
 800376a:	2001      	movs	r0, #1
 800376c:	f000 f9a6 	bl	8003abc <xQueueGenericCreate>
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <osSemaphoreCreate+0x56>
 8003778:	2300      	movs	r3, #0
 800377a:	2200      	movs	r2, #0
 800377c:	2100      	movs	r1, #0
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 fa42 	bl	8003c08 <xQueueGenericSend>
      return sema;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	e000      	b.n	800378a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003788:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f103 0208 	add.w	r2, r3, #8
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f04f 32ff 	mov.w	r2, #4294967295
 80037aa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f103 0208 	add.w	r2, r3, #8
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f103 0208 	add.w	r2, r3, #8
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	601a      	str	r2, [r3, #0]
}
 8003828:	bf00      	nop
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384a:	d103      	bne.n	8003854 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	e00c      	b.n	800386e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3308      	adds	r3, #8
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	e002      	b.n	8003862 <vListInsert+0x2e>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	429a      	cmp	r2, r3
 800386c:	d2f6      	bcs.n	800385c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	601a      	str	r2, [r3, #0]
}
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6892      	ldr	r2, [r2, #8]
 80038bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6852      	ldr	r2, [r2, #4]
 80038c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d103      	bne.n	80038da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	1e5a      	subs	r2, r3, #1
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003922:	bf00      	nop
 8003924:	e7fe      	b.n	8003924 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003926:	f001 fbfd 	bl	8005124 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003932:	68f9      	ldr	r1, [r7, #12]
 8003934:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	441a      	add	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	3b01      	subs	r3, #1
 8003958:	68f9      	ldr	r1, [r7, #12]
 800395a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	441a      	add	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	22ff      	movs	r2, #255	; 0xff
 800396a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	22ff      	movs	r2, #255	; 0xff
 8003972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d114      	bne.n	80039a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01a      	beq.n	80039ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3310      	adds	r3, #16
 8003988:	4618      	mov	r0, r3
 800398a:	f000 ffd1 	bl	8004930 <xTaskRemoveFromEventList>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d012      	beq.n	80039ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <xQueueGenericReset+0xcc>)
 8003996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	e009      	b.n	80039ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3310      	adds	r3, #16
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff fef1 	bl	8003792 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3324      	adds	r3, #36	; 0x24
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff feec 	bl	8003792 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039ba:	f001 fbe3 	bl	8005184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039be:	2301      	movs	r3, #1
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	e000ed04 	.word	0xe000ed04

080039cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08e      	sub	sp, #56	; 0x38
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039f2:	bf00      	nop
 80039f4:	e7fe      	b.n	80039f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a0e:	bf00      	nop
 8003a10:	e7fe      	b.n	8003a10 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <xQueueGenericCreateStatic+0x52>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <xQueueGenericCreateStatic+0x56>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <xQueueGenericCreateStatic+0x58>
 8003a22:	2300      	movs	r3, #0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10a      	bne.n	8003a3e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	623b      	str	r3, [r7, #32]
}
 8003a3a:	bf00      	nop
 8003a3c:	e7fe      	b.n	8003a3c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d102      	bne.n	8003a4a <xQueueGenericCreateStatic+0x7e>
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <xQueueGenericCreateStatic+0x82>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <xQueueGenericCreateStatic+0x84>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	61fb      	str	r3, [r7, #28]
}
 8003a66:	bf00      	nop
 8003a68:	e7fe      	b.n	8003a68 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a6a:	2348      	movs	r3, #72	; 0x48
 8003a6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b48      	cmp	r3, #72	; 0x48
 8003a72:	d00a      	beq.n	8003a8a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	61bb      	str	r3, [r7, #24]
}
 8003a86:	bf00      	nop
 8003a88:	e7fe      	b.n	8003a88 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a8a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00d      	beq.n	8003ab2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f83f 	bl	8003b30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3730      	adds	r7, #48	; 0x30
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08a      	sub	sp, #40	; 0x28
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	613b      	str	r3, [r7, #16]
}
 8003ae2:	bf00      	nop
 8003ae4:	e7fe      	b.n	8003ae4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	3348      	adds	r3, #72	; 0x48
 8003af4:	4618      	mov	r0, r3
 8003af6:	f001 fbf7 	bl	80052e8 <pvPortMalloc>
 8003afa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d011      	beq.n	8003b26 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	3348      	adds	r3, #72	; 0x48
 8003b0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b14:	79fa      	ldrb	r2, [r7, #7]
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	68b9      	ldr	r1, [r7, #8]
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f805 	bl	8003b30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b26:	69bb      	ldr	r3, [r7, #24]
	}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d103      	bne.n	8003b4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	e002      	b.n	8003b52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b5e:	2101      	movs	r1, #1
 8003b60:	69b8      	ldr	r0, [r7, #24]
 8003b62:	f7ff fecb 	bl	80038fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b66:	bf00      	nop
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00e      	beq.n	8003b9a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003b8e:	2300      	movs	r3, #0
 8003b90:	2200      	movs	r2, #0
 8003b92:	2100      	movs	r1, #0
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f837 	bl	8003c08 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003b9a:	bf00      	nop
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b086      	sub	sp, #24
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	4603      	mov	r3, r0
 8003baa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003bac:	2301      	movs	r3, #1
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	6939      	ldr	r1, [r7, #16]
 8003bba:	6978      	ldr	r0, [r7, #20]
 8003bbc:	f7ff ff7e 	bl	8003abc <xQueueGenericCreate>
 8003bc0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f7ff ffd3 	bl	8003b6e <prvInitialiseMutex>

		return xNewQueue;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
	}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b088      	sub	sp, #32
 8003bd6:	af02      	add	r7, sp, #8
 8003bd8:	4603      	mov	r3, r0
 8003bda:	6039      	str	r1, [r7, #0]
 8003bdc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003bde:	2301      	movs	r3, #1
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	2300      	movs	r3, #0
 8003be4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2200      	movs	r2, #0
 8003bee:	6939      	ldr	r1, [r7, #16]
 8003bf0:	6978      	ldr	r0, [r7, #20]
 8003bf2:	f7ff feeb 	bl	80039cc <xQueueGenericCreateStatic>
 8003bf6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f7ff ffb8 	bl	8003b6e <prvInitialiseMutex>

		return xNewQueue;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
	}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08e      	sub	sp, #56	; 0x38
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c16:	2300      	movs	r3, #0
 8003c18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <xQueueGenericSend+0x32>
	__asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c36:	bf00      	nop
 8003c38:	e7fe      	b.n	8003c38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d103      	bne.n	8003c48 <xQueueGenericSend+0x40>
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <xQueueGenericSend+0x44>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <xQueueGenericSend+0x46>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10a      	bne.n	8003c68 <xQueueGenericSend+0x60>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c64:	bf00      	nop
 8003c66:	e7fe      	b.n	8003c66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d103      	bne.n	8003c76 <xQueueGenericSend+0x6e>
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <xQueueGenericSend+0x72>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <xQueueGenericSend+0x74>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <xQueueGenericSend+0x8e>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	623b      	str	r3, [r7, #32]
}
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c96:	f001 f80b 	bl	8004cb0 <xTaskGetSchedulerState>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d102      	bne.n	8003ca6 <xQueueGenericSend+0x9e>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <xQueueGenericSend+0xa2>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <xQueueGenericSend+0xa4>
 8003caa:	2300      	movs	r3, #0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <xQueueGenericSend+0xbe>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	61fb      	str	r3, [r7, #28]
}
 8003cc2:	bf00      	nop
 8003cc4:	e7fe      	b.n	8003cc4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cc6:	f001 fa2d 	bl	8005124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d302      	bcc.n	8003cdc <xQueueGenericSend+0xd4>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d129      	bne.n	8003d30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	68b9      	ldr	r1, [r7, #8]
 8003ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ce2:	f000 f88f 	bl	8003e04 <prvCopyDataToQueue>
 8003ce6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d010      	beq.n	8003d12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	3324      	adds	r3, #36	; 0x24
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fe1b 	bl	8004930 <xTaskRemoveFromEventList>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d013      	beq.n	8003d28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d00:	4b3f      	ldr	r3, [pc, #252]	; (8003e00 <xQueueGenericSend+0x1f8>)
 8003d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	e00a      	b.n	8003d28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d007      	beq.n	8003d28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d18:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <xQueueGenericSend+0x1f8>)
 8003d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d28:	f001 fa2c 	bl	8005184 <vPortExitCritical>
				return pdPASS;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e063      	b.n	8003df8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d103      	bne.n	8003d3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d36:	f001 fa25 	bl	8005184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e05c      	b.n	8003df8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d106      	bne.n	8003d52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d44:	f107 0314 	add.w	r3, r7, #20
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 fe53 	bl	80049f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d52:	f001 fa17 	bl	8005184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d56:	f000 fc03 	bl	8004560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d5a:	f001 f9e3 	bl	8005124 <vPortEnterCritical>
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d64:	b25b      	sxtb	r3, r3
 8003d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6a:	d103      	bne.n	8003d74 <xQueueGenericSend+0x16c>
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d7a:	b25b      	sxtb	r3, r3
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d80:	d103      	bne.n	8003d8a <xQueueGenericSend+0x182>
 8003d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d8a:	f001 f9fb 	bl	8005184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d8e:	1d3a      	adds	r2, r7, #4
 8003d90:	f107 0314 	add.w	r3, r7, #20
 8003d94:	4611      	mov	r1, r2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fe42 	bl	8004a20 <xTaskCheckForTimeOut>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d124      	bne.n	8003dec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003da2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003da4:	f000 f8ea 	bl	8003f7c <prvIsQueueFull>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d018      	beq.n	8003de0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db0:	3310      	adds	r3, #16
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	4611      	mov	r1, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fd96 	bl	80048e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dbe:	f000 f88b 	bl	8003ed8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003dc2:	f000 fbdb 	bl	800457c <xTaskResumeAll>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f47f af7c 	bne.w	8003cc6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003dce:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <xQueueGenericSend+0x1f8>)
 8003dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	e772      	b.n	8003cc6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003de2:	f000 f879 	bl	8003ed8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003de6:	f000 fbc9 	bl	800457c <xTaskResumeAll>
 8003dea:	e76c      	b.n	8003cc6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dee:	f000 f873 	bl	8003ed8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003df2:	f000 fbc3 	bl	800457c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003df6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3738      	adds	r7, #56	; 0x38
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	e000ed04 	.word	0xe000ed04

08003e04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10d      	bne.n	8003e3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d14d      	bne.n	8003ec6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 ff5c 	bl	8004cec <xTaskPriorityDisinherit>
 8003e34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	609a      	str	r2, [r3, #8]
 8003e3c:	e043      	b.n	8003ec6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d119      	bne.n	8003e78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6858      	ldr	r0, [r3, #4]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	68b9      	ldr	r1, [r7, #8]
 8003e50:	f001 fcb8 	bl	80057c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	441a      	add	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d32b      	bcc.n	8003ec6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	e026      	b.n	8003ec6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	68d8      	ldr	r0, [r3, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	461a      	mov	r2, r3
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	f001 fc9e 	bl	80057c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	425b      	negs	r3, r3
 8003e92:	441a      	add	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d207      	bcs.n	8003eb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	425b      	negs	r3, r3
 8003eae:	441a      	add	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d105      	bne.n	8003ec6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003ece:	697b      	ldr	r3, [r7, #20]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ee0:	f001 f920 	bl	8005124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eec:	e011      	b.n	8003f12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d012      	beq.n	8003f1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3324      	adds	r3, #36	; 0x24
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fd18 	bl	8004930 <xTaskRemoveFromEventList>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f06:	f000 fded 	bl	8004ae4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	dce9      	bgt.n	8003eee <prvUnlockQueue+0x16>
 8003f1a:	e000      	b.n	8003f1e <prvUnlockQueue+0x46>
					break;
 8003f1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	22ff      	movs	r2, #255	; 0xff
 8003f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f26:	f001 f92d 	bl	8005184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f2a:	f001 f8fb 	bl	8005124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f36:	e011      	b.n	8003f5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d012      	beq.n	8003f66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3310      	adds	r3, #16
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fcf3 	bl	8004930 <xTaskRemoveFromEventList>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f50:	f000 fdc8 	bl	8004ae4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f54:	7bbb      	ldrb	r3, [r7, #14]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	dce9      	bgt.n	8003f38 <prvUnlockQueue+0x60>
 8003f64:	e000      	b.n	8003f68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	22ff      	movs	r2, #255	; 0xff
 8003f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f70:	f001 f908 	bl	8005184 <vPortExitCritical>
}
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f84:	f001 f8ce 	bl	8005124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d102      	bne.n	8003f9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f94:	2301      	movs	r3, #1
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e001      	b.n	8003f9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f9e:	f001 f8f1 	bl	8005184 <vPortExitCritical>

	return xReturn;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08e      	sub	sp, #56	; 0x38
 8003fb0:	af04      	add	r7, sp, #16
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	623b      	str	r3, [r7, #32]
}
 8003fd2:	bf00      	nop
 8003fd4:	e7fe      	b.n	8003fd4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10a      	bne.n	8003ff2 <xTaskCreateStatic+0x46>
	__asm volatile
 8003fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe0:	f383 8811 	msr	BASEPRI, r3
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	61fb      	str	r3, [r7, #28]
}
 8003fee:	bf00      	nop
 8003ff0:	e7fe      	b.n	8003ff0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ff2:	23a0      	movs	r3, #160	; 0xa0
 8003ff4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2ba0      	cmp	r3, #160	; 0xa0
 8003ffa:	d00a      	beq.n	8004012 <xTaskCreateStatic+0x66>
	__asm volatile
 8003ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004000:	f383 8811 	msr	BASEPRI, r3
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	61bb      	str	r3, [r7, #24]
}
 800400e:	bf00      	nop
 8004010:	e7fe      	b.n	8004010 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004012:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004016:	2b00      	cmp	r3, #0
 8004018:	d01e      	beq.n	8004058 <xTaskCreateStatic+0xac>
 800401a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401c:	2b00      	cmp	r3, #0
 800401e:	d01b      	beq.n	8004058 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004028:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	2202      	movs	r2, #2
 800402e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004032:	2300      	movs	r3, #0
 8004034:	9303      	str	r3, [sp, #12]
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	9302      	str	r3, [sp, #8]
 800403a:	f107 0314 	add.w	r3, r7, #20
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f850 	bl	80040f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004050:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004052:	f000 f8eb 	bl	800422c <prvAddNewTaskToReadyList>
 8004056:	e001      	b.n	800405c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800405c:	697b      	ldr	r3, [r7, #20]
	}
 800405e:	4618      	mov	r0, r3
 8004060:	3728      	adds	r7, #40	; 0x28
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004066:	b580      	push	{r7, lr}
 8004068:	b08c      	sub	sp, #48	; 0x30
 800406a:	af04      	add	r7, sp, #16
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	603b      	str	r3, [r7, #0]
 8004072:	4613      	mov	r3, r2
 8004074:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4618      	mov	r0, r3
 800407c:	f001 f934 	bl	80052e8 <pvPortMalloc>
 8004080:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00e      	beq.n	80040a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004088:	20a0      	movs	r0, #160	; 0xa0
 800408a:	f001 f92d 	bl	80052e8 <pvPortMalloc>
 800408e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
 800409c:	e005      	b.n	80040aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800409e:	6978      	ldr	r0, [r7, #20]
 80040a0:	f001 f9ee 	bl	8005480 <vPortFree>
 80040a4:	e001      	b.n	80040aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d017      	beq.n	80040e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040b8:	88fa      	ldrh	r2, [r7, #6]
 80040ba:	2300      	movs	r3, #0
 80040bc:	9303      	str	r3, [sp, #12]
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	9302      	str	r3, [sp, #8]
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c4:	9301      	str	r3, [sp, #4]
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 f80e 	bl	80040f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040d4:	69f8      	ldr	r0, [r7, #28]
 80040d6:	f000 f8a9 	bl	800422c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040da:	2301      	movs	r3, #1
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	e002      	b.n	80040e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040e0:	f04f 33ff 	mov.w	r3, #4294967295
 80040e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040e6:	69bb      	ldr	r3, [r7, #24]
	}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3720      	adds	r7, #32
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004108:	3b01      	subs	r3, #1
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	f023 0307 	bic.w	r3, r3, #7
 8004116:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	617b      	str	r3, [r7, #20]
}
 8004134:	bf00      	nop
 8004136:	e7fe      	b.n	8004136 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d01f      	beq.n	800417e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	e012      	b.n	800416a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	7819      	ldrb	r1, [r3, #0]
 800414c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	4413      	add	r3, r2
 8004152:	3334      	adds	r3, #52	; 0x34
 8004154:	460a      	mov	r2, r1
 8004156:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	4413      	add	r3, r2
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d006      	beq.n	8004172 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	3301      	adds	r3, #1
 8004168:	61fb      	str	r3, [r7, #28]
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	2b0f      	cmp	r3, #15
 800416e:	d9e9      	bls.n	8004144 <prvInitialiseNewTask+0x54>
 8004170:	e000      	b.n	8004174 <prvInitialiseNewTask+0x84>
			{
				break;
 8004172:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800417c:	e003      	b.n	8004186 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	2b06      	cmp	r3, #6
 800418a:	d901      	bls.n	8004190 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800418c:	2306      	movs	r3, #6
 800418e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004194:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800419a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	2200      	movs	r2, #0
 80041a0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	3304      	adds	r3, #4
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff fb13 	bl	80037d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ae:	3318      	adds	r3, #24
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff fb0e 	bl	80037d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041be:	f1c3 0207 	rsb	r2, r3, #7
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041de:	334c      	adds	r3, #76	; 0x4c
 80041e0:	224c      	movs	r2, #76	; 0x4c
 80041e2:	2100      	movs	r1, #0
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 fa69 	bl	80056bc <memset>
 80041ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ec:	4a0c      	ldr	r2, [pc, #48]	; (8004220 <prvInitialiseNewTask+0x130>)
 80041ee:	651a      	str	r2, [r3, #80]	; 0x50
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	4a0c      	ldr	r2, [pc, #48]	; (8004224 <prvInitialiseNewTask+0x134>)
 80041f4:	655a      	str	r2, [r3, #84]	; 0x54
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	4a0b      	ldr	r2, [pc, #44]	; (8004228 <prvInitialiseNewTask+0x138>)
 80041fa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	68f9      	ldr	r1, [r7, #12]
 8004200:	69b8      	ldr	r0, [r7, #24]
 8004202:	f000 fe5f 	bl	8004ec4 <pxPortInitialiseStack>
 8004206:	4602      	mov	r2, r0
 8004208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800420c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004216:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004218:	bf00      	nop
 800421a:	3720      	adds	r7, #32
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20004210 	.word	0x20004210
 8004224:	20004278 	.word	0x20004278
 8004228:	200042e0 	.word	0x200042e0

0800422c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004234:	f000 ff76 	bl	8005124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004238:	4b2a      	ldr	r3, [pc, #168]	; (80042e4 <prvAddNewTaskToReadyList+0xb8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3301      	adds	r3, #1
 800423e:	4a29      	ldr	r2, [pc, #164]	; (80042e4 <prvAddNewTaskToReadyList+0xb8>)
 8004240:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004242:	4b29      	ldr	r3, [pc, #164]	; (80042e8 <prvAddNewTaskToReadyList+0xbc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800424a:	4a27      	ldr	r2, [pc, #156]	; (80042e8 <prvAddNewTaskToReadyList+0xbc>)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004250:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <prvAddNewTaskToReadyList+0xb8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d110      	bne.n	800427a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004258:	f000 fc68 	bl	8004b2c <prvInitialiseTaskLists>
 800425c:	e00d      	b.n	800427a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800425e:	4b23      	ldr	r3, [pc, #140]	; (80042ec <prvAddNewTaskToReadyList+0xc0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d109      	bne.n	800427a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004266:	4b20      	ldr	r3, [pc, #128]	; (80042e8 <prvAddNewTaskToReadyList+0xbc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	429a      	cmp	r2, r3
 8004272:	d802      	bhi.n	800427a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004274:	4a1c      	ldr	r2, [pc, #112]	; (80042e8 <prvAddNewTaskToReadyList+0xbc>)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800427a:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <prvAddNewTaskToReadyList+0xc4>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3301      	adds	r3, #1
 8004280:	4a1b      	ldr	r2, [pc, #108]	; (80042f0 <prvAddNewTaskToReadyList+0xc4>)
 8004282:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	2201      	movs	r2, #1
 800428a:	409a      	lsls	r2, r3
 800428c:	4b19      	ldr	r3, [pc, #100]	; (80042f4 <prvAddNewTaskToReadyList+0xc8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4313      	orrs	r3, r2
 8004292:	4a18      	ldr	r2, [pc, #96]	; (80042f4 <prvAddNewTaskToReadyList+0xc8>)
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429a:	4613      	mov	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4a15      	ldr	r2, [pc, #84]	; (80042f8 <prvAddNewTaskToReadyList+0xcc>)
 80042a4:	441a      	add	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3304      	adds	r3, #4
 80042aa:	4619      	mov	r1, r3
 80042ac:	4610      	mov	r0, r2
 80042ae:	f7ff fa9d 	bl	80037ec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80042b2:	f000 ff67 	bl	8005184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80042b6:	4b0d      	ldr	r3, [pc, #52]	; (80042ec <prvAddNewTaskToReadyList+0xc0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00e      	beq.n	80042dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042be:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <prvAddNewTaskToReadyList+0xbc>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d207      	bcs.n	80042dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <prvAddNewTaskToReadyList+0xd0>)
 80042ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	200005bc 	.word	0x200005bc
 80042e8:	200004bc 	.word	0x200004bc
 80042ec:	200005c8 	.word	0x200005c8
 80042f0:	200005d8 	.word	0x200005d8
 80042f4:	200005c4 	.word	0x200005c4
 80042f8:	200004c0 	.word	0x200004c0
 80042fc:	e000ed04 	.word	0xe000ed04

08004300 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d017      	beq.n	8004342 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004312:	4b13      	ldr	r3, [pc, #76]	; (8004360 <vTaskDelay+0x60>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <vTaskDelay+0x30>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	60bb      	str	r3, [r7, #8]
}
 800432c:	bf00      	nop
 800432e:	e7fe      	b.n	800432e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004330:	f000 f916 	bl	8004560 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004334:	2100      	movs	r1, #0
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fd5e 	bl	8004df8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800433c:	f000 f91e 	bl	800457c <xTaskResumeAll>
 8004340:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d107      	bne.n	8004358 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004348:	4b06      	ldr	r3, [pc, #24]	; (8004364 <vTaskDelay+0x64>)
 800434a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004358:	bf00      	nop
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	200005e4 	.word	0x200005e4
 8004364:	e000ed04 	.word	0xe000ed04

08004368 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004370:	f000 fed8 	bl	8005124 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d102      	bne.n	8004380 <vTaskSuspend+0x18>
 800437a:	4b3c      	ldr	r3, [pc, #240]	; (800446c <vTaskSuspend+0x104>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	e000      	b.n	8004382 <vTaskSuspend+0x1a>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3304      	adds	r3, #4
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff fa8c 	bl	80038a6 <uxListRemove>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d115      	bne.n	80043c0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004398:	4935      	ldr	r1, [pc, #212]	; (8004470 <vTaskSuspend+0x108>)
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <vTaskSuspend+0x58>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	2201      	movs	r2, #1
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	43da      	mvns	r2, r3
 80043b6:	4b2f      	ldr	r3, [pc, #188]	; (8004474 <vTaskSuspend+0x10c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4013      	ands	r3, r2
 80043bc:	4a2d      	ldr	r2, [pc, #180]	; (8004474 <vTaskSuspend+0x10c>)
 80043be:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d004      	beq.n	80043d2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3318      	adds	r3, #24
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff fa6a 	bl	80038a6 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3304      	adds	r3, #4
 80043d6:	4619      	mov	r1, r3
 80043d8:	4827      	ldr	r0, [pc, #156]	; (8004478 <vTaskSuspend+0x110>)
 80043da:	f7ff fa07 	bl	80037ec <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d103      	bne.n	80043f2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80043f2:	f000 fec7 	bl	8005184 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80043f6:	4b21      	ldr	r3, [pc, #132]	; (800447c <vTaskSuspend+0x114>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d005      	beq.n	800440a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80043fe:	f000 fe91 	bl	8005124 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004402:	f000 fc35 	bl	8004c70 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004406:	f000 febd 	bl	8005184 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800440a:	4b18      	ldr	r3, [pc, #96]	; (800446c <vTaskSuspend+0x104>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	429a      	cmp	r2, r3
 8004412:	d127      	bne.n	8004464 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8004414:	4b19      	ldr	r3, [pc, #100]	; (800447c <vTaskSuspend+0x114>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d017      	beq.n	800444c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800441c:	4b18      	ldr	r3, [pc, #96]	; (8004480 <vTaskSuspend+0x118>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <vTaskSuspend+0xd2>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	60bb      	str	r3, [r7, #8]
}
 8004436:	bf00      	nop
 8004438:	e7fe      	b.n	8004438 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800443a:	4b12      	ldr	r3, [pc, #72]	; (8004484 <vTaskSuspend+0x11c>)
 800443c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800444a:	e00b      	b.n	8004464 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800444c:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <vTaskSuspend+0x110>)
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	4b0d      	ldr	r3, [pc, #52]	; (8004488 <vTaskSuspend+0x120>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d103      	bne.n	8004460 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8004458:	4b04      	ldr	r3, [pc, #16]	; (800446c <vTaskSuspend+0x104>)
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
	}
 800445e:	e001      	b.n	8004464 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8004460:	f000 f9e0 	bl	8004824 <vTaskSwitchContext>
	}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	200004bc 	.word	0x200004bc
 8004470:	200004c0 	.word	0x200004c0
 8004474:	200005c4 	.word	0x200005c4
 8004478:	200005a8 	.word	0x200005a8
 800447c:	200005c8 	.word	0x200005c8
 8004480:	200005e4 	.word	0x200005e4
 8004484:	e000ed04 	.word	0xe000ed04
 8004488:	200005bc 	.word	0x200005bc

0800448c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08a      	sub	sp, #40	; 0x28
 8004490:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004492:	2300      	movs	r3, #0
 8004494:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004496:	2300      	movs	r3, #0
 8004498:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800449a:	463a      	mov	r2, r7
 800449c:	1d39      	adds	r1, r7, #4
 800449e:	f107 0308 	add.w	r3, r7, #8
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fc f81a 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044a8:	6839      	ldr	r1, [r7, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	9202      	str	r2, [sp, #8]
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	2300      	movs	r3, #0
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	2300      	movs	r3, #0
 80044b8:	460a      	mov	r2, r1
 80044ba:	4921      	ldr	r1, [pc, #132]	; (8004540 <vTaskStartScheduler+0xb4>)
 80044bc:	4821      	ldr	r0, [pc, #132]	; (8004544 <vTaskStartScheduler+0xb8>)
 80044be:	f7ff fd75 	bl	8003fac <xTaskCreateStatic>
 80044c2:	4603      	mov	r3, r0
 80044c4:	4a20      	ldr	r2, [pc, #128]	; (8004548 <vTaskStartScheduler+0xbc>)
 80044c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044c8:	4b1f      	ldr	r3, [pc, #124]	; (8004548 <vTaskStartScheduler+0xbc>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044d0:	2301      	movs	r3, #1
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	e001      	b.n	80044da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d11b      	bne.n	8004518 <vTaskStartScheduler+0x8c>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	613b      	str	r3, [r7, #16]
}
 80044f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044f4:	4b15      	ldr	r3, [pc, #84]	; (800454c <vTaskStartScheduler+0xc0>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	334c      	adds	r3, #76	; 0x4c
 80044fa:	4a15      	ldr	r2, [pc, #84]	; (8004550 <vTaskStartScheduler+0xc4>)
 80044fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044fe:	4b15      	ldr	r3, [pc, #84]	; (8004554 <vTaskStartScheduler+0xc8>)
 8004500:	f04f 32ff 	mov.w	r2, #4294967295
 8004504:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004506:	4b14      	ldr	r3, [pc, #80]	; (8004558 <vTaskStartScheduler+0xcc>)
 8004508:	2201      	movs	r2, #1
 800450a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800450c:	4b13      	ldr	r3, [pc, #76]	; (800455c <vTaskStartScheduler+0xd0>)
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004512:	f000 fd65 	bl	8004fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004516:	e00e      	b.n	8004536 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451e:	d10a      	bne.n	8004536 <vTaskStartScheduler+0xaa>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	60fb      	str	r3, [r7, #12]
}
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <vTaskStartScheduler+0xa8>
}
 8004536:	bf00      	nop
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	08005928 	.word	0x08005928
 8004544:	08004afd 	.word	0x08004afd
 8004548:	200005e0 	.word	0x200005e0
 800454c:	200004bc 	.word	0x200004bc
 8004550:	20000060 	.word	0x20000060
 8004554:	200005dc 	.word	0x200005dc
 8004558:	200005c8 	.word	0x200005c8
 800455c:	200005c0 	.word	0x200005c0

08004560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004564:	4b04      	ldr	r3, [pc, #16]	; (8004578 <vTaskSuspendAll+0x18>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3301      	adds	r3, #1
 800456a:	4a03      	ldr	r2, [pc, #12]	; (8004578 <vTaskSuspendAll+0x18>)
 800456c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800456e:	bf00      	nop
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	200005e4 	.word	0x200005e4

0800457c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004586:	2300      	movs	r3, #0
 8004588:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800458a:	4b41      	ldr	r3, [pc, #260]	; (8004690 <xTaskResumeAll+0x114>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10a      	bne.n	80045a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	603b      	str	r3, [r7, #0]
}
 80045a4:	bf00      	nop
 80045a6:	e7fe      	b.n	80045a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045a8:	f000 fdbc 	bl	8005124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045ac:	4b38      	ldr	r3, [pc, #224]	; (8004690 <xTaskResumeAll+0x114>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	4a37      	ldr	r2, [pc, #220]	; (8004690 <xTaskResumeAll+0x114>)
 80045b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045b6:	4b36      	ldr	r3, [pc, #216]	; (8004690 <xTaskResumeAll+0x114>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d161      	bne.n	8004682 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045be:	4b35      	ldr	r3, [pc, #212]	; (8004694 <xTaskResumeAll+0x118>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d05d      	beq.n	8004682 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045c6:	e02e      	b.n	8004626 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045c8:	4b33      	ldr	r3, [pc, #204]	; (8004698 <xTaskResumeAll+0x11c>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3318      	adds	r3, #24
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff f966 	bl	80038a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3304      	adds	r3, #4
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff f961 	bl	80038a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	2201      	movs	r2, #1
 80045ea:	409a      	lsls	r2, r3
 80045ec:	4b2b      	ldr	r3, [pc, #172]	; (800469c <xTaskResumeAll+0x120>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	4a2a      	ldr	r2, [pc, #168]	; (800469c <xTaskResumeAll+0x120>)
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4a27      	ldr	r2, [pc, #156]	; (80046a0 <xTaskResumeAll+0x124>)
 8004604:	441a      	add	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3304      	adds	r3, #4
 800460a:	4619      	mov	r1, r3
 800460c:	4610      	mov	r0, r2
 800460e:	f7ff f8ed 	bl	80037ec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004616:	4b23      	ldr	r3, [pc, #140]	; (80046a4 <xTaskResumeAll+0x128>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	429a      	cmp	r2, r3
 800461e:	d302      	bcc.n	8004626 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004620:	4b21      	ldr	r3, [pc, #132]	; (80046a8 <xTaskResumeAll+0x12c>)
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004626:	4b1c      	ldr	r3, [pc, #112]	; (8004698 <xTaskResumeAll+0x11c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1cc      	bne.n	80045c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004634:	f000 fb1c 	bl	8004c70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004638:	4b1c      	ldr	r3, [pc, #112]	; (80046ac <xTaskResumeAll+0x130>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d010      	beq.n	8004666 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004644:	f000 f836 	bl	80046b4 <xTaskIncrementTick>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800464e:	4b16      	ldr	r3, [pc, #88]	; (80046a8 <xTaskResumeAll+0x12c>)
 8004650:	2201      	movs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3b01      	subs	r3, #1
 8004658:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f1      	bne.n	8004644 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004660:	4b12      	ldr	r3, [pc, #72]	; (80046ac <xTaskResumeAll+0x130>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004666:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <xTaskResumeAll+0x12c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d009      	beq.n	8004682 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800466e:	2301      	movs	r3, #1
 8004670:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004672:	4b0f      	ldr	r3, [pc, #60]	; (80046b0 <xTaskResumeAll+0x134>)
 8004674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004682:	f000 fd7f 	bl	8005184 <vPortExitCritical>

	return xAlreadyYielded;
 8004686:	68bb      	ldr	r3, [r7, #8]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	200005e4 	.word	0x200005e4
 8004694:	200005bc 	.word	0x200005bc
 8004698:	2000057c 	.word	0x2000057c
 800469c:	200005c4 	.word	0x200005c4
 80046a0:	200004c0 	.word	0x200004c0
 80046a4:	200004bc 	.word	0x200004bc
 80046a8:	200005d0 	.word	0x200005d0
 80046ac:	200005cc 	.word	0x200005cc
 80046b0:	e000ed04 	.word	0xe000ed04

080046b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046be:	4b4e      	ldr	r3, [pc, #312]	; (80047f8 <xTaskIncrementTick+0x144>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f040 808e 	bne.w	80047e4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046c8:	4b4c      	ldr	r3, [pc, #304]	; (80047fc <xTaskIncrementTick+0x148>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3301      	adds	r3, #1
 80046ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046d0:	4a4a      	ldr	r2, [pc, #296]	; (80047fc <xTaskIncrementTick+0x148>)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d120      	bne.n	800471e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80046dc:	4b48      	ldr	r3, [pc, #288]	; (8004800 <xTaskIncrementTick+0x14c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <xTaskIncrementTick+0x48>
	__asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	603b      	str	r3, [r7, #0]
}
 80046f8:	bf00      	nop
 80046fa:	e7fe      	b.n	80046fa <xTaskIncrementTick+0x46>
 80046fc:	4b40      	ldr	r3, [pc, #256]	; (8004800 <xTaskIncrementTick+0x14c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	4b40      	ldr	r3, [pc, #256]	; (8004804 <xTaskIncrementTick+0x150>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a3e      	ldr	r2, [pc, #248]	; (8004800 <xTaskIncrementTick+0x14c>)
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	4a3e      	ldr	r2, [pc, #248]	; (8004804 <xTaskIncrementTick+0x150>)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	4b3d      	ldr	r3, [pc, #244]	; (8004808 <xTaskIncrementTick+0x154>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3301      	adds	r3, #1
 8004716:	4a3c      	ldr	r2, [pc, #240]	; (8004808 <xTaskIncrementTick+0x154>)
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	f000 faa9 	bl	8004c70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800471e:	4b3b      	ldr	r3, [pc, #236]	; (800480c <xTaskIncrementTick+0x158>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	429a      	cmp	r2, r3
 8004726:	d348      	bcc.n	80047ba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004728:	4b35      	ldr	r3, [pc, #212]	; (8004800 <xTaskIncrementTick+0x14c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d104      	bne.n	800473c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004732:	4b36      	ldr	r3, [pc, #216]	; (800480c <xTaskIncrementTick+0x158>)
 8004734:	f04f 32ff 	mov.w	r2, #4294967295
 8004738:	601a      	str	r2, [r3, #0]
					break;
 800473a:	e03e      	b.n	80047ba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800473c:	4b30      	ldr	r3, [pc, #192]	; (8004800 <xTaskIncrementTick+0x14c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	429a      	cmp	r2, r3
 8004752:	d203      	bcs.n	800475c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004754:	4a2d      	ldr	r2, [pc, #180]	; (800480c <xTaskIncrementTick+0x158>)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800475a:	e02e      	b.n	80047ba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	3304      	adds	r3, #4
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff f8a0 	bl	80038a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	2b00      	cmp	r3, #0
 800476c:	d004      	beq.n	8004778 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	3318      	adds	r3, #24
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff f897 	bl	80038a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	2201      	movs	r2, #1
 800477e:	409a      	lsls	r2, r3
 8004780:	4b23      	ldr	r3, [pc, #140]	; (8004810 <xTaskIncrementTick+0x15c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4313      	orrs	r3, r2
 8004786:	4a22      	ldr	r2, [pc, #136]	; (8004810 <xTaskIncrementTick+0x15c>)
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4a1f      	ldr	r2, [pc, #124]	; (8004814 <xTaskIncrementTick+0x160>)
 8004798:	441a      	add	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	3304      	adds	r3, #4
 800479e:	4619      	mov	r1, r3
 80047a0:	4610      	mov	r0, r2
 80047a2:	f7ff f823 	bl	80037ec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047aa:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <xTaskIncrementTick+0x164>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d3b9      	bcc.n	8004728 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80047b4:	2301      	movs	r3, #1
 80047b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047b8:	e7b6      	b.n	8004728 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047ba:	4b17      	ldr	r3, [pc, #92]	; (8004818 <xTaskIncrementTick+0x164>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c0:	4914      	ldr	r1, [pc, #80]	; (8004814 <xTaskIncrementTick+0x160>)
 80047c2:	4613      	mov	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d901      	bls.n	80047d6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80047d2:	2301      	movs	r3, #1
 80047d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80047d6:	4b11      	ldr	r3, [pc, #68]	; (800481c <xTaskIncrementTick+0x168>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d007      	beq.n	80047ee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80047de:	2301      	movs	r3, #1
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	e004      	b.n	80047ee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80047e4:	4b0e      	ldr	r3, [pc, #56]	; (8004820 <xTaskIncrementTick+0x16c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3301      	adds	r3, #1
 80047ea:	4a0d      	ldr	r2, [pc, #52]	; (8004820 <xTaskIncrementTick+0x16c>)
 80047ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80047ee:	697b      	ldr	r3, [r7, #20]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	200005e4 	.word	0x200005e4
 80047fc:	200005c0 	.word	0x200005c0
 8004800:	20000574 	.word	0x20000574
 8004804:	20000578 	.word	0x20000578
 8004808:	200005d4 	.word	0x200005d4
 800480c:	200005dc 	.word	0x200005dc
 8004810:	200005c4 	.word	0x200005c4
 8004814:	200004c0 	.word	0x200004c0
 8004818:	200004bc 	.word	0x200004bc
 800481c:	200005d0 	.word	0x200005d0
 8004820:	200005cc 	.word	0x200005cc

08004824 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800482a:	4b29      	ldr	r3, [pc, #164]	; (80048d0 <vTaskSwitchContext+0xac>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004832:	4b28      	ldr	r3, [pc, #160]	; (80048d4 <vTaskSwitchContext+0xb0>)
 8004834:	2201      	movs	r2, #1
 8004836:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004838:	e044      	b.n	80048c4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800483a:	4b26      	ldr	r3, [pc, #152]	; (80048d4 <vTaskSwitchContext+0xb0>)
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004840:	4b25      	ldr	r3, [pc, #148]	; (80048d8 <vTaskSwitchContext+0xb4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	fab3 f383 	clz	r3, r3
 800484c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800484e:	7afb      	ldrb	r3, [r7, #11]
 8004850:	f1c3 031f 	rsb	r3, r3, #31
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	4921      	ldr	r1, [pc, #132]	; (80048dc <vTaskSwitchContext+0xb8>)
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	4613      	mov	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10a      	bne.n	8004880 <vTaskSwitchContext+0x5c>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	607b      	str	r3, [r7, #4]
}
 800487c:	bf00      	nop
 800487e:	e7fe      	b.n	800487e <vTaskSwitchContext+0x5a>
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	4613      	mov	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4a14      	ldr	r2, [pc, #80]	; (80048dc <vTaskSwitchContext+0xb8>)
 800488c:	4413      	add	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	605a      	str	r2, [r3, #4]
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	3308      	adds	r3, #8
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d104      	bne.n	80048b0 <vTaskSwitchContext+0x8c>
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	605a      	str	r2, [r3, #4]
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	4a0a      	ldr	r2, [pc, #40]	; (80048e0 <vTaskSwitchContext+0xbc>)
 80048b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048ba:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <vTaskSwitchContext+0xbc>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	334c      	adds	r3, #76	; 0x4c
 80048c0:	4a08      	ldr	r2, [pc, #32]	; (80048e4 <vTaskSwitchContext+0xc0>)
 80048c2:	6013      	str	r3, [r2, #0]
}
 80048c4:	bf00      	nop
 80048c6:	371c      	adds	r7, #28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	200005e4 	.word	0x200005e4
 80048d4:	200005d0 	.word	0x200005d0
 80048d8:	200005c4 	.word	0x200005c4
 80048dc:	200004c0 	.word	0x200004c0
 80048e0:	200004bc 	.word	0x200004bc
 80048e4:	20000060 	.word	0x20000060

080048e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	60fb      	str	r3, [r7, #12]
}
 800490a:	bf00      	nop
 800490c:	e7fe      	b.n	800490c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800490e:	4b07      	ldr	r3, [pc, #28]	; (800492c <vTaskPlaceOnEventList+0x44>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3318      	adds	r3, #24
 8004914:	4619      	mov	r1, r3
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fe ff8c 	bl	8003834 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800491c:	2101      	movs	r1, #1
 800491e:	6838      	ldr	r0, [r7, #0]
 8004920:	f000 fa6a 	bl	8004df8 <prvAddCurrentTaskToDelayedList>
}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	200004bc 	.word	0x200004bc

08004930 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10a      	bne.n	800495c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	60fb      	str	r3, [r7, #12]
}
 8004958:	bf00      	nop
 800495a:	e7fe      	b.n	800495a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	3318      	adds	r3, #24
 8004960:	4618      	mov	r0, r3
 8004962:	f7fe ffa0 	bl	80038a6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004966:	4b1d      	ldr	r3, [pc, #116]	; (80049dc <xTaskRemoveFromEventList+0xac>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d11c      	bne.n	80049a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	3304      	adds	r3, #4
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe ff97 	bl	80038a6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	2201      	movs	r2, #1
 800497e:	409a      	lsls	r2, r3
 8004980:	4b17      	ldr	r3, [pc, #92]	; (80049e0 <xTaskRemoveFromEventList+0xb0>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4313      	orrs	r3, r2
 8004986:	4a16      	ldr	r2, [pc, #88]	; (80049e0 <xTaskRemoveFromEventList+0xb0>)
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498e:	4613      	mov	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4a13      	ldr	r2, [pc, #76]	; (80049e4 <xTaskRemoveFromEventList+0xb4>)
 8004998:	441a      	add	r2, r3
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	3304      	adds	r3, #4
 800499e:	4619      	mov	r1, r3
 80049a0:	4610      	mov	r0, r2
 80049a2:	f7fe ff23 	bl	80037ec <vListInsertEnd>
 80049a6:	e005      	b.n	80049b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	3318      	adds	r3, #24
 80049ac:	4619      	mov	r1, r3
 80049ae:	480e      	ldr	r0, [pc, #56]	; (80049e8 <xTaskRemoveFromEventList+0xb8>)
 80049b0:	f7fe ff1c 	bl	80037ec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b8:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <xTaskRemoveFromEventList+0xbc>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	429a      	cmp	r2, r3
 80049c0:	d905      	bls.n	80049ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049c2:	2301      	movs	r3, #1
 80049c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049c6:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <xTaskRemoveFromEventList+0xc0>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	e001      	b.n	80049d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80049ce:	2300      	movs	r3, #0
 80049d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80049d2:	697b      	ldr	r3, [r7, #20]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	200005e4 	.word	0x200005e4
 80049e0:	200005c4 	.word	0x200005c4
 80049e4:	200004c0 	.word	0x200004c0
 80049e8:	2000057c 	.word	0x2000057c
 80049ec:	200004bc 	.word	0x200004bc
 80049f0:	200005d0 	.word	0x200005d0

080049f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049fc:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <vTaskInternalSetTimeOutState+0x24>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a04:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <vTaskInternalSetTimeOutState+0x28>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	605a      	str	r2, [r3, #4]
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	200005d4 	.word	0x200005d4
 8004a1c:	200005c0 	.word	0x200005c0

08004a20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	613b      	str	r3, [r7, #16]
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	60fb      	str	r3, [r7, #12]
}
 8004a5e:	bf00      	nop
 8004a60:	e7fe      	b.n	8004a60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004a62:	f000 fb5f 	bl	8005124 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a66:	4b1d      	ldr	r3, [pc, #116]	; (8004adc <xTaskCheckForTimeOut+0xbc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7e:	d102      	bne.n	8004a86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61fb      	str	r3, [r7, #28]
 8004a84:	e023      	b.n	8004ace <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <xTaskCheckForTimeOut+0xc0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d007      	beq.n	8004aa2 <xTaskCheckForTimeOut+0x82>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d302      	bcc.n	8004aa2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	e015      	b.n	8004ace <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d20b      	bcs.n	8004ac4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	1ad2      	subs	r2, r2, r3
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff ff9b 	bl	80049f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
 8004ac2:	e004      	b.n	8004ace <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004aca:	2301      	movs	r3, #1
 8004acc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ace:	f000 fb59 	bl	8005184 <vPortExitCritical>

	return xReturn;
 8004ad2:	69fb      	ldr	r3, [r7, #28]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3720      	adds	r7, #32
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	200005c0 	.word	0x200005c0
 8004ae0:	200005d4 	.word	0x200005d4

08004ae4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ae8:	4b03      	ldr	r3, [pc, #12]	; (8004af8 <vTaskMissedYield+0x14>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	601a      	str	r2, [r3, #0]
}
 8004aee:	bf00      	nop
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	200005d0 	.word	0x200005d0

08004afc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b04:	f000 f852 	bl	8004bac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <prvIdleTask+0x28>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d9f9      	bls.n	8004b04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b10:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <prvIdleTask+0x2c>)
 8004b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b20:	e7f0      	b.n	8004b04 <prvIdleTask+0x8>
 8004b22:	bf00      	nop
 8004b24:	200004c0 	.word	0x200004c0
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b32:	2300      	movs	r3, #0
 8004b34:	607b      	str	r3, [r7, #4]
 8004b36:	e00c      	b.n	8004b52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4a12      	ldr	r2, [pc, #72]	; (8004b8c <prvInitialiseTaskLists+0x60>)
 8004b44:	4413      	add	r3, r2
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe fe23 	bl	8003792 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	607b      	str	r3, [r7, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b06      	cmp	r3, #6
 8004b56:	d9ef      	bls.n	8004b38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b58:	480d      	ldr	r0, [pc, #52]	; (8004b90 <prvInitialiseTaskLists+0x64>)
 8004b5a:	f7fe fe1a 	bl	8003792 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b5e:	480d      	ldr	r0, [pc, #52]	; (8004b94 <prvInitialiseTaskLists+0x68>)
 8004b60:	f7fe fe17 	bl	8003792 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b64:	480c      	ldr	r0, [pc, #48]	; (8004b98 <prvInitialiseTaskLists+0x6c>)
 8004b66:	f7fe fe14 	bl	8003792 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b6a:	480c      	ldr	r0, [pc, #48]	; (8004b9c <prvInitialiseTaskLists+0x70>)
 8004b6c:	f7fe fe11 	bl	8003792 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b70:	480b      	ldr	r0, [pc, #44]	; (8004ba0 <prvInitialiseTaskLists+0x74>)
 8004b72:	f7fe fe0e 	bl	8003792 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b76:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <prvInitialiseTaskLists+0x78>)
 8004b78:	4a05      	ldr	r2, [pc, #20]	; (8004b90 <prvInitialiseTaskLists+0x64>)
 8004b7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <prvInitialiseTaskLists+0x7c>)
 8004b7e:	4a05      	ldr	r2, [pc, #20]	; (8004b94 <prvInitialiseTaskLists+0x68>)
 8004b80:	601a      	str	r2, [r3, #0]
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	200004c0 	.word	0x200004c0
 8004b90:	2000054c 	.word	0x2000054c
 8004b94:	20000560 	.word	0x20000560
 8004b98:	2000057c 	.word	0x2000057c
 8004b9c:	20000590 	.word	0x20000590
 8004ba0:	200005a8 	.word	0x200005a8
 8004ba4:	20000574 	.word	0x20000574
 8004ba8:	20000578 	.word	0x20000578

08004bac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bb2:	e019      	b.n	8004be8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004bb4:	f000 fab6 	bl	8005124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb8:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <prvCheckTasksWaitingTermination+0x50>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe fe6e 	bl	80038a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bca:	4b0d      	ldr	r3, [pc, #52]	; (8004c00 <prvCheckTasksWaitingTermination+0x54>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	4a0b      	ldr	r2, [pc, #44]	; (8004c00 <prvCheckTasksWaitingTermination+0x54>)
 8004bd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <prvCheckTasksWaitingTermination+0x58>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	4a0a      	ldr	r2, [pc, #40]	; (8004c04 <prvCheckTasksWaitingTermination+0x58>)
 8004bdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004bde:	f000 fad1 	bl	8005184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f810 	bl	8004c08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004be8:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <prvCheckTasksWaitingTermination+0x58>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e1      	bne.n	8004bb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000590 	.word	0x20000590
 8004c00:	200005bc 	.word	0x200005bc
 8004c04:	200005a4 	.word	0x200005a4

08004c08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	334c      	adds	r3, #76	; 0x4c
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fd59 	bl	80056cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d108      	bne.n	8004c36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fc29 	bl	8005480 <vPortFree>
				vPortFree( pxTCB );
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fc26 	bl	8005480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c34:	e018      	b.n	8004c68 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d103      	bne.n	8004c48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fc1d 	bl	8005480 <vPortFree>
	}
 8004c46:	e00f      	b.n	8004c68 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d00a      	beq.n	8004c68 <prvDeleteTCB+0x60>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	60fb      	str	r3, [r7, #12]
}
 8004c64:	bf00      	nop
 8004c66:	e7fe      	b.n	8004c66 <prvDeleteTCB+0x5e>
	}
 8004c68:	bf00      	nop
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c76:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <prvResetNextTaskUnblockTime+0x38>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d104      	bne.n	8004c8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c80:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <prvResetNextTaskUnblockTime+0x3c>)
 8004c82:	f04f 32ff 	mov.w	r2, #4294967295
 8004c86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c88:	e008      	b.n	8004c9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c8a:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <prvResetNextTaskUnblockTime+0x38>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	4a04      	ldr	r2, [pc, #16]	; (8004cac <prvResetNextTaskUnblockTime+0x3c>)
 8004c9a:	6013      	str	r3, [r2, #0]
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	20000574 	.word	0x20000574
 8004cac:	200005dc 	.word	0x200005dc

08004cb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <xTaskGetSchedulerState+0x34>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d102      	bne.n	8004cc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	607b      	str	r3, [r7, #4]
 8004cc2:	e008      	b.n	8004cd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cc4:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <xTaskGetSchedulerState+0x38>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d102      	bne.n	8004cd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	607b      	str	r3, [r7, #4]
 8004cd0:	e001      	b.n	8004cd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004cd6:	687b      	ldr	r3, [r7, #4]
	}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	200005c8 	.word	0x200005c8
 8004ce8:	200005e4 	.word	0x200005e4

08004cec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d06e      	beq.n	8004de0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d02:	4b3a      	ldr	r3, [pc, #232]	; (8004dec <xTaskPriorityDisinherit+0x100>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d00a      	beq.n	8004d22 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	60fb      	str	r3, [r7, #12]
}
 8004d1e:	bf00      	nop
 8004d20:	e7fe      	b.n	8004d20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10a      	bne.n	8004d40 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	60bb      	str	r3, [r7, #8]
}
 8004d3c:	bf00      	nop
 8004d3e:	e7fe      	b.n	8004d3e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d44:	1e5a      	subs	r2, r3, #1
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d044      	beq.n	8004de0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d140      	bne.n	8004de0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	3304      	adds	r3, #4
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe fd9f 	bl	80038a6 <uxListRemove>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d115      	bne.n	8004d9a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d72:	491f      	ldr	r1, [pc, #124]	; (8004df0 <xTaskPriorityDisinherit+0x104>)
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10a      	bne.n	8004d9a <xTaskPriorityDisinherit+0xae>
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d88:	2201      	movs	r2, #1
 8004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8e:	43da      	mvns	r2, r3
 8004d90:	4b18      	ldr	r3, [pc, #96]	; (8004df4 <xTaskPriorityDisinherit+0x108>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4013      	ands	r3, r2
 8004d96:	4a17      	ldr	r2, [pc, #92]	; (8004df4 <xTaskPriorityDisinherit+0x108>)
 8004d98:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	f1c3 0207 	rsb	r2, r3, #7
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db2:	2201      	movs	r2, #1
 8004db4:	409a      	lsls	r2, r3
 8004db6:	4b0f      	ldr	r3, [pc, #60]	; (8004df4 <xTaskPriorityDisinherit+0x108>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	4a0d      	ldr	r2, [pc, #52]	; (8004df4 <xTaskPriorityDisinherit+0x108>)
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4a08      	ldr	r2, [pc, #32]	; (8004df0 <xTaskPriorityDisinherit+0x104>)
 8004dce:	441a      	add	r2, r3
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	f7fe fd08 	bl	80037ec <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004de0:	697b      	ldr	r3, [r7, #20]
	}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	200004bc 	.word	0x200004bc
 8004df0:	200004c0 	.word	0x200004c0
 8004df4:	200005c4 	.word	0x200005c4

08004df8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e02:	4b29      	ldr	r3, [pc, #164]	; (8004ea8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e08:	4b28      	ldr	r3, [pc, #160]	; (8004eac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fe fd49 	bl	80038a6 <uxListRemove>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10b      	bne.n	8004e32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e1a:	4b24      	ldr	r3, [pc, #144]	; (8004eac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	2201      	movs	r2, #1
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	43da      	mvns	r2, r3
 8004e28:	4b21      	ldr	r3, [pc, #132]	; (8004eb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	4a20      	ldr	r2, [pc, #128]	; (8004eb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e38:	d10a      	bne.n	8004e50 <prvAddCurrentTaskToDelayedList+0x58>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d007      	beq.n	8004e50 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e40:	4b1a      	ldr	r3, [pc, #104]	; (8004eac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3304      	adds	r3, #4
 8004e46:	4619      	mov	r1, r3
 8004e48:	481a      	ldr	r0, [pc, #104]	; (8004eb4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e4a:	f7fe fccf 	bl	80037ec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e4e:	e026      	b.n	8004e9e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4413      	add	r3, r2
 8004e56:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e58:	4b14      	ldr	r3, [pc, #80]	; (8004eac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d209      	bcs.n	8004e7c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e68:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3304      	adds	r3, #4
 8004e72:	4619      	mov	r1, r3
 8004e74:	4610      	mov	r0, r2
 8004e76:	f7fe fcdd 	bl	8003834 <vListInsert>
}
 8004e7a:	e010      	b.n	8004e9e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e7c:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <prvAddCurrentTaskToDelayedList+0xc4>)
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	4b0a      	ldr	r3, [pc, #40]	; (8004eac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3304      	adds	r3, #4
 8004e86:	4619      	mov	r1, r3
 8004e88:	4610      	mov	r0, r2
 8004e8a:	f7fe fcd3 	bl	8003834 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d202      	bcs.n	8004e9e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004e98:	4a09      	ldr	r2, [pc, #36]	; (8004ec0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	6013      	str	r3, [r2, #0]
}
 8004e9e:	bf00      	nop
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	200005c0 	.word	0x200005c0
 8004eac:	200004bc 	.word	0x200004bc
 8004eb0:	200005c4 	.word	0x200005c4
 8004eb4:	200005a8 	.word	0x200005a8
 8004eb8:	20000578 	.word	0x20000578
 8004ebc:	20000574 	.word	0x20000574
 8004ec0:	200005dc 	.word	0x200005dc

08004ec4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	3b04      	subs	r3, #4
 8004ed4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3b04      	subs	r3, #4
 8004ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f023 0201 	bic.w	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3b04      	subs	r3, #4
 8004ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ef4:	4a0c      	ldr	r2, [pc, #48]	; (8004f28 <pxPortInitialiseStack+0x64>)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3b14      	subs	r3, #20
 8004efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	3b04      	subs	r3, #4
 8004f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f06f 0202 	mvn.w	r2, #2
 8004f12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	3b20      	subs	r3, #32
 8004f18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	08004f2d 	.word	0x08004f2d

08004f2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f36:	4b12      	ldr	r3, [pc, #72]	; (8004f80 <prvTaskExitError+0x54>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3e:	d00a      	beq.n	8004f56 <prvTaskExitError+0x2a>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	60fb      	str	r3, [r7, #12]
}
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <prvTaskExitError+0x28>
	__asm volatile
 8004f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	60bb      	str	r3, [r7, #8]
}
 8004f68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f6a:	bf00      	nop
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0fc      	beq.n	8004f6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f72:	bf00      	nop
 8004f74:	bf00      	nop
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	20000010 	.word	0x20000010
	...

08004f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f90:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <pxCurrentTCBConst2>)
 8004f92:	6819      	ldr	r1, [r3, #0]
 8004f94:	6808      	ldr	r0, [r1, #0]
 8004f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f9a:	f380 8809 	msr	PSP, r0
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f04f 0000 	mov.w	r0, #0
 8004fa6:	f380 8811 	msr	BASEPRI, r0
 8004faa:	4770      	bx	lr
 8004fac:	f3af 8000 	nop.w

08004fb0 <pxCurrentTCBConst2>:
 8004fb0:	200004bc 	.word	0x200004bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop

08004fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004fb8:	4808      	ldr	r0, [pc, #32]	; (8004fdc <prvPortStartFirstTask+0x24>)
 8004fba:	6800      	ldr	r0, [r0, #0]
 8004fbc:	6800      	ldr	r0, [r0, #0]
 8004fbe:	f380 8808 	msr	MSP, r0
 8004fc2:	f04f 0000 	mov.w	r0, #0
 8004fc6:	f380 8814 	msr	CONTROL, r0
 8004fca:	b662      	cpsie	i
 8004fcc:	b661      	cpsie	f
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	df00      	svc	0
 8004fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fda:	bf00      	nop
 8004fdc:	e000ed08 	.word	0xe000ed08

08004fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004fe6:	4b46      	ldr	r3, [pc, #280]	; (8005100 <xPortStartScheduler+0x120>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a46      	ldr	r2, [pc, #280]	; (8005104 <xPortStartScheduler+0x124>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d10a      	bne.n	8005006 <xPortStartScheduler+0x26>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	613b      	str	r3, [r7, #16]
}
 8005002:	bf00      	nop
 8005004:	e7fe      	b.n	8005004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005006:	4b3e      	ldr	r3, [pc, #248]	; (8005100 <xPortStartScheduler+0x120>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a3f      	ldr	r2, [pc, #252]	; (8005108 <xPortStartScheduler+0x128>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10a      	bne.n	8005026 <xPortStartScheduler+0x46>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	60fb      	str	r3, [r7, #12]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005026:	4b39      	ldr	r3, [pc, #228]	; (800510c <xPortStartScheduler+0x12c>)
 8005028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	b2db      	uxtb	r3, r3
 8005030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	22ff      	movs	r2, #255	; 0xff
 8005036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005040:	78fb      	ldrb	r3, [r7, #3]
 8005042:	b2db      	uxtb	r3, r3
 8005044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005048:	b2da      	uxtb	r2, r3
 800504a:	4b31      	ldr	r3, [pc, #196]	; (8005110 <xPortStartScheduler+0x130>)
 800504c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800504e:	4b31      	ldr	r3, [pc, #196]	; (8005114 <xPortStartScheduler+0x134>)
 8005050:	2207      	movs	r2, #7
 8005052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005054:	e009      	b.n	800506a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005056:	4b2f      	ldr	r3, [pc, #188]	; (8005114 <xPortStartScheduler+0x134>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3b01      	subs	r3, #1
 800505c:	4a2d      	ldr	r2, [pc, #180]	; (8005114 <xPortStartScheduler+0x134>)
 800505e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	b2db      	uxtb	r3, r3
 8005068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800506a:	78fb      	ldrb	r3, [r7, #3]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005072:	2b80      	cmp	r3, #128	; 0x80
 8005074:	d0ef      	beq.n	8005056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005076:	4b27      	ldr	r3, [pc, #156]	; (8005114 <xPortStartScheduler+0x134>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f1c3 0307 	rsb	r3, r3, #7
 800507e:	2b04      	cmp	r3, #4
 8005080:	d00a      	beq.n	8005098 <xPortStartScheduler+0xb8>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	60bb      	str	r3, [r7, #8]
}
 8005094:	bf00      	nop
 8005096:	e7fe      	b.n	8005096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005098:	4b1e      	ldr	r3, [pc, #120]	; (8005114 <xPortStartScheduler+0x134>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	4a1d      	ldr	r2, [pc, #116]	; (8005114 <xPortStartScheduler+0x134>)
 80050a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050a2:	4b1c      	ldr	r3, [pc, #112]	; (8005114 <xPortStartScheduler+0x134>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050aa:	4a1a      	ldr	r2, [pc, #104]	; (8005114 <xPortStartScheduler+0x134>)
 80050ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050b6:	4b18      	ldr	r3, [pc, #96]	; (8005118 <xPortStartScheduler+0x138>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a17      	ldr	r2, [pc, #92]	; (8005118 <xPortStartScheduler+0x138>)
 80050bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050c2:	4b15      	ldr	r3, [pc, #84]	; (8005118 <xPortStartScheduler+0x138>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a14      	ldr	r2, [pc, #80]	; (8005118 <xPortStartScheduler+0x138>)
 80050c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050ce:	f000 f8dd 	bl	800528c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050d2:	4b12      	ldr	r3, [pc, #72]	; (800511c <xPortStartScheduler+0x13c>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050d8:	f000 f8fc 	bl	80052d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050dc:	4b10      	ldr	r3, [pc, #64]	; (8005120 <xPortStartScheduler+0x140>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a0f      	ldr	r2, [pc, #60]	; (8005120 <xPortStartScheduler+0x140>)
 80050e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80050e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050e8:	f7ff ff66 	bl	8004fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050ec:	f7ff fb9a 	bl	8004824 <vTaskSwitchContext>
	prvTaskExitError();
 80050f0:	f7ff ff1c 	bl	8004f2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	e000ed00 	.word	0xe000ed00
 8005104:	410fc271 	.word	0x410fc271
 8005108:	410fc270 	.word	0x410fc270
 800510c:	e000e400 	.word	0xe000e400
 8005110:	200005e8 	.word	0x200005e8
 8005114:	200005ec 	.word	0x200005ec
 8005118:	e000ed20 	.word	0xe000ed20
 800511c:	20000010 	.word	0x20000010
 8005120:	e000ef34 	.word	0xe000ef34

08005124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
	__asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	607b      	str	r3, [r7, #4]
}
 800513c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800513e:	4b0f      	ldr	r3, [pc, #60]	; (800517c <vPortEnterCritical+0x58>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3301      	adds	r3, #1
 8005144:	4a0d      	ldr	r2, [pc, #52]	; (800517c <vPortEnterCritical+0x58>)
 8005146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005148:	4b0c      	ldr	r3, [pc, #48]	; (800517c <vPortEnterCritical+0x58>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d10f      	bne.n	8005170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005150:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <vPortEnterCritical+0x5c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <vPortEnterCritical+0x4c>
	__asm volatile
 800515a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	603b      	str	r3, [r7, #0]
}
 800516c:	bf00      	nop
 800516e:	e7fe      	b.n	800516e <vPortEnterCritical+0x4a>
	}
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	20000010 	.word	0x20000010
 8005180:	e000ed04 	.word	0xe000ed04

08005184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800518a:	4b12      	ldr	r3, [pc, #72]	; (80051d4 <vPortExitCritical+0x50>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10a      	bne.n	80051a8 <vPortExitCritical+0x24>
	__asm volatile
 8005192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	607b      	str	r3, [r7, #4]
}
 80051a4:	bf00      	nop
 80051a6:	e7fe      	b.n	80051a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051a8:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <vPortExitCritical+0x50>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	4a09      	ldr	r2, [pc, #36]	; (80051d4 <vPortExitCritical+0x50>)
 80051b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051b2:	4b08      	ldr	r3, [pc, #32]	; (80051d4 <vPortExitCritical+0x50>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d105      	bne.n	80051c6 <vPortExitCritical+0x42>
 80051ba:	2300      	movs	r3, #0
 80051bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000010 	.word	0x20000010
	...

080051e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051e0:	f3ef 8009 	mrs	r0, PSP
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	4b15      	ldr	r3, [pc, #84]	; (8005240 <pxCurrentTCBConst>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	f01e 0f10 	tst.w	lr, #16
 80051f0:	bf08      	it	eq
 80051f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fa:	6010      	str	r0, [r2, #0]
 80051fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005204:	f380 8811 	msr	BASEPRI, r0
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f7ff fb08 	bl	8004824 <vTaskSwitchContext>
 8005214:	f04f 0000 	mov.w	r0, #0
 8005218:	f380 8811 	msr	BASEPRI, r0
 800521c:	bc09      	pop	{r0, r3}
 800521e:	6819      	ldr	r1, [r3, #0]
 8005220:	6808      	ldr	r0, [r1, #0]
 8005222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005226:	f01e 0f10 	tst.w	lr, #16
 800522a:	bf08      	it	eq
 800522c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005230:	f380 8809 	msr	PSP, r0
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	f3af 8000 	nop.w

08005240 <pxCurrentTCBConst>:
 8005240:	200004bc 	.word	0x200004bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop

08005248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	607b      	str	r3, [r7, #4]
}
 8005260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005262:	f7ff fa27 	bl	80046b4 <xTaskIncrementTick>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800526c:	4b06      	ldr	r3, [pc, #24]	; (8005288 <SysTick_Handler+0x40>)
 800526e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	2300      	movs	r3, #0
 8005276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	f383 8811 	msr	BASEPRI, r3
}
 800527e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005280:	bf00      	nop
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	e000ed04 	.word	0xe000ed04

0800528c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <vPortSetupTimerInterrupt+0x34>)
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005296:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <vPortSetupTimerInterrupt+0x38>)
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <vPortSetupTimerInterrupt+0x3c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a0a      	ldr	r2, [pc, #40]	; (80052cc <vPortSetupTimerInterrupt+0x40>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	099b      	lsrs	r3, r3, #6
 80052a8:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <vPortSetupTimerInterrupt+0x44>)
 80052aa:	3b01      	subs	r3, #1
 80052ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052ae:	4b04      	ldr	r3, [pc, #16]	; (80052c0 <vPortSetupTimerInterrupt+0x34>)
 80052b0:	2207      	movs	r2, #7
 80052b2:	601a      	str	r2, [r3, #0]
}
 80052b4:	bf00      	nop
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	e000e010 	.word	0xe000e010
 80052c4:	e000e018 	.word	0xe000e018
 80052c8:	20000004 	.word	0x20000004
 80052cc:	10624dd3 	.word	0x10624dd3
 80052d0:	e000e014 	.word	0xe000e014

080052d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80052e4 <vPortEnableVFP+0x10>
 80052d8:	6801      	ldr	r1, [r0, #0]
 80052da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052de:	6001      	str	r1, [r0, #0]
 80052e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052e2:	bf00      	nop
 80052e4:	e000ed88 	.word	0xe000ed88

080052e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08a      	sub	sp, #40	; 0x28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052f4:	f7ff f934 	bl	8004560 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052f8:	4b5b      	ldr	r3, [pc, #364]	; (8005468 <pvPortMalloc+0x180>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005300:	f000 f920 	bl	8005544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005304:	4b59      	ldr	r3, [pc, #356]	; (800546c <pvPortMalloc+0x184>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4013      	ands	r3, r2
 800530c:	2b00      	cmp	r3, #0
 800530e:	f040 8093 	bne.w	8005438 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01d      	beq.n	8005354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005318:	2208      	movs	r2, #8
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4413      	add	r3, r2
 800531e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	2b00      	cmp	r3, #0
 8005328:	d014      	beq.n	8005354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f023 0307 	bic.w	r3, r3, #7
 8005330:	3308      	adds	r3, #8
 8005332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <pvPortMalloc+0x6c>
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	617b      	str	r3, [r7, #20]
}
 8005350:	bf00      	nop
 8005352:	e7fe      	b.n	8005352 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d06e      	beq.n	8005438 <pvPortMalloc+0x150>
 800535a:	4b45      	ldr	r3, [pc, #276]	; (8005470 <pvPortMalloc+0x188>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	429a      	cmp	r2, r3
 8005362:	d869      	bhi.n	8005438 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005364:	4b43      	ldr	r3, [pc, #268]	; (8005474 <pvPortMalloc+0x18c>)
 8005366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005368:	4b42      	ldr	r3, [pc, #264]	; (8005474 <pvPortMalloc+0x18c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800536e:	e004      	b.n	800537a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	429a      	cmp	r2, r3
 8005382:	d903      	bls.n	800538c <pvPortMalloc+0xa4>
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1f1      	bne.n	8005370 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800538c:	4b36      	ldr	r3, [pc, #216]	; (8005468 <pvPortMalloc+0x180>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005392:	429a      	cmp	r2, r3
 8005394:	d050      	beq.n	8005438 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2208      	movs	r2, #8
 800539c:	4413      	add	r3, r2
 800539e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	1ad2      	subs	r2, r2, r3
 80053b0:	2308      	movs	r3, #8
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d91f      	bls.n	80053f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4413      	add	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <pvPortMalloc+0xf8>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	613b      	str	r3, [r7, #16]
}
 80053dc:	bf00      	nop
 80053de:	e7fe      	b.n	80053de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	1ad2      	subs	r2, r2, r3
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053f2:	69b8      	ldr	r0, [r7, #24]
 80053f4:	f000 f908 	bl	8005608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053f8:	4b1d      	ldr	r3, [pc, #116]	; (8005470 <pvPortMalloc+0x188>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	4a1b      	ldr	r2, [pc, #108]	; (8005470 <pvPortMalloc+0x188>)
 8005404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005406:	4b1a      	ldr	r3, [pc, #104]	; (8005470 <pvPortMalloc+0x188>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4b1b      	ldr	r3, [pc, #108]	; (8005478 <pvPortMalloc+0x190>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d203      	bcs.n	800541a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005412:	4b17      	ldr	r3, [pc, #92]	; (8005470 <pvPortMalloc+0x188>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a18      	ldr	r2, [pc, #96]	; (8005478 <pvPortMalloc+0x190>)
 8005418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	4b13      	ldr	r3, [pc, #76]	; (800546c <pvPortMalloc+0x184>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	431a      	orrs	r2, r3
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800542e:	4b13      	ldr	r3, [pc, #76]	; (800547c <pvPortMalloc+0x194>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3301      	adds	r3, #1
 8005434:	4a11      	ldr	r2, [pc, #68]	; (800547c <pvPortMalloc+0x194>)
 8005436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005438:	f7ff f8a0 	bl	800457c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <pvPortMalloc+0x174>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	60fb      	str	r3, [r7, #12]
}
 8005458:	bf00      	nop
 800545a:	e7fe      	b.n	800545a <pvPortMalloc+0x172>
	return pvReturn;
 800545c:	69fb      	ldr	r3, [r7, #28]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3728      	adds	r7, #40	; 0x28
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	200041f8 	.word	0x200041f8
 800546c:	2000420c 	.word	0x2000420c
 8005470:	200041fc 	.word	0x200041fc
 8005474:	200041f0 	.word	0x200041f0
 8005478:	20004200 	.word	0x20004200
 800547c:	20004204 	.word	0x20004204

08005480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d04d      	beq.n	800552e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005492:	2308      	movs	r3, #8
 8005494:	425b      	negs	r3, r3
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4413      	add	r3, r2
 800549a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	4b24      	ldr	r3, [pc, #144]	; (8005538 <vPortFree+0xb8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4013      	ands	r3, r2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10a      	bne.n	80054c4 <vPortFree+0x44>
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	60fb      	str	r3, [r7, #12]
}
 80054c0:	bf00      	nop
 80054c2:	e7fe      	b.n	80054c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <vPortFree+0x62>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	60bb      	str	r3, [r7, #8]
}
 80054de:	bf00      	nop
 80054e0:	e7fe      	b.n	80054e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	4b14      	ldr	r3, [pc, #80]	; (8005538 <vPortFree+0xb8>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4013      	ands	r3, r2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01e      	beq.n	800552e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d11a      	bne.n	800552e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	4b0e      	ldr	r3, [pc, #56]	; (8005538 <vPortFree+0xb8>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	43db      	mvns	r3, r3
 8005502:	401a      	ands	r2, r3
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005508:	f7ff f82a 	bl	8004560 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	4b0a      	ldr	r3, [pc, #40]	; (800553c <vPortFree+0xbc>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4413      	add	r3, r2
 8005516:	4a09      	ldr	r2, [pc, #36]	; (800553c <vPortFree+0xbc>)
 8005518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800551a:	6938      	ldr	r0, [r7, #16]
 800551c:	f000 f874 	bl	8005608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005520:	4b07      	ldr	r3, [pc, #28]	; (8005540 <vPortFree+0xc0>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3301      	adds	r3, #1
 8005526:	4a06      	ldr	r2, [pc, #24]	; (8005540 <vPortFree+0xc0>)
 8005528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800552a:	f7ff f827 	bl	800457c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800552e:	bf00      	nop
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	2000420c 	.word	0x2000420c
 800553c:	200041fc 	.word	0x200041fc
 8005540:	20004208 	.word	0x20004208

08005544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800554a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800554e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005550:	4b27      	ldr	r3, [pc, #156]	; (80055f0 <prvHeapInit+0xac>)
 8005552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00c      	beq.n	8005578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3307      	adds	r3, #7
 8005562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0307 	bic.w	r3, r3, #7
 800556a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	4a1f      	ldr	r2, [pc, #124]	; (80055f0 <prvHeapInit+0xac>)
 8005574:	4413      	add	r3, r2
 8005576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800557c:	4a1d      	ldr	r2, [pc, #116]	; (80055f4 <prvHeapInit+0xb0>)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005582:	4b1c      	ldr	r3, [pc, #112]	; (80055f4 <prvHeapInit+0xb0>)
 8005584:	2200      	movs	r2, #0
 8005586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	4413      	add	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005590:	2208      	movs	r2, #8
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0307 	bic.w	r3, r3, #7
 800559e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4a15      	ldr	r2, [pc, #84]	; (80055f8 <prvHeapInit+0xb4>)
 80055a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055a6:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <prvHeapInit+0xb4>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2200      	movs	r2, #0
 80055ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055ae:	4b12      	ldr	r3, [pc, #72]	; (80055f8 <prvHeapInit+0xb4>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	1ad2      	subs	r2, r2, r3
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055c4:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <prvHeapInit+0xb4>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	4a0a      	ldr	r2, [pc, #40]	; (80055fc <prvHeapInit+0xb8>)
 80055d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	4a09      	ldr	r2, [pc, #36]	; (8005600 <prvHeapInit+0xbc>)
 80055da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055dc:	4b09      	ldr	r3, [pc, #36]	; (8005604 <prvHeapInit+0xc0>)
 80055de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055e2:	601a      	str	r2, [r3, #0]
}
 80055e4:	bf00      	nop
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	200005f0 	.word	0x200005f0
 80055f4:	200041f0 	.word	0x200041f0
 80055f8:	200041f8 	.word	0x200041f8
 80055fc:	20004200 	.word	0x20004200
 8005600:	200041fc 	.word	0x200041fc
 8005604:	2000420c 	.word	0x2000420c

08005608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005610:	4b28      	ldr	r3, [pc, #160]	; (80056b4 <prvInsertBlockIntoFreeList+0xac>)
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	e002      	b.n	800561c <prvInsertBlockIntoFreeList+0x14>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	429a      	cmp	r2, r3
 8005624:	d8f7      	bhi.n	8005616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	4413      	add	r3, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	429a      	cmp	r2, r3
 8005636:	d108      	bne.n	800564a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	441a      	add	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	441a      	add	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d118      	bne.n	8005690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	4b15      	ldr	r3, [pc, #84]	; (80056b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d00d      	beq.n	8005686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	441a      	add	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	e008      	b.n	8005698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005686:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	e003      	b.n	8005698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	429a      	cmp	r2, r3
 800569e:	d002      	beq.n	80056a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	200041f0 	.word	0x200041f0
 80056b8:	200041f8 	.word	0x200041f8

080056bc <memset>:
 80056bc:	4402      	add	r2, r0
 80056be:	4603      	mov	r3, r0
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d100      	bne.n	80056c6 <memset+0xa>
 80056c4:	4770      	bx	lr
 80056c6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ca:	e7f9      	b.n	80056c0 <memset+0x4>

080056cc <_reclaim_reent>:
 80056cc:	4b29      	ldr	r3, [pc, #164]	; (8005774 <_reclaim_reent+0xa8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4283      	cmp	r3, r0
 80056d2:	b570      	push	{r4, r5, r6, lr}
 80056d4:	4604      	mov	r4, r0
 80056d6:	d04b      	beq.n	8005770 <_reclaim_reent+0xa4>
 80056d8:	69c3      	ldr	r3, [r0, #28]
 80056da:	b143      	cbz	r3, 80056ee <_reclaim_reent+0x22>
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d144      	bne.n	800576c <_reclaim_reent+0xa0>
 80056e2:	69e3      	ldr	r3, [r4, #28]
 80056e4:	6819      	ldr	r1, [r3, #0]
 80056e6:	b111      	cbz	r1, 80056ee <_reclaim_reent+0x22>
 80056e8:	4620      	mov	r0, r4
 80056ea:	f000 f879 	bl	80057e0 <_free_r>
 80056ee:	6961      	ldr	r1, [r4, #20]
 80056f0:	b111      	cbz	r1, 80056f8 <_reclaim_reent+0x2c>
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 f874 	bl	80057e0 <_free_r>
 80056f8:	69e1      	ldr	r1, [r4, #28]
 80056fa:	b111      	cbz	r1, 8005702 <_reclaim_reent+0x36>
 80056fc:	4620      	mov	r0, r4
 80056fe:	f000 f86f 	bl	80057e0 <_free_r>
 8005702:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005704:	b111      	cbz	r1, 800570c <_reclaim_reent+0x40>
 8005706:	4620      	mov	r0, r4
 8005708:	f000 f86a 	bl	80057e0 <_free_r>
 800570c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800570e:	b111      	cbz	r1, 8005716 <_reclaim_reent+0x4a>
 8005710:	4620      	mov	r0, r4
 8005712:	f000 f865 	bl	80057e0 <_free_r>
 8005716:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005718:	b111      	cbz	r1, 8005720 <_reclaim_reent+0x54>
 800571a:	4620      	mov	r0, r4
 800571c:	f000 f860 	bl	80057e0 <_free_r>
 8005720:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005722:	b111      	cbz	r1, 800572a <_reclaim_reent+0x5e>
 8005724:	4620      	mov	r0, r4
 8005726:	f000 f85b 	bl	80057e0 <_free_r>
 800572a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800572c:	b111      	cbz	r1, 8005734 <_reclaim_reent+0x68>
 800572e:	4620      	mov	r0, r4
 8005730:	f000 f856 	bl	80057e0 <_free_r>
 8005734:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005736:	b111      	cbz	r1, 800573e <_reclaim_reent+0x72>
 8005738:	4620      	mov	r0, r4
 800573a:	f000 f851 	bl	80057e0 <_free_r>
 800573e:	6a23      	ldr	r3, [r4, #32]
 8005740:	b1b3      	cbz	r3, 8005770 <_reclaim_reent+0xa4>
 8005742:	4620      	mov	r0, r4
 8005744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005748:	4718      	bx	r3
 800574a:	5949      	ldr	r1, [r1, r5]
 800574c:	b941      	cbnz	r1, 8005760 <_reclaim_reent+0x94>
 800574e:	3504      	adds	r5, #4
 8005750:	69e3      	ldr	r3, [r4, #28]
 8005752:	2d80      	cmp	r5, #128	; 0x80
 8005754:	68d9      	ldr	r1, [r3, #12]
 8005756:	d1f8      	bne.n	800574a <_reclaim_reent+0x7e>
 8005758:	4620      	mov	r0, r4
 800575a:	f000 f841 	bl	80057e0 <_free_r>
 800575e:	e7c0      	b.n	80056e2 <_reclaim_reent+0x16>
 8005760:	680e      	ldr	r6, [r1, #0]
 8005762:	4620      	mov	r0, r4
 8005764:	f000 f83c 	bl	80057e0 <_free_r>
 8005768:	4631      	mov	r1, r6
 800576a:	e7ef      	b.n	800574c <_reclaim_reent+0x80>
 800576c:	2500      	movs	r5, #0
 800576e:	e7ef      	b.n	8005750 <_reclaim_reent+0x84>
 8005770:	bd70      	pop	{r4, r5, r6, pc}
 8005772:	bf00      	nop
 8005774:	20000060 	.word	0x20000060

08005778 <__libc_init_array>:
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	4d0d      	ldr	r5, [pc, #52]	; (80057b0 <__libc_init_array+0x38>)
 800577c:	4c0d      	ldr	r4, [pc, #52]	; (80057b4 <__libc_init_array+0x3c>)
 800577e:	1b64      	subs	r4, r4, r5
 8005780:	10a4      	asrs	r4, r4, #2
 8005782:	2600      	movs	r6, #0
 8005784:	42a6      	cmp	r6, r4
 8005786:	d109      	bne.n	800579c <__libc_init_array+0x24>
 8005788:	4d0b      	ldr	r5, [pc, #44]	; (80057b8 <__libc_init_array+0x40>)
 800578a:	4c0c      	ldr	r4, [pc, #48]	; (80057bc <__libc_init_array+0x44>)
 800578c:	f000 f880 	bl	8005890 <_init>
 8005790:	1b64      	subs	r4, r4, r5
 8005792:	10a4      	asrs	r4, r4, #2
 8005794:	2600      	movs	r6, #0
 8005796:	42a6      	cmp	r6, r4
 8005798:	d105      	bne.n	80057a6 <__libc_init_array+0x2e>
 800579a:	bd70      	pop	{r4, r5, r6, pc}
 800579c:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a0:	4798      	blx	r3
 80057a2:	3601      	adds	r6, #1
 80057a4:	e7ee      	b.n	8005784 <__libc_init_array+0xc>
 80057a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057aa:	4798      	blx	r3
 80057ac:	3601      	adds	r6, #1
 80057ae:	e7f2      	b.n	8005796 <__libc_init_array+0x1e>
 80057b0:	08005950 	.word	0x08005950
 80057b4:	08005950 	.word	0x08005950
 80057b8:	08005950 	.word	0x08005950
 80057bc:	08005954 	.word	0x08005954

080057c0 <__retarget_lock_acquire_recursive>:
 80057c0:	4770      	bx	lr

080057c2 <__retarget_lock_release_recursive>:
 80057c2:	4770      	bx	lr

080057c4 <memcpy>:
 80057c4:	440a      	add	r2, r1
 80057c6:	4291      	cmp	r1, r2
 80057c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80057cc:	d100      	bne.n	80057d0 <memcpy+0xc>
 80057ce:	4770      	bx	lr
 80057d0:	b510      	push	{r4, lr}
 80057d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057da:	4291      	cmp	r1, r2
 80057dc:	d1f9      	bne.n	80057d2 <memcpy+0xe>
 80057de:	bd10      	pop	{r4, pc}

080057e0 <_free_r>:
 80057e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057e2:	2900      	cmp	r1, #0
 80057e4:	d044      	beq.n	8005870 <_free_r+0x90>
 80057e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ea:	9001      	str	r0, [sp, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f1a1 0404 	sub.w	r4, r1, #4
 80057f2:	bfb8      	it	lt
 80057f4:	18e4      	addlt	r4, r4, r3
 80057f6:	f000 f83f 	bl	8005878 <__malloc_lock>
 80057fa:	4a1e      	ldr	r2, [pc, #120]	; (8005874 <_free_r+0x94>)
 80057fc:	9801      	ldr	r0, [sp, #4]
 80057fe:	6813      	ldr	r3, [r2, #0]
 8005800:	b933      	cbnz	r3, 8005810 <_free_r+0x30>
 8005802:	6063      	str	r3, [r4, #4]
 8005804:	6014      	str	r4, [r2, #0]
 8005806:	b003      	add	sp, #12
 8005808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800580c:	f000 b83a 	b.w	8005884 <__malloc_unlock>
 8005810:	42a3      	cmp	r3, r4
 8005812:	d908      	bls.n	8005826 <_free_r+0x46>
 8005814:	6825      	ldr	r5, [r4, #0]
 8005816:	1961      	adds	r1, r4, r5
 8005818:	428b      	cmp	r3, r1
 800581a:	bf01      	itttt	eq
 800581c:	6819      	ldreq	r1, [r3, #0]
 800581e:	685b      	ldreq	r3, [r3, #4]
 8005820:	1949      	addeq	r1, r1, r5
 8005822:	6021      	streq	r1, [r4, #0]
 8005824:	e7ed      	b.n	8005802 <_free_r+0x22>
 8005826:	461a      	mov	r2, r3
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	b10b      	cbz	r3, 8005830 <_free_r+0x50>
 800582c:	42a3      	cmp	r3, r4
 800582e:	d9fa      	bls.n	8005826 <_free_r+0x46>
 8005830:	6811      	ldr	r1, [r2, #0]
 8005832:	1855      	adds	r5, r2, r1
 8005834:	42a5      	cmp	r5, r4
 8005836:	d10b      	bne.n	8005850 <_free_r+0x70>
 8005838:	6824      	ldr	r4, [r4, #0]
 800583a:	4421      	add	r1, r4
 800583c:	1854      	adds	r4, r2, r1
 800583e:	42a3      	cmp	r3, r4
 8005840:	6011      	str	r1, [r2, #0]
 8005842:	d1e0      	bne.n	8005806 <_free_r+0x26>
 8005844:	681c      	ldr	r4, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	6053      	str	r3, [r2, #4]
 800584a:	440c      	add	r4, r1
 800584c:	6014      	str	r4, [r2, #0]
 800584e:	e7da      	b.n	8005806 <_free_r+0x26>
 8005850:	d902      	bls.n	8005858 <_free_r+0x78>
 8005852:	230c      	movs	r3, #12
 8005854:	6003      	str	r3, [r0, #0]
 8005856:	e7d6      	b.n	8005806 <_free_r+0x26>
 8005858:	6825      	ldr	r5, [r4, #0]
 800585a:	1961      	adds	r1, r4, r5
 800585c:	428b      	cmp	r3, r1
 800585e:	bf04      	itt	eq
 8005860:	6819      	ldreq	r1, [r3, #0]
 8005862:	685b      	ldreq	r3, [r3, #4]
 8005864:	6063      	str	r3, [r4, #4]
 8005866:	bf04      	itt	eq
 8005868:	1949      	addeq	r1, r1, r5
 800586a:	6021      	streq	r1, [r4, #0]
 800586c:	6054      	str	r4, [r2, #4]
 800586e:	e7ca      	b.n	8005806 <_free_r+0x26>
 8005870:	b003      	add	sp, #12
 8005872:	bd30      	pop	{r4, r5, pc}
 8005874:	2000434c 	.word	0x2000434c

08005878 <__malloc_lock>:
 8005878:	4801      	ldr	r0, [pc, #4]	; (8005880 <__malloc_lock+0x8>)
 800587a:	f7ff bfa1 	b.w	80057c0 <__retarget_lock_acquire_recursive>
 800587e:	bf00      	nop
 8005880:	20004348 	.word	0x20004348

08005884 <__malloc_unlock>:
 8005884:	4801      	ldr	r0, [pc, #4]	; (800588c <__malloc_unlock+0x8>)
 8005886:	f7ff bf9c 	b.w	80057c2 <__retarget_lock_release_recursive>
 800588a:	bf00      	nop
 800588c:	20004348 	.word	0x20004348

08005890 <_init>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	bf00      	nop
 8005894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005896:	bc08      	pop	{r3}
 8005898:	469e      	mov	lr, r3
 800589a:	4770      	bx	lr

0800589c <_fini>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	bf00      	nop
 80058a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a2:	bc08      	pop	{r3}
 80058a4:	469e      	mov	lr, r3
 80058a6:	4770      	bx	lr
