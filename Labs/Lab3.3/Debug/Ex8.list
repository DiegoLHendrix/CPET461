
Ex8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005d78  08005d78  00015d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e18  08005e18  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08005e18  08005e18  00015e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e20  08005e20  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e20  08005e20  00015e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042e8  20000064  08005e8c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000434c  08005e8c  0002434c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017bfe  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037e2  00000000  00000000  00037cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001600  00000000  00000000  0003b4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001126  00000000  00000000  0003cab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c8f  00000000  00000000  0003dbde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a53e  00000000  00000000  0005686d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009aca8  00000000  00000000  00070dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005fe0  00000000  00000000  0010ba54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00111a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d60 	.word	0x08005d60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08005d60 	.word	0x08005d60

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000080 	.word	0x20000080
 800050c:	20000120 	.word	0x20000120

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b5b0      	push	{r4, r5, r7, lr}
 8000512:	b098      	sub	sp, #96	; 0x60
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fd9f 	bl	8001058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f861 	bl	80005e0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800051e:	f000 f8c7 	bl	80006b0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f9a7 	bl	8000874 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000526:	f000 f8e3 	bl	80006f0 <MX_I2C1_Init>
  MX_I2S2_Init();
 800052a:	f000 f90f 	bl	800074c <MX_I2S2_Init>
  MX_I2S3_Init();
 800052e:	f000 f93b 	bl	80007a8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000532:	f000 f969 	bl	8000808 <MX_SPI1_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of CriticalResourceSemaphore */
  osSemaphoreDef(CriticalResourceSemaphore);
 8000536:	2300      	movs	r3, #0
 8000538:	65bb      	str	r3, [r7, #88]	; 0x58
 800053a:	2300      	movs	r3, #0
 800053c:	65fb      	str	r3, [r7, #92]	; 0x5c
  CriticalResourceSemaphoreHandle = osSemaphoreCreate(osSemaphore(CriticalResourceSemaphore), 1);
 800053e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000542:	2101      	movs	r1, #1
 8000544:	4618      	mov	r0, r3
 8000546:	f002 fff0 	bl	800352a <osSemaphoreCreate>
 800054a:	4603      	mov	r3, r0
 800054c:	4a1d      	ldr	r2, [pc, #116]	; (80005c4 <main+0xb4>)
 800054e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of FlashGreenLed */
  osThreadDef(FlashGreenLed, StartFlashGreenLedTask, osPriorityNormal, 0, 128);
 8000550:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <main+0xb8>)
 8000552:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000556:	461d      	mov	r5, r3
 8000558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FlashGreenLedHandle = osThreadCreate(osThread(FlashGreenLed), NULL);
 8000564:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f002 ff7d 	bl	800346a <osThreadCreate>
 8000570:	4603      	mov	r3, r0
 8000572:	4a16      	ldr	r2, [pc, #88]	; (80005cc <main+0xbc>)
 8000574:	6013      	str	r3, [r2, #0]

  /* definition and creation of FlashRedLed */
  osThreadDef(FlashRedLed, StartFlashRedLedTask, osPriorityNormal, 0, 128);
 8000576:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <main+0xc0>)
 8000578:	f107 0420 	add.w	r4, r7, #32
 800057c:	461d      	mov	r5, r3
 800057e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000582:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FlashRedLedHandle = osThreadCreate(osThread(FlashRedLed), NULL);
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f002 ff6a 	bl	800346a <osThreadCreate>
 8000596:	4603      	mov	r3, r0
 8000598:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <main+0xc4>)
 800059a:	6013      	str	r3, [r2, #0]

  /* definition and creation of FlashOrangeLed */
  osThreadDef(FlashOrangeLed, StartFlashOrangeLedTask, osPriorityAboveNormal, 0, 128);
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <main+0xc8>)
 800059e:	1d3c      	adds	r4, r7, #4
 80005a0:	461d      	mov	r5, r3
 80005a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FlashOrangeLedHandle = osThreadCreate(osThread(FlashOrangeLed), NULL);
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 ff59 	bl	800346a <osThreadCreate>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a08      	ldr	r2, [pc, #32]	; (80005dc <main+0xcc>)
 80005bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005be:	f002 ff4d 	bl	800345c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <main+0xb2>
 80005c4:	20000468 	.word	0x20000468
 80005c8:	08005d88 	.word	0x08005d88
 80005cc:	2000045c 	.word	0x2000045c
 80005d0:	08005db0 	.word	0x08005db0
 80005d4:	20000460 	.word	0x20000460
 80005d8:	08005ddc 	.word	0x08005ddc
 80005dc:	20000464 	.word	0x20000464

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	; 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f005 facc 	bl	8005b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <SystemClock_Config+0xc8>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a26      	ldr	r2, [pc, #152]	; (80006a8 <SystemClock_Config+0xc8>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <SystemClock_Config+0xc8>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <SystemClock_Config+0xcc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a20      	ldr	r2, [pc, #128]	; (80006ac <SystemClock_Config+0xcc>)
 800062a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <SystemClock_Config+0xcc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000650:	2304      	movs	r3, #4
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000654:	23c0      	movs	r3, #192	; 0xc0
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000658:	2304      	movs	r3, #4
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fdb7 	bl	80021d8 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000670:	f000 fa94 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2302      	movs	r3, #2
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000680:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2103      	movs	r1, #3
 8000690:	4618      	mov	r0, r3
 8000692:	f002 f819 	bl	80026c8 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800069c:	f000 fa7e 	bl	8000b9c <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	3750      	adds	r7, #80	; 0x50
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006b6:	463b      	mov	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
 80006c4:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006c6:	2301      	movs	r3, #1
 80006c8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80006ca:	23c8      	movs	r3, #200	; 0xc8
 80006cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80006ce:	2305      	movs	r3, #5
 80006d0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 fa47 	bl	8002b6c <HAL_RCCEx_PeriphCLKConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80006e4:	f000 fa5a 	bl	8000b9c <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_I2C1_Init+0x50>)
 80006f6:	4a13      	ldr	r2, [pc, #76]	; (8000744 <MX_I2C1_Init+0x54>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_I2C1_Init+0x50>)
 80006fc:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MX_I2C1_Init+0x58>)
 80006fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_I2C1_Init+0x50>)
 800070e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000712:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_I2C1_Init+0x50>)
 800072e:	f000 ff6f 	bl	8001610 <HAL_I2C_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000738:	f000 fa30 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000320 	.word	0x20000320
 8000744:	40005400 	.word	0x40005400
 8000748:	000186a0 	.word	0x000186a0

0800074c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2S2_Init+0x50>)
 8000752:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <MX_I2S2_Init+0x54>)
 8000754:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_I2S2_Init+0x50>)
 8000758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800075c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_I2S2_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_I2S2_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_I2S2_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_I2S2_Init+0x50>)
 8000772:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <MX_I2S2_Init+0x58>)
 8000774:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_I2S2_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_I2S2_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_I2S2_Init+0x50>)
 8000784:	2201      	movs	r2, #1
 8000786:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_I2S2_Init+0x50>)
 800078a:	f001 f885 	bl	8001898 <HAL_I2S_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000794:	f000 fa02 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000374 	.word	0x20000374
 80007a0:	40003800 	.word	0x40003800
 80007a4:	00017700 	.word	0x00017700

080007a8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_I2S3_Init+0x54>)
 80007ae:	4a14      	ldr	r2, [pc, #80]	; (8000800 <MX_I2S3_Init+0x58>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_I2S3_Init+0x54>)
 80007b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_I2S3_Init+0x54>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_I2S3_Init+0x54>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_I2S3_Init+0x54>)
 80007c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007cc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_I2S3_Init+0x54>)
 80007d0:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <MX_I2S3_Init+0x5c>)
 80007d2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_I2S3_Init+0x54>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_I2S3_Init+0x54>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_I2S3_Init+0x54>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_I2S3_Init+0x54>)
 80007e8:	f001 f856 	bl	8001898 <HAL_I2S_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007f2:	f000 f9d3 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200003bc 	.word	0x200003bc
 8000800:	40003c00 	.word	0x40003c00
 8000804:	00017700 	.word	0x00017700

08000808 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_SPI1_Init+0x64>)
 800080e:	4a18      	ldr	r2, [pc, #96]	; (8000870 <MX_SPI1_Init+0x68>)
 8000810:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_SPI1_Init+0x64>)
 8000814:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000818:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_SPI1_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_SPI1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_SPI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_SPI1_Init+0x64>)
 8000834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000838:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_SPI1_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_SPI1_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_SPI1_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_SPI1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_SPI1_Init+0x64>)
 8000854:	220a      	movs	r2, #10
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_SPI1_Init+0x64>)
 800085a:	f002 fad9 	bl	8002e10 <HAL_SPI_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000864:	f000 f99a 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000404 	.word	0x20000404
 8000870:	40013000 	.word	0x40013000

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
 800088e:	4b70      	ldr	r3, [pc, #448]	; (8000a50 <MX_GPIO_Init+0x1dc>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a6f      	ldr	r2, [pc, #444]	; (8000a50 <MX_GPIO_Init+0x1dc>)
 8000894:	f043 0310 	orr.w	r3, r3, #16
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b6d      	ldr	r3, [pc, #436]	; (8000a50 <MX_GPIO_Init+0x1dc>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0310 	and.w	r3, r3, #16
 80008a2:	61bb      	str	r3, [r7, #24]
 80008a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	4b69      	ldr	r3, [pc, #420]	; (8000a50 <MX_GPIO_Init+0x1dc>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a68      	ldr	r2, [pc, #416]	; (8000a50 <MX_GPIO_Init+0x1dc>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b66      	ldr	r3, [pc, #408]	; (8000a50 <MX_GPIO_Init+0x1dc>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	4b62      	ldr	r3, [pc, #392]	; (8000a50 <MX_GPIO_Init+0x1dc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a61      	ldr	r2, [pc, #388]	; (8000a50 <MX_GPIO_Init+0x1dc>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b5f      	ldr	r3, [pc, #380]	; (8000a50 <MX_GPIO_Init+0x1dc>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b5b      	ldr	r3, [pc, #364]	; (8000a50 <MX_GPIO_Init+0x1dc>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a5a      	ldr	r2, [pc, #360]	; (8000a50 <MX_GPIO_Init+0x1dc>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b58      	ldr	r3, [pc, #352]	; (8000a50 <MX_GPIO_Init+0x1dc>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	4b54      	ldr	r3, [pc, #336]	; (8000a50 <MX_GPIO_Init+0x1dc>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a53      	ldr	r2, [pc, #332]	; (8000a50 <MX_GPIO_Init+0x1dc>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b51      	ldr	r3, [pc, #324]	; (8000a50 <MX_GPIO_Init+0x1dc>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b4d      	ldr	r3, [pc, #308]	; (8000a50 <MX_GPIO_Init+0x1dc>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a4c      	ldr	r2, [pc, #304]	; (8000a50 <MX_GPIO_Init+0x1dc>)
 8000920:	f043 0308 	orr.w	r3, r3, #8
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b4a      	ldr	r3, [pc, #296]	; (8000a50 <MX_GPIO_Init+0x1dc>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0308 	and.w	r3, r3, #8
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2108      	movs	r1, #8
 8000936:	4847      	ldr	r0, [pc, #284]	; (8000a54 <MX_GPIO_Init+0x1e0>)
 8000938:	f000 fe36 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	2101      	movs	r1, #1
 8000940:	4845      	ldr	r0, [pc, #276]	; (8000a58 <MX_GPIO_Init+0x1e4>)
 8000942:	f000 fe31 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8000946:	2200      	movs	r2, #0
 8000948:	f24f 0110 	movw	r1, #61456	; 0xf010
 800094c:	4843      	ldr	r0, [pc, #268]	; (8000a5c <MX_GPIO_Init+0x1e8>)
 800094e:	f000 fe2b 	bl	80015a8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000952:	2304      	movs	r3, #4
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	483b      	ldr	r0, [pc, #236]	; (8000a54 <MX_GPIO_Init+0x1e0>)
 8000966:	f000 fc9b 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800096a:	2308      	movs	r3, #8
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4834      	ldr	r0, [pc, #208]	; (8000a54 <MX_GPIO_Init+0x1e0>)
 8000982:	f000 fc8d 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000986:	2332      	movs	r3, #50	; 0x32
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800098a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	482e      	ldr	r0, [pc, #184]	; (8000a54 <MX_GPIO_Init+0x1e0>)
 800099c:	f000 fc80 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009a0:	2301      	movs	r3, #1
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4828      	ldr	r0, [pc, #160]	; (8000a58 <MX_GPIO_Init+0x1e4>)
 80009b8:	f000 fc72 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009bc:	2301      	movs	r3, #1
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4823      	ldr	r0, [pc, #140]	; (8000a60 <MX_GPIO_Init+0x1ec>)
 80009d2:	f000 fc65 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 80009d6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009da:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	481b      	ldr	r0, [pc, #108]	; (8000a5c <MX_GPIO_Init+0x1e8>)
 80009f0:	f000 fc56 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4815      	ldr	r0, [pc, #84]	; (8000a60 <MX_GPIO_Init+0x1ec>)
 8000a0a:	f000 fc49 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a0e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a20:	230a      	movs	r3, #10
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480d      	ldr	r0, [pc, #52]	; (8000a60 <MX_GPIO_Init+0x1ec>)
 8000a2c:	f000 fc38 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a30:	2320      	movs	r3, #32
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <MX_GPIO_Init+0x1e8>)
 8000a44:	f000 fc2c 	bl	80012a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a48:	bf00      	nop
 8000a4a:	3730      	adds	r7, #48	; 0x30
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	40020c00 	.word	0x40020c00
 8000a60:	40020000 	.word	0x40020000

08000a64 <Access_Function>:

/* USER CODE BEGIN 4 */
int Start_Flag = 1;
void Access_Function(){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
	if(Start_Flag == 1){
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <Access_Function+0x44>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d103      	bne.n	8000a7a <Access_Function+0x16>
		Start_Flag = 0;
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <Access_Function+0x44>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	e004      	b.n	8000a84 <Access_Function+0x20>
	}else {
		HAL_GPIO_TogglePin(GPIOD, BLUE_LED);
 8000a7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a7e:	480b      	ldr	r0, [pc, #44]	; (8000aac <Access_Function+0x48>)
 8000a80:	f000 fdab 	bl	80015da <HAL_GPIO_TogglePin>
	}//else
	for(int i=0;i<2000000;++i);
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	e002      	b.n	8000a90 <Access_Function+0x2c>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <Access_Function+0x4c>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	ddf8      	ble.n	8000a8a <Access_Function+0x26>
	Start_Flag = 1;
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <Access_Function+0x44>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
	return;
 8000a9e:	bf00      	nop
}//access function
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	40020c00 	.word	0x40020c00
 8000ab0:	001e847f 	.word	0x001e847f

08000ab4 <StartFlashGreenLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFlashGreenLedTask */
void StartFlashGreenLedTask(void const * argument)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  /*Exercise 8*/
	  HAL_GPIO_TogglePin(GPIOD, LED_GREEN_Pin);//green on
 8000abc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac0:	480e      	ldr	r0, [pc, #56]	; (8000afc <StartFlashGreenLedTask+0x48>)
 8000ac2:	f000 fd8a 	bl	80015da <HAL_GPIO_TogglePin>
	  osSemaphoreWait(CriticalResourceSemaphoreHandle, osWaitForever);//semaphore P (i.e. wait)
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <StartFlashGreenLedTask+0x4c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f04f 31ff 	mov.w	r1, #4294967295
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 fd5e 	bl	8003590 <osSemaphoreWait>
	  Access_Function();//access shared data
 8000ad4:	f7ff ffc6 	bl	8000a64 <Access_Function>
	  osSemaphoreRelease(CriticalResourceSemaphoreHandle);//semaphore V (i.e. signal)
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <StartFlashGreenLedTask+0x4c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f002 fda5 	bl	800362c <osSemaphoreRelease>
	  osDelay(200);//200 Millisecond delay
 8000ae2:	20c8      	movs	r0, #200	; 0xc8
 8000ae4:	f002 fd0d 	bl	8003502 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, LED_GREEN_Pin);//green off
 8000ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aec:	4803      	ldr	r0, [pc, #12]	; (8000afc <StartFlashGreenLedTask+0x48>)
 8000aee:	f000 fd74 	bl	80015da <HAL_GPIO_TogglePin>
	  osDelay(200);//200 Millisecond delay
 8000af2:	20c8      	movs	r0, #200	; 0xc8
 8000af4:	f002 fd05 	bl	8003502 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, LED_GREEN_Pin);//green on
 8000af8:	e7e0      	b.n	8000abc <StartFlashGreenLedTask+0x8>
 8000afa:	bf00      	nop
 8000afc:	40020c00 	.word	0x40020c00
 8000b00:	20000468 	.word	0x20000468

08000b04 <StartFlashRedLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlashRedLedTask */
void StartFlashRedLedTask(void const * argument)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlashRedLedTask */
  /* Infinite loop */
  for(;;)
  {
	  /*Exercise 8*/
	  HAL_GPIO_TogglePin(GPIOD, LED_RED_Pin);//red on
 8000b0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b10:	480f      	ldr	r0, [pc, #60]	; (8000b50 <StartFlashRedLedTask+0x4c>)
 8000b12:	f000 fd62 	bl	80015da <HAL_GPIO_TogglePin>
	  osSemaphoreWait(CriticalResourceSemaphoreHandle, osWaitForever);//semaphore P (i.e. wait)
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <StartFlashRedLedTask+0x50>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 fd36 	bl	8003590 <osSemaphoreWait>
	  Access_Function();//access shared data
 8000b24:	f7ff ff9e 	bl	8000a64 <Access_Function>
	  osSemaphoreRelease(CriticalResourceSemaphoreHandle);//semaphore V (i.e. signal)
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <StartFlashRedLedTask+0x50>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f002 fd7d 	bl	800362c <osSemaphoreRelease>
	  osDelay(550);//550 Millisecond delay
 8000b32:	f240 2026 	movw	r0, #550	; 0x226
 8000b36:	f002 fce4 	bl	8003502 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, LED_RED_Pin);//red off
 8000b3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b3e:	4804      	ldr	r0, [pc, #16]	; (8000b50 <StartFlashRedLedTask+0x4c>)
 8000b40:	f000 fd4b 	bl	80015da <HAL_GPIO_TogglePin>
	  osDelay(550);//550 Millisecond delay
 8000b44:	f240 2026 	movw	r0, #550	; 0x226
 8000b48:	f002 fcdb 	bl	8003502 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, LED_RED_Pin);//red on
 8000b4c:	e7de      	b.n	8000b0c <StartFlashRedLedTask+0x8>
 8000b4e:	bf00      	nop
 8000b50:	40020c00 	.word	0x40020c00
 8000b54:	20000468 	.word	0x20000468

08000b58 <StartFlashOrangeLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlashOrangeLedTask */
void StartFlashOrangeLedTask(void const * argument)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlashOrangeLedTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, ORANGE_LED);//orange on
 8000b60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <StartFlashOrangeLedTask+0x1c>)
 8000b66:	f000 fd38 	bl	80015da <HAL_GPIO_TogglePin>
	  osDelay(50);//50 Millisecond delay
 8000b6a:	2032      	movs	r0, #50	; 0x32
 8000b6c:	f002 fcc9 	bl	8003502 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, ORANGE_LED);//orange on
 8000b70:	e7f6      	b.n	8000b60 <StartFlashOrangeLedTask+0x8>
 8000b72:	bf00      	nop
 8000b74:	40020c00 	.word	0x40020c00

08000b78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d101      	bne.n	8000b8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b8a:	f000 fa87 	bl	800109c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40010000 	.word	0x40010000

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_MspInit+0x54>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <HAL_MspInit+0x54>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_MspInit+0x54>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <HAL_MspInit+0x54>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_MspInit+0x54>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_MspInit+0x54>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	210f      	movs	r1, #15
 8000bea:	f06f 0001 	mvn.w	r0, #1
 8000bee:	f000 fb2d 	bl	800124c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <HAL_I2C_MspInit+0x84>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d12c      	bne.n	8000c7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c44:	2312      	movs	r3, #18
 8000c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c50:	2304      	movs	r3, #4
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480c      	ldr	r0, [pc, #48]	; (8000c8c <HAL_I2C_MspInit+0x8c>)
 8000c5c:	f000 fb20 	bl	80012a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	; 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40005400 	.word	0x40005400
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020400 	.word	0x40020400

08000c90 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	; 0x38
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a59      	ldr	r2, [pc, #356]	; (8000e14 <HAL_I2S_MspInit+0x184>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d15b      	bne.n	8000d6a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
 8000cb6:	4b58      	ldr	r3, [pc, #352]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a57      	ldr	r2, [pc, #348]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b55      	ldr	r3, [pc, #340]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cca:	623b      	str	r3, [r7, #32]
 8000ccc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	4b51      	ldr	r3, [pc, #324]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a50      	ldr	r2, [pc, #320]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b4e      	ldr	r3, [pc, #312]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	61fb      	str	r3, [r7, #28]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
 8000cee:	4b4a      	ldr	r3, [pc, #296]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a49      	ldr	r2, [pc, #292]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b47      	ldr	r3, [pc, #284]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d06:	2304      	movs	r3, #4
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000d16:	2306      	movs	r3, #6
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	483e      	ldr	r0, [pc, #248]	; (8000e1c <HAL_I2S_MspInit+0x18c>)
 8000d22:	f000 fabd 	bl	80012a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d26:	2308      	movs	r3, #8
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d36:	2305      	movs	r3, #5
 8000d38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4836      	ldr	r0, [pc, #216]	; (8000e1c <HAL_I2S_MspInit+0x18c>)
 8000d42:	f000 faad 	bl	80012a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d58:	2305      	movs	r3, #5
 8000d5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d60:	4619      	mov	r1, r3
 8000d62:	482f      	ldr	r0, [pc, #188]	; (8000e20 <HAL_I2S_MspInit+0x190>)
 8000d64:	f000 fa9c 	bl	80012a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d68:	e04f      	b.n	8000e0a <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a2d      	ldr	r2, [pc, #180]	; (8000e24 <HAL_I2S_MspInit+0x194>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d14a      	bne.n	8000e0a <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	4a26      	ldr	r2, [pc, #152]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d82:	6413      	str	r3, [r2, #64]	; 0x40
 8000d84:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	4a1f      	ldr	r2, [pc, #124]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	4a18      	ldr	r2, [pc, #96]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <HAL_I2S_MspInit+0x188>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dc8:	2310      	movs	r3, #16
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dd8:	2306      	movs	r3, #6
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	4811      	ldr	r0, [pc, #68]	; (8000e28 <HAL_I2S_MspInit+0x198>)
 8000de4:	f000 fa5c 	bl	80012a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000de8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <HAL_I2S_MspInit+0x18c>)
 8000e06:	f000 fa4b 	bl	80012a0 <HAL_GPIO_Init>
}
 8000e0a:	bf00      	nop
 8000e0c:	3738      	adds	r7, #56	; 0x38
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40003800 	.word	0x40003800
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020800 	.word	0x40020800
 8000e20:	40020400 	.word	0x40020400
 8000e24:	40003c00 	.word	0x40003c00
 8000e28:	40020000 	.word	0x40020000

08000e2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a19      	ldr	r2, [pc, #100]	; (8000eb0 <HAL_SPI_MspInit+0x84>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d12b      	bne.n	8000ea6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_SPI_MspInit+0x88>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <HAL_SPI_MspInit+0x88>)
 8000e58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_SPI_MspInit+0x88>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_SPI_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <HAL_SPI_MspInit+0x88>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_SPI_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e86:	23e0      	movs	r3, #224	; 0xe0
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e96:	2305      	movs	r3, #5
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <HAL_SPI_MspInit+0x8c>)
 8000ea2:	f000 f9fd 	bl	80012a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	; 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40013000 	.word	0x40013000
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020000 	.word	0x40020000

08000ebc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08c      	sub	sp, #48	; 0x30
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <HAL_InitTick+0xd0>)
 8000ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed4:	4a2d      	ldr	r2, [pc, #180]	; (8000f8c <HAL_InitTick+0xd0>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6453      	str	r3, [r2, #68]	; 0x44
 8000edc:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <HAL_InitTick+0xd0>)
 8000ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ee8:	f107 020c 	add.w	r2, r7, #12
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 fe08 	bl	8002b08 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ef8:	f001 fdf2 	bl	8002ae0 <HAL_RCC_GetPCLK2Freq>
 8000efc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f00:	4a23      	ldr	r2, [pc, #140]	; (8000f90 <HAL_InitTick+0xd4>)
 8000f02:	fba2 2303 	umull	r2, r3, r2, r3
 8000f06:	0c9b      	lsrs	r3, r3, #18
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f0c:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <HAL_InitTick+0xd8>)
 8000f0e:	4a22      	ldr	r2, [pc, #136]	; (8000f98 <HAL_InitTick+0xdc>)
 8000f10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <HAL_InitTick+0xd8>)
 8000f14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f18:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f1a:	4a1e      	ldr	r2, [pc, #120]	; (8000f94 <HAL_InitTick+0xd8>)
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f20:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <HAL_InitTick+0xd8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <HAL_InitTick+0xd8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_InitTick+0xd8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f32:	4818      	ldr	r0, [pc, #96]	; (8000f94 <HAL_InitTick+0xd8>)
 8000f34:	f001 fff5 	bl	8002f22 <HAL_TIM_Base_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d11b      	bne.n	8000f7e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f46:	4813      	ldr	r0, [pc, #76]	; (8000f94 <HAL_InitTick+0xd8>)
 8000f48:	f002 f844 	bl	8002fd4 <HAL_TIM_Base_Start_IT>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d111      	bne.n	8000f7e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f5a:	2019      	movs	r0, #25
 8000f5c:	f000 f992 	bl	8001284 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b0f      	cmp	r3, #15
 8000f64:	d808      	bhi.n	8000f78 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000f66:	2200      	movs	r2, #0
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	2019      	movs	r0, #25
 8000f6c:	f000 f96e 	bl	800124c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_InitTick+0xe0>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	e002      	b.n	8000f7e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3730      	adds	r7, #48	; 0x30
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	431bde83 	.word	0x431bde83
 8000f94:	2000046c 	.word	0x2000046c
 8000f98:	40010000 	.word	0x40010000
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fd2:	f002 f861 	bl	8003098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000046c 	.word	0x2000046c

08000fe0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <SystemInit+0x20>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <SystemInit+0x20>)
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001004:	f8df d034 	ldr.w	sp, [pc, #52]	; 800103c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001008:	f7ff ffea 	bl	8000fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800100e:	490d      	ldr	r1, [pc, #52]	; (8001044 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001010:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001024:	4c0a      	ldr	r4, [pc, #40]	; (8001050 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001032:	f004 fe09 	bl	8005c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001036:	f7ff fa6b 	bl	8000510 <main>
  bx  lr    
 800103a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800103c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001044:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001048:	08005e28 	.word	0x08005e28
  ldr r2, =_sbss
 800104c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001050:	2000434c 	.word	0x2000434c

08001054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC_IRQHandler>
	...

08001058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <HAL_Init+0x40>)
 8001062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001066:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_Init+0x40>)
 800106e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001072:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_Init+0x40>)
 800107a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f8d8 	bl	8001236 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	200f      	movs	r0, #15
 8001088:	f7ff ff18 	bl	8000ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108c:	f7ff fd8c 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023c00 	.word	0x40023c00

0800109c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	2000000c 	.word	0x2000000c
 80010c0:	200004b4 	.word	0x200004b4

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	200004b4 	.word	0x200004b4

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4907      	ldr	r1, [pc, #28]	; (8001178 <__NVIC_EnableIRQ+0x38>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	; (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	; (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	; 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ff4c 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800125e:	f7ff ff61 	bl	8001124 <__NVIC_GetPriorityGrouping>
 8001262:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	68b9      	ldr	r1, [r7, #8]
 8001268:	6978      	ldr	r0, [r7, #20]
 800126a:	f7ff ffb1 	bl	80011d0 <NVIC_EncodePriority>
 800126e:	4602      	mov	r2, r0
 8001270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001274:	4611      	mov	r1, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff80 	bl	800117c <__NVIC_SetPriority>
}
 800127c:	bf00      	nop
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff54 	bl	8001140 <__NVIC_EnableIRQ>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	e159      	b.n	8001570 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012bc:	2201      	movs	r2, #1
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	f040 8148 	bne.w	800156a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d005      	beq.n	80012f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d130      	bne.n	8001354 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	2203      	movs	r2, #3
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001328:	2201      	movs	r2, #1
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	f003 0201 	and.w	r2, r3, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b03      	cmp	r3, #3
 800135e:	d017      	beq.n	8001390 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	2203      	movs	r2, #3
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d123      	bne.n	80013e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	08da      	lsrs	r2, r3, #3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3208      	adds	r2, #8
 80013a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	220f      	movs	r2, #15
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	08da      	lsrs	r2, r3, #3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3208      	adds	r2, #8
 80013de:	69b9      	ldr	r1, [r7, #24]
 80013e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0203 	and.w	r2, r3, #3
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80a2 	beq.w	800156a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b57      	ldr	r3, [pc, #348]	; (8001588 <HAL_GPIO_Init+0x2e8>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	4a56      	ldr	r2, [pc, #344]	; (8001588 <HAL_GPIO_Init+0x2e8>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001434:	6453      	str	r3, [r2, #68]	; 0x44
 8001436:	4b54      	ldr	r3, [pc, #336]	; (8001588 <HAL_GPIO_Init+0x2e8>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001442:	4a52      	ldr	r2, [pc, #328]	; (800158c <HAL_GPIO_Init+0x2ec>)
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	3302      	adds	r3, #2
 800144a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	220f      	movs	r2, #15
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a49      	ldr	r2, [pc, #292]	; (8001590 <HAL_GPIO_Init+0x2f0>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d019      	beq.n	80014a2 <HAL_GPIO_Init+0x202>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a48      	ldr	r2, [pc, #288]	; (8001594 <HAL_GPIO_Init+0x2f4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d013      	beq.n	800149e <HAL_GPIO_Init+0x1fe>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a47      	ldr	r2, [pc, #284]	; (8001598 <HAL_GPIO_Init+0x2f8>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d00d      	beq.n	800149a <HAL_GPIO_Init+0x1fa>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a46      	ldr	r2, [pc, #280]	; (800159c <HAL_GPIO_Init+0x2fc>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d007      	beq.n	8001496 <HAL_GPIO_Init+0x1f6>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a45      	ldr	r2, [pc, #276]	; (80015a0 <HAL_GPIO_Init+0x300>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d101      	bne.n	8001492 <HAL_GPIO_Init+0x1f2>
 800148e:	2304      	movs	r3, #4
 8001490:	e008      	b.n	80014a4 <HAL_GPIO_Init+0x204>
 8001492:	2307      	movs	r3, #7
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x204>
 8001496:	2303      	movs	r3, #3
 8001498:	e004      	b.n	80014a4 <HAL_GPIO_Init+0x204>
 800149a:	2302      	movs	r3, #2
 800149c:	e002      	b.n	80014a4 <HAL_GPIO_Init+0x204>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <HAL_GPIO_Init+0x204>
 80014a2:	2300      	movs	r3, #0
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	f002 0203 	and.w	r2, r2, #3
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	4093      	lsls	r3, r2
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014b4:	4935      	ldr	r1, [pc, #212]	; (800158c <HAL_GPIO_Init+0x2ec>)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	3302      	adds	r3, #2
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014c2:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <HAL_GPIO_Init+0x304>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014e6:	4a2f      	ldr	r2, [pc, #188]	; (80015a4 <HAL_GPIO_Init+0x304>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <HAL_GPIO_Init+0x304>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001510:	4a24      	ldr	r2, [pc, #144]	; (80015a4 <HAL_GPIO_Init+0x304>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001516:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_GPIO_Init+0x304>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800153a:	4a1a      	ldr	r2, [pc, #104]	; (80015a4 <HAL_GPIO_Init+0x304>)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_GPIO_Init+0x304>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001564:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <HAL_GPIO_Init+0x304>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3301      	adds	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	2b0f      	cmp	r3, #15
 8001574:	f67f aea2 	bls.w	80012bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	3724      	adds	r7, #36	; 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800
 800158c:	40013800 	.word	0x40013800
 8001590:	40020000 	.word	0x40020000
 8001594:	40020400 	.word	0x40020400
 8001598:	40020800 	.word	0x40020800
 800159c:	40020c00 	.word	0x40020c00
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40013c00 	.word	0x40013c00

080015a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
 80015b4:	4613      	mov	r3, r2
 80015b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b8:	787b      	ldrb	r3, [r7, #1]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015be:	887a      	ldrh	r2, [r7, #2]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015c4:	e003      	b.n	80015ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015c6:	887b      	ldrh	r3, [r7, #2]
 80015c8:	041a      	lsls	r2, r3, #16
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	619a      	str	r2, [r3, #24]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015da:	b480      	push	{r7}
 80015dc:	b085      	sub	sp, #20
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	460b      	mov	r3, r1
 80015e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015ec:	887a      	ldrh	r2, [r7, #2]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4013      	ands	r3, r2
 80015f2:	041a      	lsls	r2, r3, #16
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	887b      	ldrh	r3, [r7, #2]
 80015fa:	400b      	ands	r3, r1
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	619a      	str	r2, [r3, #24]
}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e12b      	b.n	800187a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d106      	bne.n	800163c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff fae2 	bl	8000c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2224      	movs	r2, #36	; 0x24
 8001640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0201 	bic.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001662:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001672:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001674:	f001 fa20 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8001678:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4a81      	ldr	r2, [pc, #516]	; (8001884 <HAL_I2C_Init+0x274>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d807      	bhi.n	8001694 <HAL_I2C_Init+0x84>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4a80      	ldr	r2, [pc, #512]	; (8001888 <HAL_I2C_Init+0x278>)
 8001688:	4293      	cmp	r3, r2
 800168a:	bf94      	ite	ls
 800168c:	2301      	movls	r3, #1
 800168e:	2300      	movhi	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	e006      	b.n	80016a2 <HAL_I2C_Init+0x92>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4a7d      	ldr	r2, [pc, #500]	; (800188c <HAL_I2C_Init+0x27c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	bf94      	ite	ls
 800169c:	2301      	movls	r3, #1
 800169e:	2300      	movhi	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e0e7      	b.n	800187a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4a78      	ldr	r2, [pc, #480]	; (8001890 <HAL_I2C_Init+0x280>)
 80016ae:	fba2 2303 	umull	r2, r3, r2, r3
 80016b2:	0c9b      	lsrs	r3, r3, #18
 80016b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	4a6a      	ldr	r2, [pc, #424]	; (8001884 <HAL_I2C_Init+0x274>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d802      	bhi.n	80016e4 <HAL_I2C_Init+0xd4>
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	3301      	adds	r3, #1
 80016e2:	e009      	b.n	80016f8 <HAL_I2C_Init+0xe8>
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016ea:	fb02 f303 	mul.w	r3, r2, r3
 80016ee:	4a69      	ldr	r2, [pc, #420]	; (8001894 <HAL_I2C_Init+0x284>)
 80016f0:	fba2 2303 	umull	r2, r3, r2, r3
 80016f4:	099b      	lsrs	r3, r3, #6
 80016f6:	3301      	adds	r3, #1
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	430b      	orrs	r3, r1
 80016fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800170a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	495c      	ldr	r1, [pc, #368]	; (8001884 <HAL_I2C_Init+0x274>)
 8001714:	428b      	cmp	r3, r1
 8001716:	d819      	bhi.n	800174c <HAL_I2C_Init+0x13c>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	1e59      	subs	r1, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	fbb1 f3f3 	udiv	r3, r1, r3
 8001726:	1c59      	adds	r1, r3, #1
 8001728:	f640 73fc 	movw	r3, #4092	; 0xffc
 800172c:	400b      	ands	r3, r1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00a      	beq.n	8001748 <HAL_I2C_Init+0x138>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1e59      	subs	r1, r3, #1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001740:	3301      	adds	r3, #1
 8001742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001746:	e051      	b.n	80017ec <HAL_I2C_Init+0x1dc>
 8001748:	2304      	movs	r3, #4
 800174a:	e04f      	b.n	80017ec <HAL_I2C_Init+0x1dc>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d111      	bne.n	8001778 <HAL_I2C_Init+0x168>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1e58      	subs	r0, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6859      	ldr	r1, [r3, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	440b      	add	r3, r1
 8001762:	fbb0 f3f3 	udiv	r3, r0, r3
 8001766:	3301      	adds	r3, #1
 8001768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf0c      	ite	eq
 8001770:	2301      	moveq	r3, #1
 8001772:	2300      	movne	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	e012      	b.n	800179e <HAL_I2C_Init+0x18e>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	1e58      	subs	r0, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6859      	ldr	r1, [r3, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	0099      	lsls	r1, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	fbb0 f3f3 	udiv	r3, r0, r3
 800178e:	3301      	adds	r3, #1
 8001790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001794:	2b00      	cmp	r3, #0
 8001796:	bf0c      	ite	eq
 8001798:	2301      	moveq	r3, #1
 800179a:	2300      	movne	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_I2C_Init+0x196>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e022      	b.n	80017ec <HAL_I2C_Init+0x1dc>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10e      	bne.n	80017cc <HAL_I2C_Init+0x1bc>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1e58      	subs	r0, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6859      	ldr	r1, [r3, #4]
 80017b6:	460b      	mov	r3, r1
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	440b      	add	r3, r1
 80017bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c0:	3301      	adds	r3, #1
 80017c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ca:	e00f      	b.n	80017ec <HAL_I2C_Init+0x1dc>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1e58      	subs	r0, r3, #1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6859      	ldr	r1, [r3, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	0099      	lsls	r1, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e2:	3301      	adds	r3, #1
 80017e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	6809      	ldr	r1, [r1, #0]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69da      	ldr	r2, [r3, #28]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800181a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6911      	ldr	r1, [r2, #16]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	68d2      	ldr	r2, [r2, #12]
 8001826:	4311      	orrs	r1, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	430b      	orrs	r3, r1
 800182e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695a      	ldr	r2, [r3, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0201 	orr.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2220      	movs	r2, #32
 8001866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	000186a0 	.word	0x000186a0
 8001888:	001e847f 	.word	0x001e847f
 800188c:	003d08ff 	.word	0x003d08ff
 8001890:	431bde83 	.word	0x431bde83
 8001894:	10624dd3 	.word	0x10624dd3

08001898 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e128      	b.n	8001afc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a90      	ldr	r2, [pc, #576]	; (8001b04 <HAL_I2S_Init+0x26c>)
 80018c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff f9e3 	bl	8000c90 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2202      	movs	r2, #2
 80018ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80018e0:	f023 030f 	bic.w	r3, r3, #15
 80018e4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2202      	movs	r2, #2
 80018ec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d060      	beq.n	80019b8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d102      	bne.n	8001904 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80018fe:	2310      	movs	r3, #16
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e001      	b.n	8001908 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001904:	2320      	movs	r3, #32
 8001906:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b20      	cmp	r3, #32
 800190e:	d802      	bhi.n	8001916 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001916:	2001      	movs	r0, #1
 8001918:	f001 fa18 	bl	8002d4c <HAL_RCCEx_GetPeriphCLKFreq>
 800191c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001926:	d125      	bne.n	8001974 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d010      	beq.n	8001952 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	fbb2 f2f3 	udiv	r2, r2, r3
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	461a      	mov	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	fbb2 f3f3 	udiv	r3, r2, r3
 800194c:	3305      	adds	r3, #5
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	e01f      	b.n	8001992 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	fbb2 f2f3 	udiv	r2, r2, r3
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	461a      	mov	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	fbb2 f3f3 	udiv	r3, r2, r3
 800196e:	3305      	adds	r3, #5
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	e00e      	b.n	8001992 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	fbb2 f2f3 	udiv	r2, r2, r3
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	461a      	mov	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	3305      	adds	r3, #5
 8001990:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4a5c      	ldr	r2, [pc, #368]	; (8001b08 <HAL_I2S_Init+0x270>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	08db      	lsrs	r3, r3, #3
 800199c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	085b      	lsrs	r3, r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	e003      	b.n	80019c0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80019b8:	2302      	movs	r3, #2
 80019ba:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d902      	bls.n	80019cc <HAL_I2S_Init+0x134>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	2bff      	cmp	r3, #255	; 0xff
 80019ca:	d907      	bls.n	80019dc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d0:	f043 0210 	orr.w	r2, r3, #16
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e08f      	b.n	8001afc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691a      	ldr	r2, [r3, #16]
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	ea42 0103 	orr.w	r1, r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80019fa:	f023 030f 	bic.w	r3, r3, #15
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6851      	ldr	r1, [r2, #4]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6892      	ldr	r2, [r2, #8]
 8001a06:	4311      	orrs	r1, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	68d2      	ldr	r2, [r2, #12]
 8001a0c:	4311      	orrs	r1, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6992      	ldr	r2, [r2, #24]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a1e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d161      	bne.n	8001aec <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a38      	ldr	r2, [pc, #224]	; (8001b0c <HAL_I2S_Init+0x274>)
 8001a2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a37      	ldr	r2, [pc, #220]	; (8001b10 <HAL_I2S_Init+0x278>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d101      	bne.n	8001a3c <HAL_I2S_Init+0x1a4>
 8001a38:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <HAL_I2S_Init+0x27c>)
 8001a3a:	e001      	b.n	8001a40 <HAL_I2S_Init+0x1a8>
 8001a3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6812      	ldr	r2, [r2, #0]
 8001a46:	4932      	ldr	r1, [pc, #200]	; (8001b10 <HAL_I2S_Init+0x278>)
 8001a48:	428a      	cmp	r2, r1
 8001a4a:	d101      	bne.n	8001a50 <HAL_I2S_Init+0x1b8>
 8001a4c:	4a31      	ldr	r2, [pc, #196]	; (8001b14 <HAL_I2S_Init+0x27c>)
 8001a4e:	e001      	b.n	8001a54 <HAL_I2S_Init+0x1bc>
 8001a50:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a54:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a58:	f023 030f 	bic.w	r3, r3, #15
 8001a5c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a2b      	ldr	r2, [pc, #172]	; (8001b10 <HAL_I2S_Init+0x278>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d101      	bne.n	8001a6c <HAL_I2S_Init+0x1d4>
 8001a68:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <HAL_I2S_Init+0x27c>)
 8001a6a:	e001      	b.n	8001a70 <HAL_I2S_Init+0x1d8>
 8001a6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a70:	2202      	movs	r2, #2
 8001a72:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a25      	ldr	r2, [pc, #148]	; (8001b10 <HAL_I2S_Init+0x278>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_I2S_Init+0x1ea>
 8001a7e:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <HAL_I2S_Init+0x27c>)
 8001a80:	e001      	b.n	8001a86 <HAL_I2S_Init+0x1ee>
 8001a82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a92:	d003      	beq.n	8001a9c <HAL_I2S_Init+0x204>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d103      	bne.n	8001aa4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	e001      	b.n	8001aa8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001abc:	4313      	orrs	r3, r2
 8001abe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	897b      	ldrh	r3, [r7, #10]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ad4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <HAL_I2S_Init+0x278>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d101      	bne.n	8001ae4 <HAL_I2S_Init+0x24c>
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <HAL_I2S_Init+0x27c>)
 8001ae2:	e001      	b.n	8001ae8 <HAL_I2S_Init+0x250>
 8001ae4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ae8:	897a      	ldrh	r2, [r7, #10]
 8001aea:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	08001c0f 	.word	0x08001c0f
 8001b08:	cccccccd 	.word	0xcccccccd
 8001b0c:	08001d25 	.word	0x08001d25
 8001b10:	40003800 	.word	0x40003800
 8001b14:	40003400 	.word	0x40003400

08001b18 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	881a      	ldrh	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	1c9a      	adds	r2, r3, #2
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10e      	bne.n	8001ba8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b98:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffb8 	bl	8001b18 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc2:	b292      	uxth	r2, r2
 8001bc4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	1c9a      	adds	r2, r3, #2
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10e      	bne.n	8001c06 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bf6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff93 	bl	8001b2c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d13a      	bne.n	8001ca0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d109      	bne.n	8001c48 <I2S_IRQHandler+0x3a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3e:	2b40      	cmp	r3, #64	; 0x40
 8001c40:	d102      	bne.n	8001c48 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ffb4 	bl	8001bb0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4e:	2b40      	cmp	r3, #64	; 0x40
 8001c50:	d126      	bne.n	8001ca0 <I2S_IRQHandler+0x92>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0320 	and.w	r3, r3, #32
 8001c5c:	2b20      	cmp	r3, #32
 8001c5e:	d11f      	bne.n	8001ca0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c6e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f043 0202 	orr.w	r2, r3, #2
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ff50 	bl	8001b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d136      	bne.n	8001d1a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d109      	bne.n	8001cca <I2S_IRQHandler+0xbc>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc0:	2b80      	cmp	r3, #128	; 0x80
 8001cc2:	d102      	bne.n	8001cca <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff45 	bl	8001b54 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d122      	bne.n	8001d1a <I2S_IRQHandler+0x10c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0320 	and.w	r3, r3, #32
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	d11b      	bne.n	8001d1a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cf0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0c:	f043 0204 	orr.w	r2, r3, #4
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff13 	bl	8001b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a92      	ldr	r2, [pc, #584]	; (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001d3e:	4b92      	ldr	r3, [pc, #584]	; (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d40:	e001      	b.n	8001d46 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001d42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a8b      	ldr	r2, [pc, #556]	; (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d101      	bne.n	8001d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001d5c:	4b8a      	ldr	r3, [pc, #552]	; (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d5e:	e001      	b.n	8001d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001d60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d70:	d004      	beq.n	8001d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f040 8099 	bne.w	8001eae <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d107      	bne.n	8001d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f925 	bl	8001fe0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d107      	bne.n	8001db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f9c8 	bl	8002140 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db6:	2b40      	cmp	r3, #64	; 0x40
 8001db8:	d13a      	bne.n	8001e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f003 0320 	and.w	r3, r3, #32
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d035      	beq.n	8001e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a6e      	ldr	r2, [pc, #440]	; (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001dce:	4b6e      	ldr	r3, [pc, #440]	; (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001dd0:	e001      	b.n	8001dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001dd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4969      	ldr	r1, [pc, #420]	; (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001dde:	428b      	cmp	r3, r1
 8001de0:	d101      	bne.n	8001de6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001de2:	4b69      	ldr	r3, [pc, #420]	; (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001de4:	e001      	b.n	8001dea <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001de6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dee:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001dfe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f043 0202 	orr.w	r2, r3, #2
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff fe88 	bl	8001b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	f040 80c3 	bne.w	8001fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 80bd 	beq.w	8001fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e56:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a49      	ldr	r2, [pc, #292]	; (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d101      	bne.n	8001e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001e62:	4b49      	ldr	r3, [pc, #292]	; (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e64:	e001      	b.n	8001e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001e66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4944      	ldr	r1, [pc, #272]	; (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e72:	428b      	cmp	r3, r1
 8001e74:	d101      	bne.n	8001e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001e76:	4b44      	ldr	r3, [pc, #272]	; (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e78:	e001      	b.n	8001e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001e7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e82:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f043 0204 	orr.w	r2, r3, #4
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fe4a 	bl	8001b40 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001eac:	e089      	b.n	8001fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d107      	bne.n	8001ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f8be 	bl	8002044 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d107      	bne.n	8001ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f8fd 	bl	80020dc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee8:	2b40      	cmp	r3, #64	; 0x40
 8001eea:	d12f      	bne.n	8001f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d02a      	beq.n	8001f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f04:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d101      	bne.n	8001f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001f10:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f12:	e001      	b.n	8001f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001f14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4919      	ldr	r1, [pc, #100]	; (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f20:	428b      	cmp	r3, r1
 8001f22:	d101      	bne.n	8001f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001f24:	4b18      	ldr	r3, [pc, #96]	; (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f26:	e001      	b.n	8001f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001f28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f30:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	f043 0202 	orr.w	r2, r3, #2
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff fdfa 	bl	8001b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d136      	bne.n	8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	f003 0320 	and.w	r3, r3, #32
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d031      	beq.n	8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a07      	ldr	r2, [pc, #28]	; (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f6c:	e001      	b.n	8001f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001f6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4902      	ldr	r1, [pc, #8]	; (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f7a:	428b      	cmp	r3, r1
 8001f7c:	d106      	bne.n	8001f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001f7e:	4b02      	ldr	r3, [pc, #8]	; (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f80:	e006      	b.n	8001f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001f82:	bf00      	nop
 8001f84:	40003800 	.word	0x40003800
 8001f88:	40003400 	.word	0x40003400
 8001f8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f94:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fa4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f043 0204 	orr.w	r2, r3, #4
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff fdc0 	bl	8001b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fc0:	e000      	b.n	8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001fc2:	bf00      	nop
}
 8001fc4:	bf00      	nop
 8001fc6:	3720      	adds	r7, #32
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	1c99      	adds	r1, r3, #2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6251      	str	r1, [r2, #36]	; 0x24
 8001ff2:	881a      	ldrh	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200c:	b29b      	uxth	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d113      	bne.n	800203a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002020:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002026:	b29b      	uxth	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d106      	bne.n	800203a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ffc9 	bl	8001fcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	1c99      	adds	r1, r3, #2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6251      	str	r1, [r2, #36]	; 0x24
 8002056:	8819      	ldrh	r1, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1d      	ldr	r2, [pc, #116]	; (80020d4 <I2SEx_TxISR_I2SExt+0x90>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <I2SEx_TxISR_I2SExt+0x22>
 8002062:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <I2SEx_TxISR_I2SExt+0x94>)
 8002064:	e001      	b.n	800206a <I2SEx_TxISR_I2SExt+0x26>
 8002066:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800206a:	460a      	mov	r2, r1
 800206c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d121      	bne.n	80020ca <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <I2SEx_TxISR_I2SExt+0x90>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d101      	bne.n	8002094 <I2SEx_TxISR_I2SExt+0x50>
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <I2SEx_TxISR_I2SExt+0x94>)
 8002092:	e001      	b.n	8002098 <I2SEx_TxISR_I2SExt+0x54>
 8002094:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	490d      	ldr	r1, [pc, #52]	; (80020d4 <I2SEx_TxISR_I2SExt+0x90>)
 80020a0:	428b      	cmp	r3, r1
 80020a2:	d101      	bne.n	80020a8 <I2SEx_TxISR_I2SExt+0x64>
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <I2SEx_TxISR_I2SExt+0x94>)
 80020a6:	e001      	b.n	80020ac <I2SEx_TxISR_I2SExt+0x68>
 80020a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d106      	bne.n	80020ca <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff81 	bl	8001fcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40003800 	.word	0x40003800
 80020d8:	40003400 	.word	0x40003400

080020dc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68d8      	ldr	r0, [r3, #12]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	1c99      	adds	r1, r3, #2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80020f4:	b282      	uxth	r2, r0
 80020f6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800210a:	b29b      	uxth	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d113      	bne.n	8002138 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800211e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002124:	b29b      	uxth	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff ff4a 	bl	8001fcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a20      	ldr	r2, [pc, #128]	; (80021d0 <I2SEx_RxISR_I2SExt+0x90>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d101      	bne.n	8002156 <I2SEx_RxISR_I2SExt+0x16>
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <I2SEx_RxISR_I2SExt+0x94>)
 8002154:	e001      	b.n	800215a <I2SEx_RxISR_I2SExt+0x1a>
 8002156:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800215a:	68d8      	ldr	r0, [r3, #12]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	1c99      	adds	r1, r3, #2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002166:	b282      	uxth	r2, r0
 8002168:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800216e:	b29b      	uxth	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d121      	bne.n	80021c6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <I2SEx_RxISR_I2SExt+0x90>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d101      	bne.n	8002190 <I2SEx_RxISR_I2SExt+0x50>
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <I2SEx_RxISR_I2SExt+0x94>)
 800218e:	e001      	b.n	8002194 <I2SEx_RxISR_I2SExt+0x54>
 8002190:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	490d      	ldr	r1, [pc, #52]	; (80021d0 <I2SEx_RxISR_I2SExt+0x90>)
 800219c:	428b      	cmp	r3, r1
 800219e:	d101      	bne.n	80021a4 <I2SEx_RxISR_I2SExt+0x64>
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <I2SEx_RxISR_I2SExt+0x94>)
 80021a2:	e001      	b.n	80021a8 <I2SEx_RxISR_I2SExt+0x68>
 80021a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021ac:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d106      	bne.n	80021c6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff03 	bl	8001fcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40003800 	.word	0x40003800
 80021d4:	40003400 	.word	0x40003400

080021d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e267      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d075      	beq.n	80022e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021f6:	4b88      	ldr	r3, [pc, #544]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d00c      	beq.n	800221c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002202:	4b85      	ldr	r3, [pc, #532]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800220a:	2b08      	cmp	r3, #8
 800220c:	d112      	bne.n	8002234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800220e:	4b82      	ldr	r3, [pc, #520]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800221a:	d10b      	bne.n	8002234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221c:	4b7e      	ldr	r3, [pc, #504]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d05b      	beq.n	80022e0 <HAL_RCC_OscConfig+0x108>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d157      	bne.n	80022e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e242      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223c:	d106      	bne.n	800224c <HAL_RCC_OscConfig+0x74>
 800223e:	4b76      	ldr	r3, [pc, #472]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a75      	ldr	r2, [pc, #468]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e01d      	b.n	8002288 <HAL_RCC_OscConfig+0xb0>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x98>
 8002256:	4b70      	ldr	r3, [pc, #448]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a6f      	ldr	r2, [pc, #444]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 800225c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b6d      	ldr	r3, [pc, #436]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a6c      	ldr	r2, [pc, #432]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e00b      	b.n	8002288 <HAL_RCC_OscConfig+0xb0>
 8002270:	4b69      	ldr	r3, [pc, #420]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a68      	ldr	r2, [pc, #416]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b66      	ldr	r3, [pc, #408]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a65      	ldr	r2, [pc, #404]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7fe ff18 	bl	80010c4 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002298:	f7fe ff14 	bl	80010c4 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	; 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e207      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	4b5b      	ldr	r3, [pc, #364]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0xc0>
 80022b6:	e014      	b.n	80022e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7fe ff04 	bl	80010c4 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c0:	f7fe ff00 	bl	80010c4 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e1f3      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d2:	4b51      	ldr	r3, [pc, #324]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0xe8>
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d063      	beq.n	80023b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ee:	4b4a      	ldr	r3, [pc, #296]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022fa:	4b47      	ldr	r3, [pc, #284]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002302:	2b08      	cmp	r3, #8
 8002304:	d11c      	bne.n	8002340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002306:	4b44      	ldr	r3, [pc, #272]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d116      	bne.n	8002340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002312:	4b41      	ldr	r3, [pc, #260]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_RCC_OscConfig+0x152>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d001      	beq.n	800232a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e1c7      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232a:	4b3b      	ldr	r3, [pc, #236]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4937      	ldr	r1, [pc, #220]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233e:	e03a      	b.n	80023b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002348:	4b34      	ldr	r3, [pc, #208]	; (800241c <HAL_RCC_OscConfig+0x244>)
 800234a:	2201      	movs	r2, #1
 800234c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234e:	f7fe feb9 	bl	80010c4 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002356:	f7fe feb5 	bl	80010c4 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e1a8      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002368:	4b2b      	ldr	r3, [pc, #172]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002374:	4b28      	ldr	r3, [pc, #160]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4925      	ldr	r1, [pc, #148]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]
 8002388:	e015      	b.n	80023b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238a:	4b24      	ldr	r3, [pc, #144]	; (800241c <HAL_RCC_OscConfig+0x244>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7fe fe98 	bl	80010c4 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002398:	f7fe fe94 	bl	80010c4 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e187      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023aa:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d036      	beq.n	8002430 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d016      	beq.n	80023f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <HAL_RCC_OscConfig+0x248>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d0:	f7fe fe78 	bl	80010c4 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d8:	f7fe fe74 	bl	80010c4 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e167      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80023ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x200>
 80023f6:	e01b      	b.n	8002430 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_OscConfig+0x248>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fe:	f7fe fe61 	bl	80010c4 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002404:	e00e      	b.n	8002424 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002406:	f7fe fe5d 	bl	80010c4 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d907      	bls.n	8002424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e150      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
 8002418:	40023800 	.word	0x40023800
 800241c:	42470000 	.word	0x42470000
 8002420:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002424:	4b88      	ldr	r3, [pc, #544]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1ea      	bne.n	8002406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 8097 	beq.w	800256c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243e:	2300      	movs	r3, #0
 8002440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002442:	4b81      	ldr	r3, [pc, #516]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10f      	bne.n	800246e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	4b7d      	ldr	r3, [pc, #500]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	4a7c      	ldr	r2, [pc, #496]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245c:	6413      	str	r3, [r2, #64]	; 0x40
 800245e:	4b7a      	ldr	r3, [pc, #488]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800246a:	2301      	movs	r3, #1
 800246c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246e:	4b77      	ldr	r3, [pc, #476]	; (800264c <HAL_RCC_OscConfig+0x474>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	2b00      	cmp	r3, #0
 8002478:	d118      	bne.n	80024ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800247a:	4b74      	ldr	r3, [pc, #464]	; (800264c <HAL_RCC_OscConfig+0x474>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a73      	ldr	r2, [pc, #460]	; (800264c <HAL_RCC_OscConfig+0x474>)
 8002480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002486:	f7fe fe1d 	bl	80010c4 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248e:	f7fe fe19 	bl	80010c4 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e10c      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a0:	4b6a      	ldr	r3, [pc, #424]	; (800264c <HAL_RCC_OscConfig+0x474>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d106      	bne.n	80024c2 <HAL_RCC_OscConfig+0x2ea>
 80024b4:	4b64      	ldr	r3, [pc, #400]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	4a63      	ldr	r2, [pc, #396]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6713      	str	r3, [r2, #112]	; 0x70
 80024c0:	e01c      	b.n	80024fc <HAL_RCC_OscConfig+0x324>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b05      	cmp	r3, #5
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCC_OscConfig+0x30c>
 80024ca:	4b5f      	ldr	r3, [pc, #380]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ce:	4a5e      	ldr	r2, [pc, #376]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	6713      	str	r3, [r2, #112]	; 0x70
 80024d6:	4b5c      	ldr	r3, [pc, #368]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024da:	4a5b      	ldr	r2, [pc, #364]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6713      	str	r3, [r2, #112]	; 0x70
 80024e2:	e00b      	b.n	80024fc <HAL_RCC_OscConfig+0x324>
 80024e4:	4b58      	ldr	r3, [pc, #352]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	4a57      	ldr	r2, [pc, #348]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024ea:	f023 0301 	bic.w	r3, r3, #1
 80024ee:	6713      	str	r3, [r2, #112]	; 0x70
 80024f0:	4b55      	ldr	r3, [pc, #340]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f4:	4a54      	ldr	r2, [pc, #336]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024f6:	f023 0304 	bic.w	r3, r3, #4
 80024fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d015      	beq.n	8002530 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7fe fdde 	bl	80010c4 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250a:	e00a      	b.n	8002522 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800250c:	f7fe fdda 	bl	80010c4 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	; 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e0cb      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002522:	4b49      	ldr	r3, [pc, #292]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0ee      	beq.n	800250c <HAL_RCC_OscConfig+0x334>
 800252e:	e014      	b.n	800255a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002530:	f7fe fdc8 	bl	80010c4 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002536:	e00a      	b.n	800254e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002538:	f7fe fdc4 	bl	80010c4 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e0b5      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254e:	4b3e      	ldr	r3, [pc, #248]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1ee      	bne.n	8002538 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800255a:	7dfb      	ldrb	r3, [r7, #23]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d105      	bne.n	800256c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002560:	4b39      	ldr	r3, [pc, #228]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	4a38      	ldr	r2, [pc, #224]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80a1 	beq.w	80026b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002576:	4b34      	ldr	r3, [pc, #208]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b08      	cmp	r3, #8
 8002580:	d05c      	beq.n	800263c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d141      	bne.n	800260e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258a:	4b31      	ldr	r3, [pc, #196]	; (8002650 <HAL_RCC_OscConfig+0x478>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe fd98 	bl	80010c4 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe fd94 	bl	80010c4 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e087      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025aa:	4b27      	ldr	r3, [pc, #156]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	019b      	lsls	r3, r3, #6
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	3b01      	subs	r3, #1
 80025d0:	041b      	lsls	r3, r3, #16
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	061b      	lsls	r3, r3, #24
 80025da:	491b      	ldr	r1, [pc, #108]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e0:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <HAL_RCC_OscConfig+0x478>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e6:	f7fe fd6d 	bl	80010c4 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ee:	f7fe fd69 	bl	80010c4 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e05c      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x416>
 800260c:	e054      	b.n	80026b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <HAL_RCC_OscConfig+0x478>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7fe fd56 	bl	80010c4 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe fd52 	bl	80010c4 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e045      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x444>
 800263a:	e03d      	b.n	80026b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d107      	bne.n	8002654 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e038      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
 8002648:	40023800 	.word	0x40023800
 800264c:	40007000 	.word	0x40007000
 8002650:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002654:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <HAL_RCC_OscConfig+0x4ec>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d028      	beq.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d121      	bne.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	429a      	cmp	r2, r3
 800267c:	d11a      	bne.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002684:	4013      	ands	r3, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800268a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800268c:	4293      	cmp	r3, r2
 800268e:	d111      	bne.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	085b      	lsrs	r3, r3, #1
 800269c:	3b01      	subs	r3, #1
 800269e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d107      	bne.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800

080026c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0cc      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026dc:	4b68      	ldr	r3, [pc, #416]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d90c      	bls.n	8002704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b65      	ldr	r3, [pc, #404]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b63      	ldr	r3, [pc, #396]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0b8      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d020      	beq.n	8002752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800271c:	4b59      	ldr	r3, [pc, #356]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	4a58      	ldr	r2, [pc, #352]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002734:	4b53      	ldr	r3, [pc, #332]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4a52      	ldr	r2, [pc, #328]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800273e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002740:	4b50      	ldr	r3, [pc, #320]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	494d      	ldr	r1, [pc, #308]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d044      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d119      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e07f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d003      	beq.n	8002786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002782:	2b03      	cmp	r3, #3
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002786:	4b3f      	ldr	r3, [pc, #252]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e06f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002796:	4b3b      	ldr	r3, [pc, #236]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e067      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027a6:	4b37      	ldr	r3, [pc, #220]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f023 0203 	bic.w	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4934      	ldr	r1, [pc, #208]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b8:	f7fe fc84 	bl	80010c4 <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	e00a      	b.n	80027d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c0:	f7fe fc80 	bl	80010c4 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e04f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 020c 	and.w	r2, r3, #12
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d1eb      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027e8:	4b25      	ldr	r3, [pc, #148]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d20c      	bcs.n	8002810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b22      	ldr	r3, [pc, #136]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e032      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4916      	ldr	r1, [pc, #88]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	490e      	ldr	r1, [pc, #56]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	4313      	orrs	r3, r2
 800284c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800284e:	f000 f821 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8002852:	4602      	mov	r2, r0
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	490a      	ldr	r1, [pc, #40]	; (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	5ccb      	ldrb	r3, [r1, r3]
 8002862:	fa22 f303 	lsr.w	r3, r2, r3
 8002866:	4a09      	ldr	r2, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1c8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fb24 	bl	8000ebc <HAL_InitTick>

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023c00 	.word	0x40023c00
 8002884:	40023800 	.word	0x40023800
 8002888:	08005e00 	.word	0x08005e00
 800288c:	20000004 	.word	0x20000004
 8002890:	20000008 	.word	0x20000008

08002894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002898:	b094      	sub	sp, #80	; 0x50
 800289a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	647b      	str	r3, [r7, #68]	; 0x44
 80028a0:	2300      	movs	r3, #0
 80028a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028a4:	2300      	movs	r3, #0
 80028a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ac:	4b79      	ldr	r3, [pc, #484]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d00d      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x40>
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	f200 80e1 	bhi.w	8002a80 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x34>
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d003      	beq.n	80028ce <HAL_RCC_GetSysClockFreq+0x3a>
 80028c6:	e0db      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028c8:	4b73      	ldr	r3, [pc, #460]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x204>)
 80028ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028cc:	e0db      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ce:	4b73      	ldr	r3, [pc, #460]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x208>)
 80028d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028d2:	e0d8      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028d4:	4b6f      	ldr	r3, [pc, #444]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028de:	4b6d      	ldr	r3, [pc, #436]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d063      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ea:	4b6a      	ldr	r3, [pc, #424]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	099b      	lsrs	r3, r3, #6
 80028f0:	2200      	movs	r2, #0
 80028f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80028f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028fc:	633b      	str	r3, [r7, #48]	; 0x30
 80028fe:	2300      	movs	r3, #0
 8002900:	637b      	str	r3, [r7, #52]	; 0x34
 8002902:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002906:	4622      	mov	r2, r4
 8002908:	462b      	mov	r3, r5
 800290a:	f04f 0000 	mov.w	r0, #0
 800290e:	f04f 0100 	mov.w	r1, #0
 8002912:	0159      	lsls	r1, r3, #5
 8002914:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002918:	0150      	lsls	r0, r2, #5
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4621      	mov	r1, r4
 8002920:	1a51      	subs	r1, r2, r1
 8002922:	6139      	str	r1, [r7, #16]
 8002924:	4629      	mov	r1, r5
 8002926:	eb63 0301 	sbc.w	r3, r3, r1
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002938:	4659      	mov	r1, fp
 800293a:	018b      	lsls	r3, r1, #6
 800293c:	4651      	mov	r1, sl
 800293e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002942:	4651      	mov	r1, sl
 8002944:	018a      	lsls	r2, r1, #6
 8002946:	4651      	mov	r1, sl
 8002948:	ebb2 0801 	subs.w	r8, r2, r1
 800294c:	4659      	mov	r1, fp
 800294e:	eb63 0901 	sbc.w	r9, r3, r1
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800295e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002966:	4690      	mov	r8, r2
 8002968:	4699      	mov	r9, r3
 800296a:	4623      	mov	r3, r4
 800296c:	eb18 0303 	adds.w	r3, r8, r3
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	462b      	mov	r3, r5
 8002974:	eb49 0303 	adc.w	r3, r9, r3
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002986:	4629      	mov	r1, r5
 8002988:	024b      	lsls	r3, r1, #9
 800298a:	4621      	mov	r1, r4
 800298c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002990:	4621      	mov	r1, r4
 8002992:	024a      	lsls	r2, r1, #9
 8002994:	4610      	mov	r0, r2
 8002996:	4619      	mov	r1, r3
 8002998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800299a:	2200      	movs	r2, #0
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28
 800299e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029a4:	f7fd fc1c 	bl	80001e0 <__aeabi_uldivmod>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4613      	mov	r3, r2
 80029ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029b0:	e058      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b2:	4b38      	ldr	r3, [pc, #224]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	099b      	lsrs	r3, r3, #6
 80029b8:	2200      	movs	r2, #0
 80029ba:	4618      	mov	r0, r3
 80029bc:	4611      	mov	r1, r2
 80029be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029c2:	623b      	str	r3, [r7, #32]
 80029c4:	2300      	movs	r3, #0
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
 80029c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029cc:	4642      	mov	r2, r8
 80029ce:	464b      	mov	r3, r9
 80029d0:	f04f 0000 	mov.w	r0, #0
 80029d4:	f04f 0100 	mov.w	r1, #0
 80029d8:	0159      	lsls	r1, r3, #5
 80029da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029de:	0150      	lsls	r0, r2, #5
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4641      	mov	r1, r8
 80029e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80029ea:	4649      	mov	r1, r9
 80029ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a04:	ebb2 040a 	subs.w	r4, r2, sl
 8002a08:	eb63 050b 	sbc.w	r5, r3, fp
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	00eb      	lsls	r3, r5, #3
 8002a16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a1a:	00e2      	lsls	r2, r4, #3
 8002a1c:	4614      	mov	r4, r2
 8002a1e:	461d      	mov	r5, r3
 8002a20:	4643      	mov	r3, r8
 8002a22:	18e3      	adds	r3, r4, r3
 8002a24:	603b      	str	r3, [r7, #0]
 8002a26:	464b      	mov	r3, r9
 8002a28:	eb45 0303 	adc.w	r3, r5, r3
 8002a2c:	607b      	str	r3, [r7, #4]
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	028b      	lsls	r3, r1, #10
 8002a3e:	4621      	mov	r1, r4
 8002a40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a44:	4621      	mov	r1, r4
 8002a46:	028a      	lsls	r2, r1, #10
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a4e:	2200      	movs	r2, #0
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	61fa      	str	r2, [r7, #28]
 8002a54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a58:	f7fd fbc2 	bl	80001e0 <__aeabi_uldivmod>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4613      	mov	r3, r2
 8002a62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	0c1b      	lsrs	r3, r3, #16
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a7e:	e002      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3750      	adds	r7, #80	; 0x50
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800
 8002a98:	00f42400 	.word	0x00f42400
 8002a9c:	007a1200 	.word	0x007a1200

08002aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000004 	.word	0x20000004

08002ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002abc:	f7ff fff0 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0a9b      	lsrs	r3, r3, #10
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	; (8002adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	08005e10 	.word	0x08005e10

08002ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ae4:	f7ff ffdc 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	0b5b      	lsrs	r3, r3, #13
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	4903      	ldr	r1, [pc, #12]	; (8002b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af6:	5ccb      	ldrb	r3, [r1, r3]
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	08005e10 	.word	0x08005e10

08002b08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	220f      	movs	r2, #15
 8002b16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b18:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_RCC_GetClockConfig+0x5c>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0203 	and.w	r2, r3, #3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <HAL_RCC_GetClockConfig+0x5c>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <HAL_RCC_GetClockConfig+0x5c>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_RCC_GetClockConfig+0x5c>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	08db      	lsrs	r3, r3, #3
 8002b42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b4a:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <HAL_RCC_GetClockConfig+0x60>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0207 	and.w	r2, r3, #7
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	601a      	str	r2, [r3, #0]
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40023c00 	.word	0x40023c00

08002b6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d105      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d038      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b94:	4b68      	ldr	r3, [pc, #416]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b9a:	f7fe fa93 	bl	80010c4 <HAL_GetTick>
 8002b9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ba2:	f7fe fa8f 	bl	80010c4 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e0bd      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bb4:	4b61      	ldr	r3, [pc, #388]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	019b      	lsls	r3, r3, #6
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	071b      	lsls	r3, r3, #28
 8002bd2:	495a      	ldr	r1, [pc, #360]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bda:	4b57      	ldr	r3, [pc, #348]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002be0:	f7fe fa70 	bl	80010c4 <HAL_GetTick>
 8002be4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002be8:	f7fe fa6c 	bl	80010c4 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e09a      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bfa:	4b50      	ldr	r3, [pc, #320]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8083 	beq.w	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	4b48      	ldr	r3, [pc, #288]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	4a47      	ldr	r2, [pc, #284]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c22:	6413      	str	r3, [r2, #64]	; 0x40
 8002c24:	4b45      	ldr	r3, [pc, #276]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002c30:	4b43      	ldr	r3, [pc, #268]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a42      	ldr	r2, [pc, #264]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c3c:	f7fe fa42 	bl	80010c4 <HAL_GetTick>
 8002c40:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c44:	f7fe fa3e 	bl	80010c4 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e06c      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c56:	4b3a      	ldr	r3, [pc, #232]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c62:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d02f      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d028      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c80:	4b2e      	ldr	r3, [pc, #184]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c88:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c8a:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c90:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c96:	4a29      	ldr	r2, [pc, #164]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c9c:	4b27      	ldr	r3, [pc, #156]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d114      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7fe fa0c 	bl	80010c4 <HAL_GetTick>
 8002cac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb0:	f7fe fa08 	bl	80010c4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e034      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc6:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0ee      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cde:	d10d      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002ce0:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf4:	4911      	ldr	r1, [pc, #68]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
 8002cfa:	e005      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4a0e      	ldr	r2, [pc, #56]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d06:	6093      	str	r3, [r2, #8]
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d14:	4909      	ldr	r1, [pc, #36]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	7d1a      	ldrb	r2, [r3, #20]
 8002d2a:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002d2c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	42470068 	.word	0x42470068
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40007000 	.word	0x40007000
 8002d44:	42470e40 	.word	0x42470e40
 8002d48:	424711e0 	.word	0x424711e0

08002d4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d141      	bne.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002d6a:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d006      	beq.n	8002d88 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d80:	d131      	bne.n	8002de6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002d82:	4b20      	ldr	r3, [pc, #128]	; (8002e04 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002d84:	617b      	str	r3, [r7, #20]
          break;
 8002d86:	e031      	b.n	8002dec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d88:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d94:	d109      	bne.n	8002daa <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002d96:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002da0:	4a19      	ldr	r2, [pc, #100]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	e008      	b.n	8002dbc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db4:	4a15      	ldr	r2, [pc, #84]	; (8002e0c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002dbc:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dc2:	099b      	lsrs	r3, r3, #6
 8002dc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	fb02 f303 	mul.w	r3, r2, r3
 8002dce:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dd6:	0f1b      	lsrs	r3, r3, #28
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	617b      	str	r3, [r7, #20]
          break;
 8002de4:	e002      	b.n	8002dec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
          break;
 8002dea:	bf00      	nop
        }
      }
      break;
 8002dec:	e000      	b.n	8002df0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 8002dee:	bf00      	nop
    }
  }
  return frequency;
 8002df0:	697b      	ldr	r3, [r7, #20]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800
 8002e04:	00bb8000 	.word	0x00bb8000
 8002e08:	007a1200 	.word	0x007a1200
 8002e0c:	00f42400 	.word	0x00f42400

08002e10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e07b      	b.n	8002f1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d108      	bne.n	8002e3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e32:	d009      	beq.n	8002e48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	61da      	str	r2, [r3, #28]
 8002e3a:	e005      	b.n	8002e48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fd ffe2 	bl	8000e2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ecc:	ea42 0103 	orr.w	r1, r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	0c1b      	lsrs	r3, r3, #16
 8002ee6:	f003 0104 	and.w	r1, r3, #4
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	f003 0210 	and.w	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69da      	ldr	r2, [r3, #28]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e041      	b.n	8002fb8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d106      	bne.n	8002f4e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f839 	bl	8002fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2202      	movs	r2, #2
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4610      	mov	r0, r2
 8002f62:	f000 f9b1 	bl	80032c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d001      	beq.n	8002fec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e044      	b.n	8003076 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1e      	ldr	r2, [pc, #120]	; (8003084 <HAL_TIM_Base_Start_IT+0xb0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d018      	beq.n	8003040 <HAL_TIM_Base_Start_IT+0x6c>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003016:	d013      	beq.n	8003040 <HAL_TIM_Base_Start_IT+0x6c>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <HAL_TIM_Base_Start_IT+0xb4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00e      	beq.n	8003040 <HAL_TIM_Base_Start_IT+0x6c>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a19      	ldr	r2, [pc, #100]	; (800308c <HAL_TIM_Base_Start_IT+0xb8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d009      	beq.n	8003040 <HAL_TIM_Base_Start_IT+0x6c>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a17      	ldr	r2, [pc, #92]	; (8003090 <HAL_TIM_Base_Start_IT+0xbc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d004      	beq.n	8003040 <HAL_TIM_Base_Start_IT+0x6c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a16      	ldr	r2, [pc, #88]	; (8003094 <HAL_TIM_Base_Start_IT+0xc0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d111      	bne.n	8003064 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b06      	cmp	r3, #6
 8003050:	d010      	beq.n	8003074 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0201 	orr.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003062:	e007      	b.n	8003074 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40010000 	.word	0x40010000
 8003088:	40000400 	.word	0x40000400
 800308c:	40000800 	.word	0x40000800
 8003090:	40000c00 	.word	0x40000c00
 8003094:	40014000 	.word	0x40014000

08003098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d020      	beq.n	80030fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01b      	beq.n	80030fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0202 	mvn.w	r2, #2
 80030cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f8d2 	bl	800328c <HAL_TIM_IC_CaptureCallback>
 80030e8:	e005      	b.n	80030f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f8c4 	bl	8003278 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f8d5 	bl	80032a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	d020      	beq.n	8003148 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01b      	beq.n	8003148 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0204 	mvn.w	r2, #4
 8003118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2202      	movs	r2, #2
 800311e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f8ac 	bl	800328c <HAL_TIM_IC_CaptureCallback>
 8003134:	e005      	b.n	8003142 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f89e 	bl	8003278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f8af 	bl	80032a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d020      	beq.n	8003194 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01b      	beq.n	8003194 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0208 	mvn.w	r2, #8
 8003164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2204      	movs	r2, #4
 800316a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f886 	bl	800328c <HAL_TIM_IC_CaptureCallback>
 8003180:	e005      	b.n	800318e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f878 	bl	8003278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f889 	bl	80032a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	2b00      	cmp	r3, #0
 800319c:	d020      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01b      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0210 	mvn.w	r2, #16
 80031b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2208      	movs	r2, #8
 80031b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f860 	bl	800328c <HAL_TIM_IC_CaptureCallback>
 80031cc:	e005      	b.n	80031da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f852 	bl	8003278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f863 	bl	80032a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0201 	mvn.w	r2, #1
 80031fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd fcba 	bl	8000b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00c      	beq.n	8003228 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003214:	2b00      	cmp	r3, #0
 8003216:	d007      	beq.n	8003228 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f8e6 	bl	80033f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00c      	beq.n	800324c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003238:	2b00      	cmp	r3, #0
 800323a:	d007      	beq.n	800324c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f834 	bl	80032b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00c      	beq.n	8003270 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d007      	beq.n	8003270 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0220 	mvn.w	r2, #32
 8003268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f8b8 	bl	80033e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003270:	bf00      	nop
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a3a      	ldr	r2, [pc, #232]	; (80033c4 <TIM_Base_SetConfig+0xfc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00f      	beq.n	8003300 <TIM_Base_SetConfig+0x38>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e6:	d00b      	beq.n	8003300 <TIM_Base_SetConfig+0x38>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a37      	ldr	r2, [pc, #220]	; (80033c8 <TIM_Base_SetConfig+0x100>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d007      	beq.n	8003300 <TIM_Base_SetConfig+0x38>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a36      	ldr	r2, [pc, #216]	; (80033cc <TIM_Base_SetConfig+0x104>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_Base_SetConfig+0x38>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a35      	ldr	r2, [pc, #212]	; (80033d0 <TIM_Base_SetConfig+0x108>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d108      	bne.n	8003312 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a2b      	ldr	r2, [pc, #172]	; (80033c4 <TIM_Base_SetConfig+0xfc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01b      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003320:	d017      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a28      	ldr	r2, [pc, #160]	; (80033c8 <TIM_Base_SetConfig+0x100>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d013      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a27      	ldr	r2, [pc, #156]	; (80033cc <TIM_Base_SetConfig+0x104>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00f      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a26      	ldr	r2, [pc, #152]	; (80033d0 <TIM_Base_SetConfig+0x108>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00b      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a25      	ldr	r2, [pc, #148]	; (80033d4 <TIM_Base_SetConfig+0x10c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d007      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a24      	ldr	r2, [pc, #144]	; (80033d8 <TIM_Base_SetConfig+0x110>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d003      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a23      	ldr	r2, [pc, #140]	; (80033dc <TIM_Base_SetConfig+0x114>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d108      	bne.n	8003364 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a0e      	ldr	r2, [pc, #56]	; (80033c4 <TIM_Base_SetConfig+0xfc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d103      	bne.n	8003398 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d105      	bne.n	80033b6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f023 0201 	bic.w	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	611a      	str	r2, [r3, #16]
  }
}
 80033b6:	bf00      	nop
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40010000 	.word	0x40010000
 80033c8:	40000400 	.word	0x40000400
 80033cc:	40000800 	.word	0x40000800
 80033d0:	40000c00 	.word	0x40000c00
 80033d4:	40014000 	.word	0x40014000
 80033d8:	40014400 	.word	0x40014400
 80033dc:	40014800 	.word	0x40014800

080033e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800341a:	2b84      	cmp	r3, #132	; 0x84
 800341c:	d005      	beq.n	800342a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800341e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4413      	add	r3, r2
 8003426:	3303      	adds	r3, #3
 8003428:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800342a:	68fb      	ldr	r3, [r7, #12]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800343e:	f3ef 8305 	mrs	r3, IPSR
 8003442:	607b      	str	r3, [r7, #4]
  return(result);
 8003444:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003446:	2b00      	cmp	r3, #0
 8003448:	bf14      	ite	ne
 800344a:	2301      	movne	r3, #1
 800344c:	2300      	moveq	r3, #0
 800344e:	b2db      	uxtb	r3, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003460:	f001 f926 	bl	80046b0 <vTaskStartScheduler>
  
  return osOK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	bd80      	pop	{r7, pc}

0800346a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800346a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346c:	b089      	sub	sp, #36	; 0x24
 800346e:	af04      	add	r7, sp, #16
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d020      	beq.n	80034be <osThreadCreate+0x54>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d01c      	beq.n	80034be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685c      	ldr	r4, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691e      	ldr	r6, [r3, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff ffb6 	bl	8003408 <makeFreeRtosPriority>
 800349c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034a6:	9202      	str	r2, [sp, #8]
 80034a8:	9301      	str	r3, [sp, #4]
 80034aa:	9100      	str	r1, [sp, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	4632      	mov	r2, r6
 80034b0:	4629      	mov	r1, r5
 80034b2:	4620      	mov	r0, r4
 80034b4:	f000 ff1e 	bl	80042f4 <xTaskCreateStatic>
 80034b8:	4603      	mov	r3, r0
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	e01c      	b.n	80034f8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685c      	ldr	r4, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034ca:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff ff98 	bl	8003408 <makeFreeRtosPriority>
 80034d8:	4602      	mov	r2, r0
 80034da:	f107 030c 	add.w	r3, r7, #12
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	9200      	str	r2, [sp, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	4632      	mov	r2, r6
 80034e6:	4629      	mov	r1, r5
 80034e8:	4620      	mov	r0, r4
 80034ea:	f000 ff60 	bl	80043ae <xTaskCreate>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d001      	beq.n	80034f8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e000      	b.n	80034fa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80034f8:	68fb      	ldr	r3, [r7, #12]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003502 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <osDelay+0x16>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	e000      	b.n	800351a <osDelay+0x18>
 8003518:	2301      	movs	r3, #1
 800351a:	4618      	mov	r0, r3
 800351c:	f001 f894 	bl	8004648 <vTaskDelay>
  
  return osOK;
 8003520:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af02      	add	r7, sp, #8
 8003530:	6078      	str	r0, [r7, #4]
 8003532:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00f      	beq.n	800355c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d10a      	bne.n	8003558 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2203      	movs	r2, #3
 8003548:	9200      	str	r2, [sp, #0]
 800354a:	2200      	movs	r2, #0
 800354c:	2100      	movs	r1, #0
 800354e:	2001      	movs	r0, #1
 8003550:	f000 f9be 	bl	80038d0 <xQueueGenericCreateStatic>
 8003554:	4603      	mov	r3, r0
 8003556:	e016      	b.n	8003586 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003558:	2300      	movs	r3, #0
 800355a:	e014      	b.n	8003586 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d110      	bne.n	8003584 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8003562:	2203      	movs	r2, #3
 8003564:	2100      	movs	r1, #0
 8003566:	2001      	movs	r0, #1
 8003568:	f000 fa2a 	bl	80039c0 <xQueueGenericCreate>
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <osSemaphoreCreate+0x56>
 8003574:	2300      	movs	r3, #0
 8003576:	2200      	movs	r2, #0
 8003578:	2100      	movs	r1, #0
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 fa7a 	bl	8003a74 <xQueueGenericSend>
      return sema;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	e000      	b.n	8003586 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003584:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800359a:	2300      	movs	r3, #0
 800359c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	e03a      	b.n	800361e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b2:	d103      	bne.n	80035bc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80035b4:	f04f 33ff 	mov.w	r3, #4294967295
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	e009      	b.n	80035d0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d006      	beq.n	80035d0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <osSemaphoreWait+0x40>
      ticks = 1;
 80035cc:	2301      	movs	r3, #1
 80035ce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80035d0:	f7ff ff32 	bl	8003438 <inHandlerMode>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d017      	beq.n	800360a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80035da:	f107 0308 	add.w	r3, r7, #8
 80035de:	461a      	mov	r2, r3
 80035e0:	2100      	movs	r1, #0
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fcde 	bl	8003fa4 <xQueueReceiveFromISR>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d001      	beq.n	80035f2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80035ee:	23ff      	movs	r3, #255	; 0xff
 80035f0:	e015      	b.n	800361e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d011      	beq.n	800361c <osSemaphoreWait+0x8c>
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <osSemaphoreWait+0x98>)
 80035fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	e008      	b.n	800361c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800360a:	68f9      	ldr	r1, [r7, #12]
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fbbd 	bl	8003d8c <xQueueSemaphoreTake>
 8003612:	4603      	mov	r3, r0
 8003614:	2b01      	cmp	r3, #1
 8003616:	d001      	beq.n	800361c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003618:	23ff      	movs	r3, #255	; 0xff
 800361a:	e000      	b.n	800361e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	e000ed04 	.word	0xe000ed04

0800362c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003638:	2300      	movs	r3, #0
 800363a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800363c:	f7ff fefc 	bl	8003438 <inHandlerMode>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d016      	beq.n	8003674 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003646:	f107 0308 	add.w	r3, r7, #8
 800364a:	4619      	mov	r1, r3
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fb0f 	bl	8003c70 <xQueueGiveFromISR>
 8003652:	4603      	mov	r3, r0
 8003654:	2b01      	cmp	r3, #1
 8003656:	d001      	beq.n	800365c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003658:	23ff      	movs	r3, #255	; 0xff
 800365a:	e017      	b.n	800368c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d013      	beq.n	800368a <osSemaphoreRelease+0x5e>
 8003662:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <osSemaphoreRelease+0x68>)
 8003664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	e00a      	b.n	800368a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003674:	2300      	movs	r3, #0
 8003676:	2200      	movs	r2, #0
 8003678:	2100      	movs	r1, #0
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f9fa 	bl	8003a74 <xQueueGenericSend>
 8003680:	4603      	mov	r3, r0
 8003682:	2b01      	cmp	r3, #1
 8003684:	d001      	beq.n	800368a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003686:	23ff      	movs	r3, #255	; 0xff
 8003688:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800368a:	68fb      	ldr	r3, [r7, #12]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	e000ed04 	.word	0xe000ed04

08003698 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f103 0208 	add.w	r2, r3, #8
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f04f 32ff 	mov.w	r2, #4294967295
 80036b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f103 0208 	add.w	r2, r3, #8
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f103 0208 	add.w	r2, r3, #8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036f2:	b480      	push	{r7}
 80036f4:	b085      	sub	sp, #20
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	601a      	str	r2, [r3, #0]
}
 800372e:	bf00      	nop
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d103      	bne.n	800375a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	e00c      	b.n	8003774 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3308      	adds	r3, #8
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	e002      	b.n	8003768 <vListInsert+0x2e>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	429a      	cmp	r2, r3
 8003772:	d2f6      	bcs.n	8003762 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	601a      	str	r2, [r3, #0]
}
 80037a0:	bf00      	nop
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6892      	ldr	r2, [r2, #8]
 80037c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6852      	ldr	r2, [r2, #4]
 80037cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d103      	bne.n	80037e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	1e5a      	subs	r2, r3, #1
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10a      	bne.n	800382a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003826:	bf00      	nop
 8003828:	e7fe      	b.n	8003828 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800382a:	f001 fea3 	bl	8005574 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003836:	68f9      	ldr	r1, [r7, #12]
 8003838:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800383a:	fb01 f303 	mul.w	r3, r1, r3
 800383e:	441a      	add	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385a:	3b01      	subs	r3, #1
 800385c:	68f9      	ldr	r1, [r7, #12]
 800385e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003860:	fb01 f303 	mul.w	r3, r1, r3
 8003864:	441a      	add	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	22ff      	movs	r2, #255	; 0xff
 800386e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	22ff      	movs	r2, #255	; 0xff
 8003876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d114      	bne.n	80038aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01a      	beq.n	80038be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3310      	adds	r3, #16
 800388c:	4618      	mov	r0, r3
 800388e:	f001 f961 	bl	8004b54 <xTaskRemoveFromEventList>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d012      	beq.n	80038be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <xQueueGenericReset+0xcc>)
 800389a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	e009      	b.n	80038be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3310      	adds	r3, #16
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff fef2 	bl	8003698 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3324      	adds	r3, #36	; 0x24
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff feed 	bl	8003698 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038be:	f001 fe89 	bl	80055d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038c2:	2301      	movs	r3, #1
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	e000ed04 	.word	0xe000ed04

080038d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08e      	sub	sp, #56	; 0x38
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038f6:	bf00      	nop
 80038f8:	e7fe      	b.n	80038f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10a      	bne.n	8003916 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003912:	bf00      	nop
 8003914:	e7fe      	b.n	8003914 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <xQueueGenericCreateStatic+0x52>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <xQueueGenericCreateStatic+0x56>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <xQueueGenericCreateStatic+0x58>
 8003926:	2300      	movs	r3, #0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	623b      	str	r3, [r7, #32]
}
 800393e:	bf00      	nop
 8003940:	e7fe      	b.n	8003940 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <xQueueGenericCreateStatic+0x7e>
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <xQueueGenericCreateStatic+0x82>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <xQueueGenericCreateStatic+0x84>
 8003952:	2300      	movs	r3, #0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	61fb      	str	r3, [r7, #28]
}
 800396a:	bf00      	nop
 800396c:	e7fe      	b.n	800396c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800396e:	2348      	movs	r3, #72	; 0x48
 8003970:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b48      	cmp	r3, #72	; 0x48
 8003976:	d00a      	beq.n	800398e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	61bb      	str	r3, [r7, #24]
}
 800398a:	bf00      	nop
 800398c:	e7fe      	b.n	800398c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800398e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00d      	beq.n	80039b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80039a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	4613      	mov	r3, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f83f 	bl	8003a34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3730      	adds	r7, #48	; 0x30
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	4613      	mov	r3, r2
 80039cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <xQueueGenericCreate+0x2a>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	613b      	str	r3, [r7, #16]
}
 80039e6:	bf00      	nop
 80039e8:	e7fe      	b.n	80039e8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	fb02 f303 	mul.w	r3, r2, r3
 80039f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	3348      	adds	r3, #72	; 0x48
 80039f8:	4618      	mov	r0, r3
 80039fa:	f001 fedd 	bl	80057b8 <pvPortMalloc>
 80039fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d011      	beq.n	8003a2a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	3348      	adds	r3, #72	; 0x48
 8003a0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a18:	79fa      	ldrb	r2, [r7, #7]
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	68b9      	ldr	r1, [r7, #8]
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f805 	bl	8003a34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a2a:	69bb      	ldr	r3, [r7, #24]
	}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3720      	adds	r7, #32
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d103      	bne.n	8003a50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	e002      	b.n	8003a56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a62:	2101      	movs	r1, #1
 8003a64:	69b8      	ldr	r0, [r7, #24]
 8003a66:	f7ff fecb 	bl	8003800 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a6a:	bf00      	nop
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08e      	sub	sp, #56	; 0x38
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a82:	2300      	movs	r3, #0
 8003a84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <xQueueGenericSend+0x32>
	__asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003aa2:	bf00      	nop
 8003aa4:	e7fe      	b.n	8003aa4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d103      	bne.n	8003ab4 <xQueueGenericSend+0x40>
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <xQueueGenericSend+0x44>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <xQueueGenericSend+0x46>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10a      	bne.n	8003ad4 <xQueueGenericSend+0x60>
	__asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ad0:	bf00      	nop
 8003ad2:	e7fe      	b.n	8003ad2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d103      	bne.n	8003ae2 <xQueueGenericSend+0x6e>
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <xQueueGenericSend+0x72>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <xQueueGenericSend+0x74>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <xQueueGenericSend+0x8e>
	__asm volatile
 8003aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	623b      	str	r3, [r7, #32]
}
 8003afe:	bf00      	nop
 8003b00:	e7fe      	b.n	8003b00 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b02:	f001 f9e7 	bl	8004ed4 <xTaskGetSchedulerState>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d102      	bne.n	8003b12 <xQueueGenericSend+0x9e>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <xQueueGenericSend+0xa2>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <xQueueGenericSend+0xa4>
 8003b16:	2300      	movs	r3, #0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10a      	bne.n	8003b32 <xQueueGenericSend+0xbe>
	__asm volatile
 8003b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b20:	f383 8811 	msr	BASEPRI, r3
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	61fb      	str	r3, [r7, #28]
}
 8003b2e:	bf00      	nop
 8003b30:	e7fe      	b.n	8003b30 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b32:	f001 fd1f 	bl	8005574 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d302      	bcc.n	8003b48 <xQueueGenericSend+0xd4>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d129      	bne.n	8003b9c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	68b9      	ldr	r1, [r7, #8]
 8003b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b4e:	f000 fac1 	bl	80040d4 <prvCopyDataToQueue>
 8003b52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d010      	beq.n	8003b7e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	3324      	adds	r3, #36	; 0x24
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fff7 	bl	8004b54 <xTaskRemoveFromEventList>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d013      	beq.n	8003b94 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b6c:	4b3f      	ldr	r3, [pc, #252]	; (8003c6c <xQueueGenericSend+0x1f8>)
 8003b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	e00a      	b.n	8003b94 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d007      	beq.n	8003b94 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b84:	4b39      	ldr	r3, [pc, #228]	; (8003c6c <xQueueGenericSend+0x1f8>)
 8003b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b94:	f001 fd1e 	bl	80055d4 <vPortExitCritical>
				return pdPASS;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e063      	b.n	8003c64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d103      	bne.n	8003baa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ba2:	f001 fd17 	bl	80055d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e05c      	b.n	8003c64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d106      	bne.n	8003bbe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bb0:	f107 0314 	add.w	r3, r7, #20
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f001 f82f 	bl	8004c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bbe:	f001 fd09 	bl	80055d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bc2:	f000 fddf 	bl	8004784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bc6:	f001 fcd5 	bl	8005574 <vPortEnterCritical>
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bd0:	b25b      	sxtb	r3, r3
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd6:	d103      	bne.n	8003be0 <xQueueGenericSend+0x16c>
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003be6:	b25b      	sxtb	r3, r3
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bec:	d103      	bne.n	8003bf6 <xQueueGenericSend+0x182>
 8003bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bf6:	f001 fced 	bl	80055d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bfa:	1d3a      	adds	r2, r7, #4
 8003bfc:	f107 0314 	add.w	r3, r7, #20
 8003c00:	4611      	mov	r1, r2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f001 f81e 	bl	8004c44 <xTaskCheckForTimeOut>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d124      	bne.n	8003c58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c10:	f000 fb58 	bl	80042c4 <prvIsQueueFull>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d018      	beq.n	8003c4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	3310      	adds	r3, #16
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 ff72 	bl	8004b0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c2a:	f000 fae3 	bl	80041f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c2e:	f000 fdb7 	bl	80047a0 <xTaskResumeAll>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f47f af7c 	bne.w	8003b32 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003c3a:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <xQueueGenericSend+0x1f8>)
 8003c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	e772      	b.n	8003b32 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c4e:	f000 fad1 	bl	80041f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c52:	f000 fda5 	bl	80047a0 <xTaskResumeAll>
 8003c56:	e76c      	b.n	8003b32 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c5a:	f000 facb 	bl	80041f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c5e:	f000 fd9f 	bl	80047a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3738      	adds	r7, #56	; 0x38
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	e000ed04 	.word	0xe000ed04

08003c70 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08e      	sub	sp, #56	; 0x38
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	623b      	str	r3, [r7, #32]
}
 8003c96:	bf00      	nop
 8003c98:	e7fe      	b.n	8003c98 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	61fb      	str	r3, [r7, #28]
}
 8003cb4:	bf00      	nop
 8003cb6:	e7fe      	b.n	8003cb6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d103      	bne.n	8003cc8 <xQueueGiveFromISR+0x58>
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <xQueueGiveFromISR+0x5c>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <xQueueGiveFromISR+0x5e>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10a      	bne.n	8003ce8 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	61bb      	str	r3, [r7, #24]
}
 8003ce4:	bf00      	nop
 8003ce6:	e7fe      	b.n	8003ce6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ce8:	f001 fd26 	bl	8005738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003cec:	f3ef 8211 	mrs	r2, BASEPRI
 8003cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	617a      	str	r2, [r7, #20]
 8003d02:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d04:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d06:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d22b      	bcs.n	8003d70 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d32:	d112      	bne.n	8003d5a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d016      	beq.n	8003d6a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	3324      	adds	r3, #36	; 0x24
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 ff07 	bl	8004b54 <xTaskRemoveFromEventList>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00e      	beq.n	8003d6a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2201      	movs	r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e007      	b.n	8003d6a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d5e:	3301      	adds	r3, #1
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	b25a      	sxtb	r2, r3
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d6e:	e001      	b.n	8003d74 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d70:	2300      	movs	r3, #0
 8003d72:	637b      	str	r3, [r7, #52]	; 0x34
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3738      	adds	r7, #56	; 0x38
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08e      	sub	sp, #56	; 0x38
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	623b      	str	r3, [r7, #32]
}
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	61fb      	str	r3, [r7, #28]
}
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ddc:	f001 f87a 	bl	8004ed4 <xTaskGetSchedulerState>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d102      	bne.n	8003dec <xQueueSemaphoreTake+0x60>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <xQueueSemaphoreTake+0x64>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <xQueueSemaphoreTake+0x66>
 8003df0:	2300      	movs	r3, #0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	61bb      	str	r3, [r7, #24]
}
 8003e08:	bf00      	nop
 8003e0a:	e7fe      	b.n	8003e0a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e0c:	f001 fbb2 	bl	8005574 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e14:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d024      	beq.n	8003e66 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	1e5a      	subs	r2, r3, #1
 8003e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d104      	bne.n	8003e36 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003e2c:	f001 f9fa 	bl	8005224 <pvTaskIncrementMutexHeldCount>
 8003e30:	4602      	mov	r2, r0
 8003e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e34:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00f      	beq.n	8003e5e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e40:	3310      	adds	r3, #16
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fe86 	bl	8004b54 <xTaskRemoveFromEventList>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d007      	beq.n	8003e5e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e4e:	4b54      	ldr	r3, [pc, #336]	; (8003fa0 <xQueueSemaphoreTake+0x214>)
 8003e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e5e:	f001 fbb9 	bl	80055d4 <vPortExitCritical>
				return pdPASS;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e097      	b.n	8003f96 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d111      	bne.n	8003e90 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	617b      	str	r3, [r7, #20]
}
 8003e84:	bf00      	nop
 8003e86:	e7fe      	b.n	8003e86 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003e88:	f001 fba4 	bl	80055d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e082      	b.n	8003f96 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 febc 	bl	8004c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ea4:	f001 fb96 	bl	80055d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ea8:	f000 fc6c 	bl	8004784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eac:	f001 fb62 	bl	8005574 <vPortEnterCritical>
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eb6:	b25b      	sxtb	r3, r3
 8003eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebc:	d103      	bne.n	8003ec6 <xQueueSemaphoreTake+0x13a>
 8003ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ecc:	b25b      	sxtb	r3, r3
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d103      	bne.n	8003edc <xQueueSemaphoreTake+0x150>
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003edc:	f001 fb7a 	bl	80055d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ee0:	463a      	mov	r2, r7
 8003ee2:	f107 030c 	add.w	r3, r7, #12
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 feab 	bl	8004c44 <xTaskCheckForTimeOut>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d132      	bne.n	8003f5a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ef4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ef6:	f000 f9cf 	bl	8004298 <prvIsQueueEmpty>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d026      	beq.n	8003f4e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d109      	bne.n	8003f1c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003f08:	f001 fb34 	bl	8005574 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fffd 	bl	8004f10 <xTaskPriorityInherit>
 8003f16:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003f18:	f001 fb5c 	bl	80055d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1e:	3324      	adds	r3, #36	; 0x24
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fdf1 	bl	8004b0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f2c:	f000 f962 	bl	80041f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f30:	f000 fc36 	bl	80047a0 <xTaskResumeAll>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f47f af68 	bne.w	8003e0c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003f3c:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <xQueueSemaphoreTake+0x214>)
 8003f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	e75e      	b.n	8003e0c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003f4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f50:	f000 f950 	bl	80041f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f54:	f000 fc24 	bl	80047a0 <xTaskResumeAll>
 8003f58:	e758      	b.n	8003e0c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003f5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f5c:	f000 f94a 	bl	80041f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f60:	f000 fc1e 	bl	80047a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f66:	f000 f997 	bl	8004298 <prvIsQueueEmpty>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f43f af4d 	beq.w	8003e0c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00d      	beq.n	8003f94 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003f78:	f001 fafc 	bl	8005574 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f7e:	f000 f891 	bl	80040a4 <prvGetDisinheritPriorityAfterTimeout>
 8003f82:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f001 f8bc 	bl	8005108 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003f90:	f001 fb20 	bl	80055d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3738      	adds	r7, #56	; 0x38
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	e000ed04 	.word	0xe000ed04

08003fa4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08e      	sub	sp, #56	; 0x38
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	623b      	str	r3, [r7, #32]
}
 8003fcc:	bf00      	nop
 8003fce:	e7fe      	b.n	8003fce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d103      	bne.n	8003fde <xQueueReceiveFromISR+0x3a>
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <xQueueReceiveFromISR+0x3e>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <xQueueReceiveFromISR+0x40>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10a      	bne.n	8003ffe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fec:	f383 8811 	msr	BASEPRI, r3
 8003ff0:	f3bf 8f6f 	isb	sy
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	61fb      	str	r3, [r7, #28]
}
 8003ffa:	bf00      	nop
 8003ffc:	e7fe      	b.n	8003ffc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ffe:	f001 fb9b 	bl	8005738 <vPortValidateInterruptPriority>
	__asm volatile
 8004002:	f3ef 8211 	mrs	r2, BASEPRI
 8004006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	61ba      	str	r2, [r7, #24]
 8004018:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800401a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004022:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	2b00      	cmp	r3, #0
 8004028:	d02f      	beq.n	800408a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004038:	f000 f8b6 	bl	80041a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403e:	1e5a      	subs	r2, r3, #1
 8004040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004042:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004044:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404c:	d112      	bne.n	8004074 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800404e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d016      	beq.n	8004084 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	3310      	adds	r3, #16
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fd7a 	bl	8004b54 <xTaskRemoveFromEventList>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00e      	beq.n	8004084 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00b      	beq.n	8004084 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	e007      	b.n	8004084 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004078:	3301      	adds	r3, #1
 800407a:	b2db      	uxtb	r3, r3
 800407c:	b25a      	sxtb	r2, r3
 800407e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004084:	2301      	movs	r3, #1
 8004086:	637b      	str	r3, [r7, #52]	; 0x34
 8004088:	e001      	b.n	800408e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800408a:	2300      	movs	r3, #0
 800408c:	637b      	str	r3, [r7, #52]	; 0x34
 800408e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004090:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f383 8811 	msr	BASEPRI, r3
}
 8004098:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800409a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800409c:	4618      	mov	r0, r3
 800409e:	3738      	adds	r7, #56	; 0x38
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d006      	beq.n	80040c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f1c3 0307 	rsb	r3, r3, #7
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	e001      	b.n	80040c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80040c6:	68fb      	ldr	r3, [r7, #12]
	}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10d      	bne.n	800410e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d14d      	bne.n	8004196 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 ff7c 	bl	8004ffc <xTaskPriorityDisinherit>
 8004104:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	609a      	str	r2, [r3, #8]
 800410c:	e043      	b.n	8004196 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d119      	bne.n	8004148 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6858      	ldr	r0, [r3, #4]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	461a      	mov	r2, r3
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	f001 fdb8 	bl	8005c94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	441a      	add	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	429a      	cmp	r2, r3
 800413c:	d32b      	bcc.n	8004196 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	e026      	b.n	8004196 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	68d8      	ldr	r0, [r3, #12]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	461a      	mov	r2, r3
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	f001 fd9e 	bl	8005c94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	425b      	negs	r3, r3
 8004162:	441a      	add	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d207      	bcs.n	8004184 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	425b      	negs	r3, r3
 800417e:	441a      	add	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b02      	cmp	r3, #2
 8004188:	d105      	bne.n	8004196 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	3b01      	subs	r3, #1
 8004194:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800419e:	697b      	ldr	r3, [r7, #20]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d018      	beq.n	80041ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	441a      	add	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d303      	bcc.n	80041dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68d9      	ldr	r1, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	461a      	mov	r2, r3
 80041e6:	6838      	ldr	r0, [r7, #0]
 80041e8:	f001 fd54 	bl	8005c94 <memcpy>
	}
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041fc:	f001 f9ba 	bl	8005574 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004206:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004208:	e011      	b.n	800422e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	2b00      	cmp	r3, #0
 8004210:	d012      	beq.n	8004238 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3324      	adds	r3, #36	; 0x24
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fc9c 	bl	8004b54 <xTaskRemoveFromEventList>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004222:	f000 fd71 	bl	8004d08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	3b01      	subs	r3, #1
 800422a:	b2db      	uxtb	r3, r3
 800422c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800422e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004232:	2b00      	cmp	r3, #0
 8004234:	dce9      	bgt.n	800420a <prvUnlockQueue+0x16>
 8004236:	e000      	b.n	800423a <prvUnlockQueue+0x46>
					break;
 8004238:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	22ff      	movs	r2, #255	; 0xff
 800423e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004242:	f001 f9c7 	bl	80055d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004246:	f001 f995 	bl	8005574 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004250:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004252:	e011      	b.n	8004278 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d012      	beq.n	8004282 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3310      	adds	r3, #16
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fc77 	bl	8004b54 <xTaskRemoveFromEventList>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800426c:	f000 fd4c 	bl	8004d08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004270:	7bbb      	ldrb	r3, [r7, #14]
 8004272:	3b01      	subs	r3, #1
 8004274:	b2db      	uxtb	r3, r3
 8004276:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004278:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800427c:	2b00      	cmp	r3, #0
 800427e:	dce9      	bgt.n	8004254 <prvUnlockQueue+0x60>
 8004280:	e000      	b.n	8004284 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004282:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	22ff      	movs	r2, #255	; 0xff
 8004288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800428c:	f001 f9a2 	bl	80055d4 <vPortExitCritical>
}
 8004290:	bf00      	nop
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042a0:	f001 f968 	bl	8005574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d102      	bne.n	80042b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80042ac:	2301      	movs	r3, #1
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e001      	b.n	80042b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042b6:	f001 f98d 	bl	80055d4 <vPortExitCritical>

	return xReturn;
 80042ba:	68fb      	ldr	r3, [r7, #12]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042cc:	f001 f952 	bl	8005574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d8:	429a      	cmp	r2, r3
 80042da:	d102      	bne.n	80042e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80042dc:	2301      	movs	r3, #1
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	e001      	b.n	80042e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042e6:	f001 f975 	bl	80055d4 <vPortExitCritical>

	return xReturn;
 80042ea:	68fb      	ldr	r3, [r7, #12]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08e      	sub	sp, #56	; 0x38
 80042f8:	af04      	add	r7, sp, #16
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	623b      	str	r3, [r7, #32]
}
 800431a:	bf00      	nop
 800431c:	e7fe      	b.n	800431c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10a      	bne.n	800433a <xTaskCreateStatic+0x46>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	61fb      	str	r3, [r7, #28]
}
 8004336:	bf00      	nop
 8004338:	e7fe      	b.n	8004338 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800433a:	23a0      	movs	r3, #160	; 0xa0
 800433c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2ba0      	cmp	r3, #160	; 0xa0
 8004342:	d00a      	beq.n	800435a <xTaskCreateStatic+0x66>
	__asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	61bb      	str	r3, [r7, #24]
}
 8004356:	bf00      	nop
 8004358:	e7fe      	b.n	8004358 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800435a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800435c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435e:	2b00      	cmp	r3, #0
 8004360:	d01e      	beq.n	80043a0 <xTaskCreateStatic+0xac>
 8004362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01b      	beq.n	80043a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004370:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	2202      	movs	r2, #2
 8004376:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800437a:	2300      	movs	r3, #0
 800437c:	9303      	str	r3, [sp, #12]
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	9302      	str	r3, [sp, #8]
 8004382:	f107 0314 	add.w	r3, r7, #20
 8004386:	9301      	str	r3, [sp, #4]
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f850 	bl	8004438 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004398:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800439a:	f000 f8eb 	bl	8004574 <prvAddNewTaskToReadyList>
 800439e:	e001      	b.n	80043a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043a4:	697b      	ldr	r3, [r7, #20]
	}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3728      	adds	r7, #40	; 0x28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b08c      	sub	sp, #48	; 0x30
 80043b2:	af04      	add	r7, sp, #16
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	603b      	str	r3, [r7, #0]
 80043ba:	4613      	mov	r3, r2
 80043bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f001 f9f8 	bl	80057b8 <pvPortMalloc>
 80043c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00e      	beq.n	80043ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043d0:	20a0      	movs	r0, #160	; 0xa0
 80043d2:	f001 f9f1 	bl	80057b8 <pvPortMalloc>
 80043d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
 80043e4:	e005      	b.n	80043f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043e6:	6978      	ldr	r0, [r7, #20]
 80043e8:	f001 fab2 	bl	8005950 <vPortFree>
 80043ec:	e001      	b.n	80043f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d017      	beq.n	8004428 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004400:	88fa      	ldrh	r2, [r7, #6]
 8004402:	2300      	movs	r3, #0
 8004404:	9303      	str	r3, [sp, #12]
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	9302      	str	r3, [sp, #8]
 800440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 f80e 	bl	8004438 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800441c:	69f8      	ldr	r0, [r7, #28]
 800441e:	f000 f8a9 	bl	8004574 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004422:	2301      	movs	r3, #1
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	e002      	b.n	800442e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004428:	f04f 33ff 	mov.w	r3, #4294967295
 800442c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800442e:	69bb      	ldr	r3, [r7, #24]
	}
 8004430:	4618      	mov	r0, r3
 8004432:	3720      	adds	r7, #32
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004450:	3b01      	subs	r3, #1
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	f023 0307 	bic.w	r3, r3, #7
 800445e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <prvInitialiseNewTask+0x48>
	__asm volatile
 800446a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	617b      	str	r3, [r7, #20]
}
 800447c:	bf00      	nop
 800447e:	e7fe      	b.n	800447e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d01f      	beq.n	80044c6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	e012      	b.n	80044b2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4413      	add	r3, r2
 8004492:	7819      	ldrb	r1, [r3, #0]
 8004494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	4413      	add	r3, r2
 800449a:	3334      	adds	r3, #52	; 0x34
 800449c:	460a      	mov	r2, r1
 800449e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	4413      	add	r3, r2
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d006      	beq.n	80044ba <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	3301      	adds	r3, #1
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	2b0f      	cmp	r3, #15
 80044b6:	d9e9      	bls.n	800448c <prvInitialiseNewTask+0x54>
 80044b8:	e000      	b.n	80044bc <prvInitialiseNewTask+0x84>
			{
				break;
 80044ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044c4:	e003      	b.n	80044ce <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	2b06      	cmp	r3, #6
 80044d2:	d901      	bls.n	80044d8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044d4:	2306      	movs	r3, #6
 80044d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	2200      	movs	r2, #0
 80044e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ec:	3304      	adds	r3, #4
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff f8f2 	bl	80036d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	3318      	adds	r3, #24
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff f8ed 	bl	80036d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004502:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	f1c3 0207 	rsb	r2, r3, #7
 800450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800450e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004512:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004516:	2200      	movs	r2, #0
 8004518:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	2200      	movs	r2, #0
 8004520:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	334c      	adds	r3, #76	; 0x4c
 8004528:	224c      	movs	r2, #76	; 0x4c
 800452a:	2100      	movs	r1, #0
 800452c:	4618      	mov	r0, r3
 800452e:	f001 fb2d 	bl	8005b8c <memset>
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	4a0c      	ldr	r2, [pc, #48]	; (8004568 <prvInitialiseNewTask+0x130>)
 8004536:	651a      	str	r2, [r3, #80]	; 0x50
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	4a0c      	ldr	r2, [pc, #48]	; (800456c <prvInitialiseNewTask+0x134>)
 800453c:	655a      	str	r2, [r3, #84]	; 0x54
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	4a0b      	ldr	r2, [pc, #44]	; (8004570 <prvInitialiseNewTask+0x138>)
 8004542:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	68f9      	ldr	r1, [r7, #12]
 8004548:	69b8      	ldr	r0, [r7, #24]
 800454a:	f000 fee5 	bl	8005318 <pxPortInitialiseStack>
 800454e:	4602      	mov	r2, r0
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004552:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800455a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800455e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004560:	bf00      	nop
 8004562:	3720      	adds	r7, #32
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	2000420c 	.word	0x2000420c
 800456c:	20004274 	.word	0x20004274
 8004570:	200042dc 	.word	0x200042dc

08004574 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800457c:	f000 fffa 	bl	8005574 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004580:	4b2a      	ldr	r3, [pc, #168]	; (800462c <prvAddNewTaskToReadyList+0xb8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3301      	adds	r3, #1
 8004586:	4a29      	ldr	r2, [pc, #164]	; (800462c <prvAddNewTaskToReadyList+0xb8>)
 8004588:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800458a:	4b29      	ldr	r3, [pc, #164]	; (8004630 <prvAddNewTaskToReadyList+0xbc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004592:	4a27      	ldr	r2, [pc, #156]	; (8004630 <prvAddNewTaskToReadyList+0xbc>)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004598:	4b24      	ldr	r3, [pc, #144]	; (800462c <prvAddNewTaskToReadyList+0xb8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d110      	bne.n	80045c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045a0:	f000 fbd6 	bl	8004d50 <prvInitialiseTaskLists>
 80045a4:	e00d      	b.n	80045c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045a6:	4b23      	ldr	r3, [pc, #140]	; (8004634 <prvAddNewTaskToReadyList+0xc0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d109      	bne.n	80045c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045ae:	4b20      	ldr	r3, [pc, #128]	; (8004630 <prvAddNewTaskToReadyList+0xbc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d802      	bhi.n	80045c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045bc:	4a1c      	ldr	r2, [pc, #112]	; (8004630 <prvAddNewTaskToReadyList+0xbc>)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045c2:	4b1d      	ldr	r3, [pc, #116]	; (8004638 <prvAddNewTaskToReadyList+0xc4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3301      	adds	r3, #1
 80045c8:	4a1b      	ldr	r2, [pc, #108]	; (8004638 <prvAddNewTaskToReadyList+0xc4>)
 80045ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	2201      	movs	r2, #1
 80045d2:	409a      	lsls	r2, r3
 80045d4:	4b19      	ldr	r3, [pc, #100]	; (800463c <prvAddNewTaskToReadyList+0xc8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4313      	orrs	r3, r2
 80045da:	4a18      	ldr	r2, [pc, #96]	; (800463c <prvAddNewTaskToReadyList+0xc8>)
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e2:	4613      	mov	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4a15      	ldr	r2, [pc, #84]	; (8004640 <prvAddNewTaskToReadyList+0xcc>)
 80045ec:	441a      	add	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3304      	adds	r3, #4
 80045f2:	4619      	mov	r1, r3
 80045f4:	4610      	mov	r0, r2
 80045f6:	f7ff f87c 	bl	80036f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045fa:	f000 ffeb 	bl	80055d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045fe:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <prvAddNewTaskToReadyList+0xc0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00e      	beq.n	8004624 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004606:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <prvAddNewTaskToReadyList+0xbc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	429a      	cmp	r2, r3
 8004612:	d207      	bcs.n	8004624 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004614:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <prvAddNewTaskToReadyList+0xd0>)
 8004616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004624:	bf00      	nop
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	200005b8 	.word	0x200005b8
 8004630:	200004b8 	.word	0x200004b8
 8004634:	200005c4 	.word	0x200005c4
 8004638:	200005d4 	.word	0x200005d4
 800463c:	200005c0 	.word	0x200005c0
 8004640:	200004bc 	.word	0x200004bc
 8004644:	e000ed04 	.word	0xe000ed04

08004648 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004650:	2300      	movs	r3, #0
 8004652:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d017      	beq.n	800468a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800465a:	4b13      	ldr	r3, [pc, #76]	; (80046a8 <vTaskDelay+0x60>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <vTaskDelay+0x30>
	__asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	60bb      	str	r3, [r7, #8]
}
 8004674:	bf00      	nop
 8004676:	e7fe      	b.n	8004676 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004678:	f000 f884 	bl	8004784 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800467c:	2100      	movs	r1, #0
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fde4 	bl	800524c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004684:	f000 f88c 	bl	80047a0 <xTaskResumeAll>
 8004688:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d107      	bne.n	80046a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004690:	4b06      	ldr	r3, [pc, #24]	; (80046ac <vTaskDelay+0x64>)
 8004692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046a0:	bf00      	nop
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	200005e0 	.word	0x200005e0
 80046ac:	e000ed04 	.word	0xe000ed04

080046b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08a      	sub	sp, #40	; 0x28
 80046b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046be:	463a      	mov	r2, r7
 80046c0:	1d39      	adds	r1, r7, #4
 80046c2:	f107 0308 	add.w	r3, r7, #8
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fb ff08 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046cc:	6839      	ldr	r1, [r7, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	9202      	str	r2, [sp, #8]
 80046d4:	9301      	str	r3, [sp, #4]
 80046d6:	2300      	movs	r3, #0
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	2300      	movs	r3, #0
 80046dc:	460a      	mov	r2, r1
 80046de:	4921      	ldr	r1, [pc, #132]	; (8004764 <vTaskStartScheduler+0xb4>)
 80046e0:	4821      	ldr	r0, [pc, #132]	; (8004768 <vTaskStartScheduler+0xb8>)
 80046e2:	f7ff fe07 	bl	80042f4 <xTaskCreateStatic>
 80046e6:	4603      	mov	r3, r0
 80046e8:	4a20      	ldr	r2, [pc, #128]	; (800476c <vTaskStartScheduler+0xbc>)
 80046ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046ec:	4b1f      	ldr	r3, [pc, #124]	; (800476c <vTaskStartScheduler+0xbc>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046f4:	2301      	movs	r3, #1
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	e001      	b.n	80046fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d11b      	bne.n	800473c <vTaskStartScheduler+0x8c>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	613b      	str	r3, [r7, #16]
}
 8004716:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004718:	4b15      	ldr	r3, [pc, #84]	; (8004770 <vTaskStartScheduler+0xc0>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	334c      	adds	r3, #76	; 0x4c
 800471e:	4a15      	ldr	r2, [pc, #84]	; (8004774 <vTaskStartScheduler+0xc4>)
 8004720:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004722:	4b15      	ldr	r3, [pc, #84]	; (8004778 <vTaskStartScheduler+0xc8>)
 8004724:	f04f 32ff 	mov.w	r2, #4294967295
 8004728:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800472a:	4b14      	ldr	r3, [pc, #80]	; (800477c <vTaskStartScheduler+0xcc>)
 800472c:	2201      	movs	r2, #1
 800472e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004730:	4b13      	ldr	r3, [pc, #76]	; (8004780 <vTaskStartScheduler+0xd0>)
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004736:	f000 fe7b 	bl	8005430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800473a:	e00e      	b.n	800475a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004742:	d10a      	bne.n	800475a <vTaskStartScheduler+0xaa>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	60fb      	str	r3, [r7, #12]
}
 8004756:	bf00      	nop
 8004758:	e7fe      	b.n	8004758 <vTaskStartScheduler+0xa8>
}
 800475a:	bf00      	nop
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	08005df8 	.word	0x08005df8
 8004768:	08004d21 	.word	0x08004d21
 800476c:	200005dc 	.word	0x200005dc
 8004770:	200004b8 	.word	0x200004b8
 8004774:	20000060 	.word	0x20000060
 8004778:	200005d8 	.word	0x200005d8
 800477c:	200005c4 	.word	0x200005c4
 8004780:	200005bc 	.word	0x200005bc

08004784 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004788:	4b04      	ldr	r3, [pc, #16]	; (800479c <vTaskSuspendAll+0x18>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3301      	adds	r3, #1
 800478e:	4a03      	ldr	r2, [pc, #12]	; (800479c <vTaskSuspendAll+0x18>)
 8004790:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004792:	bf00      	nop
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	200005e0 	.word	0x200005e0

080047a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047aa:	2300      	movs	r3, #0
 80047ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047ae:	4b41      	ldr	r3, [pc, #260]	; (80048b4 <xTaskResumeAll+0x114>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10a      	bne.n	80047cc <xTaskResumeAll+0x2c>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	603b      	str	r3, [r7, #0]
}
 80047c8:	bf00      	nop
 80047ca:	e7fe      	b.n	80047ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047cc:	f000 fed2 	bl	8005574 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047d0:	4b38      	ldr	r3, [pc, #224]	; (80048b4 <xTaskResumeAll+0x114>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	4a37      	ldr	r2, [pc, #220]	; (80048b4 <xTaskResumeAll+0x114>)
 80047d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047da:	4b36      	ldr	r3, [pc, #216]	; (80048b4 <xTaskResumeAll+0x114>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d161      	bne.n	80048a6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047e2:	4b35      	ldr	r3, [pc, #212]	; (80048b8 <xTaskResumeAll+0x118>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d05d      	beq.n	80048a6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047ea:	e02e      	b.n	800484a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ec:	4b33      	ldr	r3, [pc, #204]	; (80048bc <xTaskResumeAll+0x11c>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3318      	adds	r3, #24
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fe ffd7 	bl	80037ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3304      	adds	r3, #4
 8004802:	4618      	mov	r0, r3
 8004804:	f7fe ffd2 	bl	80037ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	2201      	movs	r2, #1
 800480e:	409a      	lsls	r2, r3
 8004810:	4b2b      	ldr	r3, [pc, #172]	; (80048c0 <xTaskResumeAll+0x120>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4313      	orrs	r3, r2
 8004816:	4a2a      	ldr	r2, [pc, #168]	; (80048c0 <xTaskResumeAll+0x120>)
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4a27      	ldr	r2, [pc, #156]	; (80048c4 <xTaskResumeAll+0x124>)
 8004828:	441a      	add	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3304      	adds	r3, #4
 800482e:	4619      	mov	r1, r3
 8004830:	4610      	mov	r0, r2
 8004832:	f7fe ff5e 	bl	80036f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483a:	4b23      	ldr	r3, [pc, #140]	; (80048c8 <xTaskResumeAll+0x128>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	429a      	cmp	r2, r3
 8004842:	d302      	bcc.n	800484a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004844:	4b21      	ldr	r3, [pc, #132]	; (80048cc <xTaskResumeAll+0x12c>)
 8004846:	2201      	movs	r2, #1
 8004848:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800484a:	4b1c      	ldr	r3, [pc, #112]	; (80048bc <xTaskResumeAll+0x11c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1cc      	bne.n	80047ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004858:	f000 fb1c 	bl	8004e94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800485c:	4b1c      	ldr	r3, [pc, #112]	; (80048d0 <xTaskResumeAll+0x130>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d010      	beq.n	800488a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004868:	f000 f836 	bl	80048d8 <xTaskIncrementTick>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004872:	4b16      	ldr	r3, [pc, #88]	; (80048cc <xTaskResumeAll+0x12c>)
 8004874:	2201      	movs	r2, #1
 8004876:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3b01      	subs	r3, #1
 800487c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1f1      	bne.n	8004868 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004884:	4b12      	ldr	r3, [pc, #72]	; (80048d0 <xTaskResumeAll+0x130>)
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800488a:	4b10      	ldr	r3, [pc, #64]	; (80048cc <xTaskResumeAll+0x12c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004892:	2301      	movs	r3, #1
 8004894:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004896:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <xTaskResumeAll+0x134>)
 8004898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048a6:	f000 fe95 	bl	80055d4 <vPortExitCritical>

	return xAlreadyYielded;
 80048aa:	68bb      	ldr	r3, [r7, #8]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	200005e0 	.word	0x200005e0
 80048b8:	200005b8 	.word	0x200005b8
 80048bc:	20000578 	.word	0x20000578
 80048c0:	200005c0 	.word	0x200005c0
 80048c4:	200004bc 	.word	0x200004bc
 80048c8:	200004b8 	.word	0x200004b8
 80048cc:	200005cc 	.word	0x200005cc
 80048d0:	200005c8 	.word	0x200005c8
 80048d4:	e000ed04 	.word	0xe000ed04

080048d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048de:	2300      	movs	r3, #0
 80048e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048e2:	4b4e      	ldr	r3, [pc, #312]	; (8004a1c <xTaskIncrementTick+0x144>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f040 808e 	bne.w	8004a08 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048ec:	4b4c      	ldr	r3, [pc, #304]	; (8004a20 <xTaskIncrementTick+0x148>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3301      	adds	r3, #1
 80048f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048f4:	4a4a      	ldr	r2, [pc, #296]	; (8004a20 <xTaskIncrementTick+0x148>)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d120      	bne.n	8004942 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004900:	4b48      	ldr	r3, [pc, #288]	; (8004a24 <xTaskIncrementTick+0x14c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <xTaskIncrementTick+0x48>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	603b      	str	r3, [r7, #0]
}
 800491c:	bf00      	nop
 800491e:	e7fe      	b.n	800491e <xTaskIncrementTick+0x46>
 8004920:	4b40      	ldr	r3, [pc, #256]	; (8004a24 <xTaskIncrementTick+0x14c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	4b40      	ldr	r3, [pc, #256]	; (8004a28 <xTaskIncrementTick+0x150>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a3e      	ldr	r2, [pc, #248]	; (8004a24 <xTaskIncrementTick+0x14c>)
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	4a3e      	ldr	r2, [pc, #248]	; (8004a28 <xTaskIncrementTick+0x150>)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	4b3d      	ldr	r3, [pc, #244]	; (8004a2c <xTaskIncrementTick+0x154>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3301      	adds	r3, #1
 800493a:	4a3c      	ldr	r2, [pc, #240]	; (8004a2c <xTaskIncrementTick+0x154>)
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	f000 faa9 	bl	8004e94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004942:	4b3b      	ldr	r3, [pc, #236]	; (8004a30 <xTaskIncrementTick+0x158>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	429a      	cmp	r2, r3
 800494a:	d348      	bcc.n	80049de <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800494c:	4b35      	ldr	r3, [pc, #212]	; (8004a24 <xTaskIncrementTick+0x14c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d104      	bne.n	8004960 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004956:	4b36      	ldr	r3, [pc, #216]	; (8004a30 <xTaskIncrementTick+0x158>)
 8004958:	f04f 32ff 	mov.w	r2, #4294967295
 800495c:	601a      	str	r2, [r3, #0]
					break;
 800495e:	e03e      	b.n	80049de <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004960:	4b30      	ldr	r3, [pc, #192]	; (8004a24 <xTaskIncrementTick+0x14c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	429a      	cmp	r2, r3
 8004976:	d203      	bcs.n	8004980 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004978:	4a2d      	ldr	r2, [pc, #180]	; (8004a30 <xTaskIncrementTick+0x158>)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800497e:	e02e      	b.n	80049de <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	3304      	adds	r3, #4
 8004984:	4618      	mov	r0, r3
 8004986:	f7fe ff11 	bl	80037ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498e:	2b00      	cmp	r3, #0
 8004990:	d004      	beq.n	800499c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	3318      	adds	r3, #24
 8004996:	4618      	mov	r0, r3
 8004998:	f7fe ff08 	bl	80037ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	2201      	movs	r2, #1
 80049a2:	409a      	lsls	r2, r3
 80049a4:	4b23      	ldr	r3, [pc, #140]	; (8004a34 <xTaskIncrementTick+0x15c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	4a22      	ldr	r2, [pc, #136]	; (8004a34 <xTaskIncrementTick+0x15c>)
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4a1f      	ldr	r2, [pc, #124]	; (8004a38 <xTaskIncrementTick+0x160>)
 80049bc:	441a      	add	r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	3304      	adds	r3, #4
 80049c2:	4619      	mov	r1, r3
 80049c4:	4610      	mov	r0, r2
 80049c6:	f7fe fe94 	bl	80036f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ce:	4b1b      	ldr	r3, [pc, #108]	; (8004a3c <xTaskIncrementTick+0x164>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d3b9      	bcc.n	800494c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80049d8:	2301      	movs	r3, #1
 80049da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049dc:	e7b6      	b.n	800494c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049de:	4b17      	ldr	r3, [pc, #92]	; (8004a3c <xTaskIncrementTick+0x164>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e4:	4914      	ldr	r1, [pc, #80]	; (8004a38 <xTaskIncrementTick+0x160>)
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	440b      	add	r3, r1
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d901      	bls.n	80049fa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80049f6:	2301      	movs	r3, #1
 80049f8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049fa:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <xTaskIncrementTick+0x168>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d007      	beq.n	8004a12 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004a02:	2301      	movs	r3, #1
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	e004      	b.n	8004a12 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a08:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <xTaskIncrementTick+0x16c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	4a0d      	ldr	r2, [pc, #52]	; (8004a44 <xTaskIncrementTick+0x16c>)
 8004a10:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a12:	697b      	ldr	r3, [r7, #20]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	200005e0 	.word	0x200005e0
 8004a20:	200005bc 	.word	0x200005bc
 8004a24:	20000570 	.word	0x20000570
 8004a28:	20000574 	.word	0x20000574
 8004a2c:	200005d0 	.word	0x200005d0
 8004a30:	200005d8 	.word	0x200005d8
 8004a34:	200005c0 	.word	0x200005c0
 8004a38:	200004bc 	.word	0x200004bc
 8004a3c:	200004b8 	.word	0x200004b8
 8004a40:	200005cc 	.word	0x200005cc
 8004a44:	200005c8 	.word	0x200005c8

08004a48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a4e:	4b29      	ldr	r3, [pc, #164]	; (8004af4 <vTaskSwitchContext+0xac>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a56:	4b28      	ldr	r3, [pc, #160]	; (8004af8 <vTaskSwitchContext+0xb0>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a5c:	e044      	b.n	8004ae8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004a5e:	4b26      	ldr	r3, [pc, #152]	; (8004af8 <vTaskSwitchContext+0xb0>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a64:	4b25      	ldr	r3, [pc, #148]	; (8004afc <vTaskSwitchContext+0xb4>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	fab3 f383 	clz	r3, r3
 8004a70:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a72:	7afb      	ldrb	r3, [r7, #11]
 8004a74:	f1c3 031f 	rsb	r3, r3, #31
 8004a78:	617b      	str	r3, [r7, #20]
 8004a7a:	4921      	ldr	r1, [pc, #132]	; (8004b00 <vTaskSwitchContext+0xb8>)
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10a      	bne.n	8004aa4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	607b      	str	r3, [r7, #4]
}
 8004aa0:	bf00      	nop
 8004aa2:	e7fe      	b.n	8004aa2 <vTaskSwitchContext+0x5a>
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4a14      	ldr	r2, [pc, #80]	; (8004b00 <vTaskSwitchContext+0xb8>)
 8004ab0:	4413      	add	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	605a      	str	r2, [r3, #4]
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d104      	bne.n	8004ad4 <vTaskSwitchContext+0x8c>
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	605a      	str	r2, [r3, #4]
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	4a0a      	ldr	r2, [pc, #40]	; (8004b04 <vTaskSwitchContext+0xbc>)
 8004adc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ade:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <vTaskSwitchContext+0xbc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	334c      	adds	r3, #76	; 0x4c
 8004ae4:	4a08      	ldr	r2, [pc, #32]	; (8004b08 <vTaskSwitchContext+0xc0>)
 8004ae6:	6013      	str	r3, [r2, #0]
}
 8004ae8:	bf00      	nop
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	200005e0 	.word	0x200005e0
 8004af8:	200005cc 	.word	0x200005cc
 8004afc:	200005c0 	.word	0x200005c0
 8004b00:	200004bc 	.word	0x200004bc
 8004b04:	200004b8 	.word	0x200004b8
 8004b08:	20000060 	.word	0x20000060

08004b0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10a      	bne.n	8004b32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	60fb      	str	r3, [r7, #12]
}
 8004b2e:	bf00      	nop
 8004b30:	e7fe      	b.n	8004b30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b32:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <vTaskPlaceOnEventList+0x44>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3318      	adds	r3, #24
 8004b38:	4619      	mov	r1, r3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fe fdfd 	bl	800373a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b40:	2101      	movs	r1, #1
 8004b42:	6838      	ldr	r0, [r7, #0]
 8004b44:	f000 fb82 	bl	800524c <prvAddCurrentTaskToDelayedList>
}
 8004b48:	bf00      	nop
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	200004b8 	.word	0x200004b8

08004b54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10a      	bne.n	8004b80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	60fb      	str	r3, [r7, #12]
}
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	3318      	adds	r3, #24
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fe fe11 	bl	80037ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b8a:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <xTaskRemoveFromEventList+0xac>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d11c      	bne.n	8004bcc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	3304      	adds	r3, #4
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fe fe08 	bl	80037ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	409a      	lsls	r2, r3
 8004ba4:	4b17      	ldr	r3, [pc, #92]	; (8004c04 <xTaskRemoveFromEventList+0xb0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	4a16      	ldr	r2, [pc, #88]	; (8004c04 <xTaskRemoveFromEventList+0xb0>)
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4a13      	ldr	r2, [pc, #76]	; (8004c08 <xTaskRemoveFromEventList+0xb4>)
 8004bbc:	441a      	add	r2, r3
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	f7fe fd94 	bl	80036f2 <vListInsertEnd>
 8004bca:	e005      	b.n	8004bd8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	3318      	adds	r3, #24
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	480e      	ldr	r0, [pc, #56]	; (8004c0c <xTaskRemoveFromEventList+0xb8>)
 8004bd4:	f7fe fd8d 	bl	80036f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <xTaskRemoveFromEventList+0xbc>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d905      	bls.n	8004bf2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004be6:	2301      	movs	r3, #1
 8004be8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004bea:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <xTaskRemoveFromEventList+0xc0>)
 8004bec:	2201      	movs	r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	e001      	b.n	8004bf6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004bf6:	697b      	ldr	r3, [r7, #20]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	200005e0 	.word	0x200005e0
 8004c04:	200005c0 	.word	0x200005c0
 8004c08:	200004bc 	.word	0x200004bc
 8004c0c:	20000578 	.word	0x20000578
 8004c10:	200004b8 	.word	0x200004b8
 8004c14:	200005cc 	.word	0x200005cc

08004c18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <vTaskInternalSetTimeOutState+0x24>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <vTaskInternalSetTimeOutState+0x28>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	605a      	str	r2, [r3, #4]
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	200005d0 	.word	0x200005d0
 8004c40:	200005bc 	.word	0x200005bc

08004c44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10a      	bne.n	8004c6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	613b      	str	r3, [r7, #16]
}
 8004c66:	bf00      	nop
 8004c68:	e7fe      	b.n	8004c68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10a      	bne.n	8004c86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	60fb      	str	r3, [r7, #12]
}
 8004c82:	bf00      	nop
 8004c84:	e7fe      	b.n	8004c84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004c86:	f000 fc75 	bl	8005574 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c8a:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <xTaskCheckForTimeOut+0xbc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca2:	d102      	bne.n	8004caa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	e023      	b.n	8004cf2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	4b15      	ldr	r3, [pc, #84]	; (8004d04 <xTaskCheckForTimeOut+0xc0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d007      	beq.n	8004cc6 <xTaskCheckForTimeOut+0x82>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d302      	bcc.n	8004cc6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	61fb      	str	r3, [r7, #28]
 8004cc4:	e015      	b.n	8004cf2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d20b      	bcs.n	8004ce8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	1ad2      	subs	r2, r2, r3
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff ff9b 	bl	8004c18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	e004      	b.n	8004cf2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004cf2:	f000 fc6f 	bl	80055d4 <vPortExitCritical>

	return xReturn;
 8004cf6:	69fb      	ldr	r3, [r7, #28]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3720      	adds	r7, #32
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	200005bc 	.word	0x200005bc
 8004d04:	200005d0 	.word	0x200005d0

08004d08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d0c:	4b03      	ldr	r3, [pc, #12]	; (8004d1c <vTaskMissedYield+0x14>)
 8004d0e:	2201      	movs	r2, #1
 8004d10:	601a      	str	r2, [r3, #0]
}
 8004d12:	bf00      	nop
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	200005cc 	.word	0x200005cc

08004d20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d28:	f000 f852 	bl	8004dd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <prvIdleTask+0x28>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d9f9      	bls.n	8004d28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <prvIdleTask+0x2c>)
 8004d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d44:	e7f0      	b.n	8004d28 <prvIdleTask+0x8>
 8004d46:	bf00      	nop
 8004d48:	200004bc 	.word	0x200004bc
 8004d4c:	e000ed04 	.word	0xe000ed04

08004d50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d56:	2300      	movs	r3, #0
 8004d58:	607b      	str	r3, [r7, #4]
 8004d5a:	e00c      	b.n	8004d76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4a12      	ldr	r2, [pc, #72]	; (8004db0 <prvInitialiseTaskLists+0x60>)
 8004d68:	4413      	add	r3, r2
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe fc94 	bl	8003698 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3301      	adds	r3, #1
 8004d74:	607b      	str	r3, [r7, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b06      	cmp	r3, #6
 8004d7a:	d9ef      	bls.n	8004d5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d7c:	480d      	ldr	r0, [pc, #52]	; (8004db4 <prvInitialiseTaskLists+0x64>)
 8004d7e:	f7fe fc8b 	bl	8003698 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d82:	480d      	ldr	r0, [pc, #52]	; (8004db8 <prvInitialiseTaskLists+0x68>)
 8004d84:	f7fe fc88 	bl	8003698 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d88:	480c      	ldr	r0, [pc, #48]	; (8004dbc <prvInitialiseTaskLists+0x6c>)
 8004d8a:	f7fe fc85 	bl	8003698 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d8e:	480c      	ldr	r0, [pc, #48]	; (8004dc0 <prvInitialiseTaskLists+0x70>)
 8004d90:	f7fe fc82 	bl	8003698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d94:	480b      	ldr	r0, [pc, #44]	; (8004dc4 <prvInitialiseTaskLists+0x74>)
 8004d96:	f7fe fc7f 	bl	8003698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <prvInitialiseTaskLists+0x78>)
 8004d9c:	4a05      	ldr	r2, [pc, #20]	; (8004db4 <prvInitialiseTaskLists+0x64>)
 8004d9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004da0:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <prvInitialiseTaskLists+0x7c>)
 8004da2:	4a05      	ldr	r2, [pc, #20]	; (8004db8 <prvInitialiseTaskLists+0x68>)
 8004da4:	601a      	str	r2, [r3, #0]
}
 8004da6:	bf00      	nop
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	200004bc 	.word	0x200004bc
 8004db4:	20000548 	.word	0x20000548
 8004db8:	2000055c 	.word	0x2000055c
 8004dbc:	20000578 	.word	0x20000578
 8004dc0:	2000058c 	.word	0x2000058c
 8004dc4:	200005a4 	.word	0x200005a4
 8004dc8:	20000570 	.word	0x20000570
 8004dcc:	20000574 	.word	0x20000574

08004dd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dd6:	e019      	b.n	8004e0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004dd8:	f000 fbcc 	bl	8005574 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ddc:	4b10      	ldr	r3, [pc, #64]	; (8004e20 <prvCheckTasksWaitingTermination+0x50>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3304      	adds	r3, #4
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fe fcdf 	bl	80037ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004dee:	4b0d      	ldr	r3, [pc, #52]	; (8004e24 <prvCheckTasksWaitingTermination+0x54>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	4a0b      	ldr	r2, [pc, #44]	; (8004e24 <prvCheckTasksWaitingTermination+0x54>)
 8004df6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004df8:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <prvCheckTasksWaitingTermination+0x58>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	4a0a      	ldr	r2, [pc, #40]	; (8004e28 <prvCheckTasksWaitingTermination+0x58>)
 8004e00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e02:	f000 fbe7 	bl	80055d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f810 	bl	8004e2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e0c:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <prvCheckTasksWaitingTermination+0x58>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e1      	bne.n	8004dd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e14:	bf00      	nop
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	2000058c 	.word	0x2000058c
 8004e24:	200005b8 	.word	0x200005b8
 8004e28:	200005a0 	.word	0x200005a0

08004e2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	334c      	adds	r3, #76	; 0x4c
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 feaf 	bl	8005b9c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d108      	bne.n	8004e5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fd7f 	bl	8005950 <vPortFree>
				vPortFree( pxTCB );
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fd7c 	bl	8005950 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e58:	e018      	b.n	8004e8c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d103      	bne.n	8004e6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fd73 	bl	8005950 <vPortFree>
	}
 8004e6a:	e00f      	b.n	8004e8c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d00a      	beq.n	8004e8c <prvDeleteTCB+0x60>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	60fb      	str	r3, [r7, #12]
}
 8004e88:	bf00      	nop
 8004e8a:	e7fe      	b.n	8004e8a <prvDeleteTCB+0x5e>
	}
 8004e8c:	bf00      	nop
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e9a:	4b0c      	ldr	r3, [pc, #48]	; (8004ecc <prvResetNextTaskUnblockTime+0x38>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d104      	bne.n	8004eae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ea4:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8004ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004eac:	e008      	b.n	8004ec0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eae:	4b07      	ldr	r3, [pc, #28]	; (8004ecc <prvResetNextTaskUnblockTime+0x38>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	4a04      	ldr	r2, [pc, #16]	; (8004ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8004ebe:	6013      	str	r3, [r2, #0]
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	20000570 	.word	0x20000570
 8004ed0:	200005d8 	.word	0x200005d8

08004ed4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004eda:	4b0b      	ldr	r3, [pc, #44]	; (8004f08 <xTaskGetSchedulerState+0x34>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d102      	bne.n	8004ee8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	607b      	str	r3, [r7, #4]
 8004ee6:	e008      	b.n	8004efa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ee8:	4b08      	ldr	r3, [pc, #32]	; (8004f0c <xTaskGetSchedulerState+0x38>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d102      	bne.n	8004ef6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	607b      	str	r3, [r7, #4]
 8004ef4:	e001      	b.n	8004efa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004efa:	687b      	ldr	r3, [r7, #4]
	}
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	200005c4 	.word	0x200005c4
 8004f0c:	200005e0 	.word	0x200005e0

08004f10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d05e      	beq.n	8004fe4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2a:	4b31      	ldr	r3, [pc, #196]	; (8004ff0 <xTaskPriorityInherit+0xe0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d24e      	bcs.n	8004fd2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	db06      	blt.n	8004f4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f3c:	4b2c      	ldr	r3, [pc, #176]	; (8004ff0 <xTaskPriorityInherit+0xe0>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	f1c3 0207 	rsb	r2, r3, #7
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	6959      	ldr	r1, [r3, #20]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4a26      	ldr	r2, [pc, #152]	; (8004ff4 <xTaskPriorityInherit+0xe4>)
 8004f5c:	4413      	add	r3, r2
 8004f5e:	4299      	cmp	r1, r3
 8004f60:	d12f      	bne.n	8004fc2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	3304      	adds	r3, #4
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fe fc20 	bl	80037ac <uxListRemove>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	2201      	movs	r2, #1
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	43da      	mvns	r2, r3
 8004f7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ff8 <xTaskPriorityInherit+0xe8>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4013      	ands	r3, r2
 8004f84:	4a1c      	ldr	r2, [pc, #112]	; (8004ff8 <xTaskPriorityInherit+0xe8>)
 8004f86:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f88:	4b19      	ldr	r3, [pc, #100]	; (8004ff0 <xTaskPriorityInherit+0xe0>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f96:	2201      	movs	r2, #1
 8004f98:	409a      	lsls	r2, r3
 8004f9a:	4b17      	ldr	r3, [pc, #92]	; (8004ff8 <xTaskPriorityInherit+0xe8>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	4a15      	ldr	r2, [pc, #84]	; (8004ff8 <xTaskPriorityInherit+0xe8>)
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4a10      	ldr	r2, [pc, #64]	; (8004ff4 <xTaskPriorityInherit+0xe4>)
 8004fb2:	441a      	add	r2, r3
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f7fe fb99 	bl	80036f2 <vListInsertEnd>
 8004fc0:	e004      	b.n	8004fcc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004fc2:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <xTaskPriorityInherit+0xe0>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	e008      	b.n	8004fe4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd6:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <xTaskPriorityInherit+0xe0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d201      	bcs.n	8004fe4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
	}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	200004b8 	.word	0x200004b8
 8004ff4:	200004bc 	.word	0x200004bc
 8004ff8:	200005c0 	.word	0x200005c0

08004ffc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d06e      	beq.n	80050f0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005012:	4b3a      	ldr	r3, [pc, #232]	; (80050fc <xTaskPriorityDisinherit+0x100>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	429a      	cmp	r2, r3
 800501a:	d00a      	beq.n	8005032 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	60fb      	str	r3, [r7, #12]
}
 800502e:	bf00      	nop
 8005030:	e7fe      	b.n	8005030 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10a      	bne.n	8005050 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800503a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	60bb      	str	r3, [r7, #8]
}
 800504c:	bf00      	nop
 800504e:	e7fe      	b.n	800504e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005054:	1e5a      	subs	r2, r3, #1
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	429a      	cmp	r2, r3
 8005064:	d044      	beq.n	80050f0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800506a:	2b00      	cmp	r3, #0
 800506c:	d140      	bne.n	80050f0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	3304      	adds	r3, #4
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe fb9a 	bl	80037ac <uxListRemove>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d115      	bne.n	80050aa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005082:	491f      	ldr	r1, [pc, #124]	; (8005100 <xTaskPriorityDisinherit+0x104>)
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10a      	bne.n	80050aa <xTaskPriorityDisinherit+0xae>
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	2201      	movs	r2, #1
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	43da      	mvns	r2, r3
 80050a0:	4b18      	ldr	r3, [pc, #96]	; (8005104 <xTaskPriorityDisinherit+0x108>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4013      	ands	r3, r2
 80050a6:	4a17      	ldr	r2, [pc, #92]	; (8005104 <xTaskPriorityDisinherit+0x108>)
 80050a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b6:	f1c3 0207 	rsb	r2, r3, #7
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	2201      	movs	r2, #1
 80050c4:	409a      	lsls	r2, r3
 80050c6:	4b0f      	ldr	r3, [pc, #60]	; (8005104 <xTaskPriorityDisinherit+0x108>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	4a0d      	ldr	r2, [pc, #52]	; (8005104 <xTaskPriorityDisinherit+0x108>)
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4a08      	ldr	r2, [pc, #32]	; (8005100 <xTaskPriorityDisinherit+0x104>)
 80050de:	441a      	add	r2, r3
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4619      	mov	r1, r3
 80050e6:	4610      	mov	r0, r2
 80050e8:	f7fe fb03 	bl	80036f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050ec:	2301      	movs	r3, #1
 80050ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050f0:	697b      	ldr	r3, [r7, #20]
	}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	200004b8 	.word	0x200004b8
 8005100:	200004bc 	.word	0x200004bc
 8005104:	200005c0 	.word	0x200005c0

08005108 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005116:	2301      	movs	r3, #1
 8005118:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d077      	beq.n	8005210 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	60fb      	str	r3, [r7, #12]
}
 800513a:	bf00      	nop
 800513c:	e7fe      	b.n	800513c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d902      	bls.n	800514e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	61fb      	str	r3, [r7, #28]
 800514c:	e002      	b.n	8005154 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005152:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	429a      	cmp	r2, r3
 800515c:	d058      	beq.n	8005210 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	429a      	cmp	r2, r3
 8005166:	d153      	bne.n	8005210 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005168:	4b2b      	ldr	r3, [pc, #172]	; (8005218 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	429a      	cmp	r2, r3
 8005170:	d10a      	bne.n	8005188 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	60bb      	str	r3, [r7, #8]
}
 8005184:	bf00      	nop
 8005186:	e7fe      	b.n	8005186 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	69fa      	ldr	r2, [r7, #28]
 8005192:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	2b00      	cmp	r3, #0
 800519a:	db04      	blt.n	80051a6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f1c3 0207 	rsb	r2, r3, #7
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	6959      	ldr	r1, [r3, #20]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4a19      	ldr	r2, [pc, #100]	; (800521c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80051b6:	4413      	add	r3, r2
 80051b8:	4299      	cmp	r1, r3
 80051ba:	d129      	bne.n	8005210 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	3304      	adds	r3, #4
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fe faf3 	bl	80037ac <uxListRemove>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	2201      	movs	r2, #1
 80051d2:	fa02 f303 	lsl.w	r3, r2, r3
 80051d6:	43da      	mvns	r2, r3
 80051d8:	4b11      	ldr	r3, [pc, #68]	; (8005220 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4013      	ands	r3, r2
 80051de:	4a10      	ldr	r2, [pc, #64]	; (8005220 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80051e0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	2201      	movs	r2, #1
 80051e8:	409a      	lsls	r2, r3
 80051ea:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	4a0b      	ldr	r2, [pc, #44]	; (8005220 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4a06      	ldr	r2, [pc, #24]	; (800521c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005202:	441a      	add	r2, r3
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	3304      	adds	r3, #4
 8005208:	4619      	mov	r1, r3
 800520a:	4610      	mov	r0, r2
 800520c:	f7fe fa71 	bl	80036f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005210:	bf00      	nop
 8005212:	3720      	adds	r7, #32
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	200004b8 	.word	0x200004b8
 800521c:	200004bc 	.word	0x200004bc
 8005220:	200005c0 	.word	0x200005c0

08005224 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005228:	4b07      	ldr	r3, [pc, #28]	; (8005248 <pvTaskIncrementMutexHeldCount+0x24>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d004      	beq.n	800523a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005230:	4b05      	ldr	r3, [pc, #20]	; (8005248 <pvTaskIncrementMutexHeldCount+0x24>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005236:	3201      	adds	r2, #1
 8005238:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800523a:	4b03      	ldr	r3, [pc, #12]	; (8005248 <pvTaskIncrementMutexHeldCount+0x24>)
 800523c:	681b      	ldr	r3, [r3, #0]
	}
 800523e:	4618      	mov	r0, r3
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	200004b8 	.word	0x200004b8

0800524c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005256:	4b29      	ldr	r3, [pc, #164]	; (80052fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800525c:	4b28      	ldr	r3, [pc, #160]	; (8005300 <prvAddCurrentTaskToDelayedList+0xb4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3304      	adds	r3, #4
 8005262:	4618      	mov	r0, r3
 8005264:	f7fe faa2 	bl	80037ac <uxListRemove>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10b      	bne.n	8005286 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800526e:	4b24      	ldr	r3, [pc, #144]	; (8005300 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	2201      	movs	r2, #1
 8005276:	fa02 f303 	lsl.w	r3, r2, r3
 800527a:	43da      	mvns	r2, r3
 800527c:	4b21      	ldr	r3, [pc, #132]	; (8005304 <prvAddCurrentTaskToDelayedList+0xb8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4013      	ands	r3, r2
 8005282:	4a20      	ldr	r2, [pc, #128]	; (8005304 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005284:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528c:	d10a      	bne.n	80052a4 <prvAddCurrentTaskToDelayedList+0x58>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d007      	beq.n	80052a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005294:	4b1a      	ldr	r3, [pc, #104]	; (8005300 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3304      	adds	r3, #4
 800529a:	4619      	mov	r1, r3
 800529c:	481a      	ldr	r0, [pc, #104]	; (8005308 <prvAddCurrentTaskToDelayedList+0xbc>)
 800529e:	f7fe fa28 	bl	80036f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052a2:	e026      	b.n	80052f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4413      	add	r3, r2
 80052aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052ac:	4b14      	ldr	r3, [pc, #80]	; (8005300 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d209      	bcs.n	80052d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052bc:	4b13      	ldr	r3, [pc, #76]	; (800530c <prvAddCurrentTaskToDelayedList+0xc0>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4b0f      	ldr	r3, [pc, #60]	; (8005300 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3304      	adds	r3, #4
 80052c6:	4619      	mov	r1, r3
 80052c8:	4610      	mov	r0, r2
 80052ca:	f7fe fa36 	bl	800373a <vListInsert>
}
 80052ce:	e010      	b.n	80052f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052d0:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <prvAddCurrentTaskToDelayedList+0xc4>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3304      	adds	r3, #4
 80052da:	4619      	mov	r1, r3
 80052dc:	4610      	mov	r0, r2
 80052de:	f7fe fa2c 	bl	800373a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052e2:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d202      	bcs.n	80052f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80052ec:	4a09      	ldr	r2, [pc, #36]	; (8005314 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	6013      	str	r3, [r2, #0]
}
 80052f2:	bf00      	nop
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	200005bc 	.word	0x200005bc
 8005300:	200004b8 	.word	0x200004b8
 8005304:	200005c0 	.word	0x200005c0
 8005308:	200005a4 	.word	0x200005a4
 800530c:	20000574 	.word	0x20000574
 8005310:	20000570 	.word	0x20000570
 8005314:	200005d8 	.word	0x200005d8

08005318 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3b04      	subs	r3, #4
 8005328:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3b04      	subs	r3, #4
 8005336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f023 0201 	bic.w	r2, r3, #1
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3b04      	subs	r3, #4
 8005346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005348:	4a0c      	ldr	r2, [pc, #48]	; (800537c <pxPortInitialiseStack+0x64>)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3b14      	subs	r3, #20
 8005352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	3b04      	subs	r3, #4
 800535e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f06f 0202 	mvn.w	r2, #2
 8005366:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3b20      	subs	r3, #32
 800536c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800536e:	68fb      	ldr	r3, [r7, #12]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	08005381 	.word	0x08005381

08005380 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800538a:	4b12      	ldr	r3, [pc, #72]	; (80053d4 <prvTaskExitError+0x54>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005392:	d00a      	beq.n	80053aa <prvTaskExitError+0x2a>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	60fb      	str	r3, [r7, #12]
}
 80053a6:	bf00      	nop
 80053a8:	e7fe      	b.n	80053a8 <prvTaskExitError+0x28>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	60bb      	str	r3, [r7, #8]
}
 80053bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053be:	bf00      	nop
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0fc      	beq.n	80053c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	20000010 	.word	0x20000010
	...

080053e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053e0:	4b07      	ldr	r3, [pc, #28]	; (8005400 <pxCurrentTCBConst2>)
 80053e2:	6819      	ldr	r1, [r3, #0]
 80053e4:	6808      	ldr	r0, [r1, #0]
 80053e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ea:	f380 8809 	msr	PSP, r0
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	f380 8811 	msr	BASEPRI, r0
 80053fa:	4770      	bx	lr
 80053fc:	f3af 8000 	nop.w

08005400 <pxCurrentTCBConst2>:
 8005400:	200004b8 	.word	0x200004b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop

08005408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005408:	4808      	ldr	r0, [pc, #32]	; (800542c <prvPortStartFirstTask+0x24>)
 800540a:	6800      	ldr	r0, [r0, #0]
 800540c:	6800      	ldr	r0, [r0, #0]
 800540e:	f380 8808 	msr	MSP, r0
 8005412:	f04f 0000 	mov.w	r0, #0
 8005416:	f380 8814 	msr	CONTROL, r0
 800541a:	b662      	cpsie	i
 800541c:	b661      	cpsie	f
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	df00      	svc	0
 8005428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800542a:	bf00      	nop
 800542c:	e000ed08 	.word	0xe000ed08

08005430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005436:	4b46      	ldr	r3, [pc, #280]	; (8005550 <xPortStartScheduler+0x120>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a46      	ldr	r2, [pc, #280]	; (8005554 <xPortStartScheduler+0x124>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d10a      	bne.n	8005456 <xPortStartScheduler+0x26>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	613b      	str	r3, [r7, #16]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005456:	4b3e      	ldr	r3, [pc, #248]	; (8005550 <xPortStartScheduler+0x120>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a3f      	ldr	r2, [pc, #252]	; (8005558 <xPortStartScheduler+0x128>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d10a      	bne.n	8005476 <xPortStartScheduler+0x46>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	60fb      	str	r3, [r7, #12]
}
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005476:	4b39      	ldr	r3, [pc, #228]	; (800555c <xPortStartScheduler+0x12c>)
 8005478:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	22ff      	movs	r2, #255	; 0xff
 8005486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005498:	b2da      	uxtb	r2, r3
 800549a:	4b31      	ldr	r3, [pc, #196]	; (8005560 <xPortStartScheduler+0x130>)
 800549c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800549e:	4b31      	ldr	r3, [pc, #196]	; (8005564 <xPortStartScheduler+0x134>)
 80054a0:	2207      	movs	r2, #7
 80054a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054a4:	e009      	b.n	80054ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80054a6:	4b2f      	ldr	r3, [pc, #188]	; (8005564 <xPortStartScheduler+0x134>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	4a2d      	ldr	r2, [pc, #180]	; (8005564 <xPortStartScheduler+0x134>)
 80054ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c2:	2b80      	cmp	r3, #128	; 0x80
 80054c4:	d0ef      	beq.n	80054a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054c6:	4b27      	ldr	r3, [pc, #156]	; (8005564 <xPortStartScheduler+0x134>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f1c3 0307 	rsb	r3, r3, #7
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d00a      	beq.n	80054e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	60bb      	str	r3, [r7, #8]
}
 80054e4:	bf00      	nop
 80054e6:	e7fe      	b.n	80054e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054e8:	4b1e      	ldr	r3, [pc, #120]	; (8005564 <xPortStartScheduler+0x134>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	4a1d      	ldr	r2, [pc, #116]	; (8005564 <xPortStartScheduler+0x134>)
 80054f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054f2:	4b1c      	ldr	r3, [pc, #112]	; (8005564 <xPortStartScheduler+0x134>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054fa:	4a1a      	ldr	r2, [pc, #104]	; (8005564 <xPortStartScheduler+0x134>)
 80054fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	b2da      	uxtb	r2, r3
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005506:	4b18      	ldr	r3, [pc, #96]	; (8005568 <xPortStartScheduler+0x138>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a17      	ldr	r2, [pc, #92]	; (8005568 <xPortStartScheduler+0x138>)
 800550c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005512:	4b15      	ldr	r3, [pc, #84]	; (8005568 <xPortStartScheduler+0x138>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a14      	ldr	r2, [pc, #80]	; (8005568 <xPortStartScheduler+0x138>)
 8005518:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800551c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800551e:	f000 f8dd 	bl	80056dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005522:	4b12      	ldr	r3, [pc, #72]	; (800556c <xPortStartScheduler+0x13c>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005528:	f000 f8fc 	bl	8005724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800552c:	4b10      	ldr	r3, [pc, #64]	; (8005570 <xPortStartScheduler+0x140>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a0f      	ldr	r2, [pc, #60]	; (8005570 <xPortStartScheduler+0x140>)
 8005532:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005536:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005538:	f7ff ff66 	bl	8005408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800553c:	f7ff fa84 	bl	8004a48 <vTaskSwitchContext>
	prvTaskExitError();
 8005540:	f7ff ff1e 	bl	8005380 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	e000ed00 	.word	0xe000ed00
 8005554:	410fc271 	.word	0x410fc271
 8005558:	410fc270 	.word	0x410fc270
 800555c:	e000e400 	.word	0xe000e400
 8005560:	200005e4 	.word	0x200005e4
 8005564:	200005e8 	.word	0x200005e8
 8005568:	e000ed20 	.word	0xe000ed20
 800556c:	20000010 	.word	0x20000010
 8005570:	e000ef34 	.word	0xe000ef34

08005574 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	607b      	str	r3, [r7, #4]
}
 800558c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800558e:	4b0f      	ldr	r3, [pc, #60]	; (80055cc <vPortEnterCritical+0x58>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3301      	adds	r3, #1
 8005594:	4a0d      	ldr	r2, [pc, #52]	; (80055cc <vPortEnterCritical+0x58>)
 8005596:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005598:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <vPortEnterCritical+0x58>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d10f      	bne.n	80055c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <vPortEnterCritical+0x5c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	603b      	str	r3, [r7, #0]
}
 80055bc:	bf00      	nop
 80055be:	e7fe      	b.n	80055be <vPortEnterCritical+0x4a>
	}
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	20000010 	.word	0x20000010
 80055d0:	e000ed04 	.word	0xe000ed04

080055d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055da:	4b12      	ldr	r3, [pc, #72]	; (8005624 <vPortExitCritical+0x50>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10a      	bne.n	80055f8 <vPortExitCritical+0x24>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	607b      	str	r3, [r7, #4]
}
 80055f4:	bf00      	nop
 80055f6:	e7fe      	b.n	80055f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055f8:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <vPortExitCritical+0x50>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	4a09      	ldr	r2, [pc, #36]	; (8005624 <vPortExitCritical+0x50>)
 8005600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005602:	4b08      	ldr	r3, [pc, #32]	; (8005624 <vPortExitCritical+0x50>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d105      	bne.n	8005616 <vPortExitCritical+0x42>
 800560a:	2300      	movs	r3, #0
 800560c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	f383 8811 	msr	BASEPRI, r3
}
 8005614:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	20000010 	.word	0x20000010
	...

08005630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005630:	f3ef 8009 	mrs	r0, PSP
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	4b15      	ldr	r3, [pc, #84]	; (8005690 <pxCurrentTCBConst>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	f01e 0f10 	tst.w	lr, #16
 8005640:	bf08      	it	eq
 8005642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564a:	6010      	str	r0, [r2, #0]
 800564c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005650:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005654:	f380 8811 	msr	BASEPRI, r0
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f7ff f9f2 	bl	8004a48 <vTaskSwitchContext>
 8005664:	f04f 0000 	mov.w	r0, #0
 8005668:	f380 8811 	msr	BASEPRI, r0
 800566c:	bc09      	pop	{r0, r3}
 800566e:	6819      	ldr	r1, [r3, #0]
 8005670:	6808      	ldr	r0, [r1, #0]
 8005672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005676:	f01e 0f10 	tst.w	lr, #16
 800567a:	bf08      	it	eq
 800567c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005680:	f380 8809 	msr	PSP, r0
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	f3af 8000 	nop.w

08005690 <pxCurrentTCBConst>:
 8005690:	200004b8 	.word	0x200004b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop

08005698 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	607b      	str	r3, [r7, #4]
}
 80056b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056b2:	f7ff f911 	bl	80048d8 <xTaskIncrementTick>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <SysTick_Handler+0x40>)
 80056be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	2300      	movs	r3, #0
 80056c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	f383 8811 	msr	BASEPRI, r3
}
 80056ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056d0:	bf00      	nop
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	e000ed04 	.word	0xe000ed04

080056dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056e0:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <vPortSetupTimerInterrupt+0x34>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056e6:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <vPortSetupTimerInterrupt+0x38>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056ec:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <vPortSetupTimerInterrupt+0x3c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a0a      	ldr	r2, [pc, #40]	; (800571c <vPortSetupTimerInterrupt+0x40>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	099b      	lsrs	r3, r3, #6
 80056f8:	4a09      	ldr	r2, [pc, #36]	; (8005720 <vPortSetupTimerInterrupt+0x44>)
 80056fa:	3b01      	subs	r3, #1
 80056fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056fe:	4b04      	ldr	r3, [pc, #16]	; (8005710 <vPortSetupTimerInterrupt+0x34>)
 8005700:	2207      	movs	r2, #7
 8005702:	601a      	str	r2, [r3, #0]
}
 8005704:	bf00      	nop
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	e000e010 	.word	0xe000e010
 8005714:	e000e018 	.word	0xe000e018
 8005718:	20000004 	.word	0x20000004
 800571c:	10624dd3 	.word	0x10624dd3
 8005720:	e000e014 	.word	0xe000e014

08005724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005734 <vPortEnableVFP+0x10>
 8005728:	6801      	ldr	r1, [r0, #0]
 800572a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800572e:	6001      	str	r1, [r0, #0]
 8005730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005732:	bf00      	nop
 8005734:	e000ed88 	.word	0xe000ed88

08005738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800573e:	f3ef 8305 	mrs	r3, IPSR
 8005742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b0f      	cmp	r3, #15
 8005748:	d914      	bls.n	8005774 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800574a:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <vPortValidateInterruptPriority+0x70>)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005754:	4b15      	ldr	r3, [pc, #84]	; (80057ac <vPortValidateInterruptPriority+0x74>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	7afa      	ldrb	r2, [r7, #11]
 800575a:	429a      	cmp	r2, r3
 800575c:	d20a      	bcs.n	8005774 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	607b      	str	r3, [r7, #4]
}
 8005770:	bf00      	nop
 8005772:	e7fe      	b.n	8005772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005774:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <vPortValidateInterruptPriority+0x78>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800577c:	4b0d      	ldr	r3, [pc, #52]	; (80057b4 <vPortValidateInterruptPriority+0x7c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d90a      	bls.n	800579a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	603b      	str	r3, [r7, #0]
}
 8005796:	bf00      	nop
 8005798:	e7fe      	b.n	8005798 <vPortValidateInterruptPriority+0x60>
	}
 800579a:	bf00      	nop
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	e000e3f0 	.word	0xe000e3f0
 80057ac:	200005e4 	.word	0x200005e4
 80057b0:	e000ed0c 	.word	0xe000ed0c
 80057b4:	200005e8 	.word	0x200005e8

080057b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08a      	sub	sp, #40	; 0x28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057c4:	f7fe ffde 	bl	8004784 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057c8:	4b5b      	ldr	r3, [pc, #364]	; (8005938 <pvPortMalloc+0x180>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057d0:	f000 f920 	bl	8005a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057d4:	4b59      	ldr	r3, [pc, #356]	; (800593c <pvPortMalloc+0x184>)
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4013      	ands	r3, r2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f040 8093 	bne.w	8005908 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01d      	beq.n	8005824 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80057e8:	2208      	movs	r2, #8
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4413      	add	r3, r2
 80057ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d014      	beq.n	8005824 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f023 0307 	bic.w	r3, r3, #7
 8005800:	3308      	adds	r3, #8
 8005802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <pvPortMalloc+0x6c>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	617b      	str	r3, [r7, #20]
}
 8005820:	bf00      	nop
 8005822:	e7fe      	b.n	8005822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d06e      	beq.n	8005908 <pvPortMalloc+0x150>
 800582a:	4b45      	ldr	r3, [pc, #276]	; (8005940 <pvPortMalloc+0x188>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	429a      	cmp	r2, r3
 8005832:	d869      	bhi.n	8005908 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005834:	4b43      	ldr	r3, [pc, #268]	; (8005944 <pvPortMalloc+0x18c>)
 8005836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005838:	4b42      	ldr	r3, [pc, #264]	; (8005944 <pvPortMalloc+0x18c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800583e:	e004      	b.n	800584a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	429a      	cmp	r2, r3
 8005852:	d903      	bls.n	800585c <pvPortMalloc+0xa4>
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1f1      	bne.n	8005840 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800585c:	4b36      	ldr	r3, [pc, #216]	; (8005938 <pvPortMalloc+0x180>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005862:	429a      	cmp	r2, r3
 8005864:	d050      	beq.n	8005908 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2208      	movs	r2, #8
 800586c:	4413      	add	r3, r2
 800586e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	1ad2      	subs	r2, r2, r3
 8005880:	2308      	movs	r3, #8
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	429a      	cmp	r2, r3
 8005886:	d91f      	bls.n	80058c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4413      	add	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <pvPortMalloc+0xf8>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	613b      	str	r3, [r7, #16]
}
 80058ac:	bf00      	nop
 80058ae:	e7fe      	b.n	80058ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	1ad2      	subs	r2, r2, r3
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058c2:	69b8      	ldr	r0, [r7, #24]
 80058c4:	f000 f908 	bl	8005ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058c8:	4b1d      	ldr	r3, [pc, #116]	; (8005940 <pvPortMalloc+0x188>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	4a1b      	ldr	r2, [pc, #108]	; (8005940 <pvPortMalloc+0x188>)
 80058d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058d6:	4b1a      	ldr	r3, [pc, #104]	; (8005940 <pvPortMalloc+0x188>)
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	4b1b      	ldr	r3, [pc, #108]	; (8005948 <pvPortMalloc+0x190>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d203      	bcs.n	80058ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058e2:	4b17      	ldr	r3, [pc, #92]	; (8005940 <pvPortMalloc+0x188>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a18      	ldr	r2, [pc, #96]	; (8005948 <pvPortMalloc+0x190>)
 80058e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	4b13      	ldr	r3, [pc, #76]	; (800593c <pvPortMalloc+0x184>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	431a      	orrs	r2, r3
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80058fe:	4b13      	ldr	r3, [pc, #76]	; (800594c <pvPortMalloc+0x194>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3301      	adds	r3, #1
 8005904:	4a11      	ldr	r2, [pc, #68]	; (800594c <pvPortMalloc+0x194>)
 8005906:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005908:	f7fe ff4a 	bl	80047a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <pvPortMalloc+0x174>
	__asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	60fb      	str	r3, [r7, #12]
}
 8005928:	bf00      	nop
 800592a:	e7fe      	b.n	800592a <pvPortMalloc+0x172>
	return pvReturn;
 800592c:	69fb      	ldr	r3, [r7, #28]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3728      	adds	r7, #40	; 0x28
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	200041f4 	.word	0x200041f4
 800593c:	20004208 	.word	0x20004208
 8005940:	200041f8 	.word	0x200041f8
 8005944:	200041ec 	.word	0x200041ec
 8005948:	200041fc 	.word	0x200041fc
 800594c:	20004200 	.word	0x20004200

08005950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d04d      	beq.n	80059fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005962:	2308      	movs	r3, #8
 8005964:	425b      	negs	r3, r3
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4413      	add	r3, r2
 800596a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	4b24      	ldr	r3, [pc, #144]	; (8005a08 <vPortFree+0xb8>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4013      	ands	r3, r2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10a      	bne.n	8005994 <vPortFree+0x44>
	__asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	60fb      	str	r3, [r7, #12]
}
 8005990:	bf00      	nop
 8005992:	e7fe      	b.n	8005992 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <vPortFree+0x62>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	60bb      	str	r3, [r7, #8]
}
 80059ae:	bf00      	nop
 80059b0:	e7fe      	b.n	80059b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	4b14      	ldr	r3, [pc, #80]	; (8005a08 <vPortFree+0xb8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4013      	ands	r3, r2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01e      	beq.n	80059fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d11a      	bne.n	80059fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	4b0e      	ldr	r3, [pc, #56]	; (8005a08 <vPortFree+0xb8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	43db      	mvns	r3, r3
 80059d2:	401a      	ands	r2, r3
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059d8:	f7fe fed4 	bl	8004784 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <vPortFree+0xbc>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4413      	add	r3, r2
 80059e6:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <vPortFree+0xbc>)
 80059e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059ea:	6938      	ldr	r0, [r7, #16]
 80059ec:	f000 f874 	bl	8005ad8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80059f0:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <vPortFree+0xc0>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3301      	adds	r3, #1
 80059f6:	4a06      	ldr	r2, [pc, #24]	; (8005a10 <vPortFree+0xc0>)
 80059f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80059fa:	f7fe fed1 	bl	80047a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059fe:	bf00      	nop
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20004208 	.word	0x20004208
 8005a0c:	200041f8 	.word	0x200041f8
 8005a10:	20004204 	.word	0x20004204

08005a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a20:	4b27      	ldr	r3, [pc, #156]	; (8005ac0 <prvHeapInit+0xac>)
 8005a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00c      	beq.n	8005a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3307      	adds	r3, #7
 8005a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0307 	bic.w	r3, r3, #7
 8005a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	4a1f      	ldr	r2, [pc, #124]	; (8005ac0 <prvHeapInit+0xac>)
 8005a44:	4413      	add	r3, r2
 8005a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <prvHeapInit+0xb0>)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a52:	4b1c      	ldr	r3, [pc, #112]	; (8005ac4 <prvHeapInit+0xb0>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a60:	2208      	movs	r2, #8
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	1a9b      	subs	r3, r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0307 	bic.w	r3, r3, #7
 8005a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4a15      	ldr	r2, [pc, #84]	; (8005ac8 <prvHeapInit+0xb4>)
 8005a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a76:	4b14      	ldr	r3, [pc, #80]	; (8005ac8 <prvHeapInit+0xb4>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a7e:	4b12      	ldr	r3, [pc, #72]	; (8005ac8 <prvHeapInit+0xb4>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	1ad2      	subs	r2, r2, r3
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a94:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <prvHeapInit+0xb4>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4a0a      	ldr	r2, [pc, #40]	; (8005acc <prvHeapInit+0xb8>)
 8005aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <prvHeapInit+0xbc>)
 8005aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005aac:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <prvHeapInit+0xc0>)
 8005aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ab2:	601a      	str	r2, [r3, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	200005ec 	.word	0x200005ec
 8005ac4:	200041ec 	.word	0x200041ec
 8005ac8:	200041f4 	.word	0x200041f4
 8005acc:	200041fc 	.word	0x200041fc
 8005ad0:	200041f8 	.word	0x200041f8
 8005ad4:	20004208 	.word	0x20004208

08005ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ae0:	4b28      	ldr	r3, [pc, #160]	; (8005b84 <prvInsertBlockIntoFreeList+0xac>)
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	e002      	b.n	8005aec <prvInsertBlockIntoFreeList+0x14>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d8f7      	bhi.n	8005ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	4413      	add	r3, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d108      	bne.n	8005b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	441a      	add	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	441a      	add	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d118      	bne.n	8005b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	4b15      	ldr	r3, [pc, #84]	; (8005b88 <prvInsertBlockIntoFreeList+0xb0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d00d      	beq.n	8005b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	441a      	add	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	e008      	b.n	8005b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b56:	4b0c      	ldr	r3, [pc, #48]	; (8005b88 <prvInsertBlockIntoFreeList+0xb0>)
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	e003      	b.n	8005b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d002      	beq.n	8005b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b76:	bf00      	nop
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	200041ec 	.word	0x200041ec
 8005b88:	200041f4 	.word	0x200041f4

08005b8c <memset>:
 8005b8c:	4402      	add	r2, r0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d100      	bne.n	8005b96 <memset+0xa>
 8005b94:	4770      	bx	lr
 8005b96:	f803 1b01 	strb.w	r1, [r3], #1
 8005b9a:	e7f9      	b.n	8005b90 <memset+0x4>

08005b9c <_reclaim_reent>:
 8005b9c:	4b29      	ldr	r3, [pc, #164]	; (8005c44 <_reclaim_reent+0xa8>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4283      	cmp	r3, r0
 8005ba2:	b570      	push	{r4, r5, r6, lr}
 8005ba4:	4604      	mov	r4, r0
 8005ba6:	d04b      	beq.n	8005c40 <_reclaim_reent+0xa4>
 8005ba8:	69c3      	ldr	r3, [r0, #28]
 8005baa:	b143      	cbz	r3, 8005bbe <_reclaim_reent+0x22>
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d144      	bne.n	8005c3c <_reclaim_reent+0xa0>
 8005bb2:	69e3      	ldr	r3, [r4, #28]
 8005bb4:	6819      	ldr	r1, [r3, #0]
 8005bb6:	b111      	cbz	r1, 8005bbe <_reclaim_reent+0x22>
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f000 f879 	bl	8005cb0 <_free_r>
 8005bbe:	6961      	ldr	r1, [r4, #20]
 8005bc0:	b111      	cbz	r1, 8005bc8 <_reclaim_reent+0x2c>
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	f000 f874 	bl	8005cb0 <_free_r>
 8005bc8:	69e1      	ldr	r1, [r4, #28]
 8005bca:	b111      	cbz	r1, 8005bd2 <_reclaim_reent+0x36>
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f000 f86f 	bl	8005cb0 <_free_r>
 8005bd2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005bd4:	b111      	cbz	r1, 8005bdc <_reclaim_reent+0x40>
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f000 f86a 	bl	8005cb0 <_free_r>
 8005bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bde:	b111      	cbz	r1, 8005be6 <_reclaim_reent+0x4a>
 8005be0:	4620      	mov	r0, r4
 8005be2:	f000 f865 	bl	8005cb0 <_free_r>
 8005be6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005be8:	b111      	cbz	r1, 8005bf0 <_reclaim_reent+0x54>
 8005bea:	4620      	mov	r0, r4
 8005bec:	f000 f860 	bl	8005cb0 <_free_r>
 8005bf0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005bf2:	b111      	cbz	r1, 8005bfa <_reclaim_reent+0x5e>
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	f000 f85b 	bl	8005cb0 <_free_r>
 8005bfa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005bfc:	b111      	cbz	r1, 8005c04 <_reclaim_reent+0x68>
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f000 f856 	bl	8005cb0 <_free_r>
 8005c04:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005c06:	b111      	cbz	r1, 8005c0e <_reclaim_reent+0x72>
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f000 f851 	bl	8005cb0 <_free_r>
 8005c0e:	6a23      	ldr	r3, [r4, #32]
 8005c10:	b1b3      	cbz	r3, 8005c40 <_reclaim_reent+0xa4>
 8005c12:	4620      	mov	r0, r4
 8005c14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c18:	4718      	bx	r3
 8005c1a:	5949      	ldr	r1, [r1, r5]
 8005c1c:	b941      	cbnz	r1, 8005c30 <_reclaim_reent+0x94>
 8005c1e:	3504      	adds	r5, #4
 8005c20:	69e3      	ldr	r3, [r4, #28]
 8005c22:	2d80      	cmp	r5, #128	; 0x80
 8005c24:	68d9      	ldr	r1, [r3, #12]
 8005c26:	d1f8      	bne.n	8005c1a <_reclaim_reent+0x7e>
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f000 f841 	bl	8005cb0 <_free_r>
 8005c2e:	e7c0      	b.n	8005bb2 <_reclaim_reent+0x16>
 8005c30:	680e      	ldr	r6, [r1, #0]
 8005c32:	4620      	mov	r0, r4
 8005c34:	f000 f83c 	bl	8005cb0 <_free_r>
 8005c38:	4631      	mov	r1, r6
 8005c3a:	e7ef      	b.n	8005c1c <_reclaim_reent+0x80>
 8005c3c:	2500      	movs	r5, #0
 8005c3e:	e7ef      	b.n	8005c20 <_reclaim_reent+0x84>
 8005c40:	bd70      	pop	{r4, r5, r6, pc}
 8005c42:	bf00      	nop
 8005c44:	20000060 	.word	0x20000060

08005c48 <__libc_init_array>:
 8005c48:	b570      	push	{r4, r5, r6, lr}
 8005c4a:	4d0d      	ldr	r5, [pc, #52]	; (8005c80 <__libc_init_array+0x38>)
 8005c4c:	4c0d      	ldr	r4, [pc, #52]	; (8005c84 <__libc_init_array+0x3c>)
 8005c4e:	1b64      	subs	r4, r4, r5
 8005c50:	10a4      	asrs	r4, r4, #2
 8005c52:	2600      	movs	r6, #0
 8005c54:	42a6      	cmp	r6, r4
 8005c56:	d109      	bne.n	8005c6c <__libc_init_array+0x24>
 8005c58:	4d0b      	ldr	r5, [pc, #44]	; (8005c88 <__libc_init_array+0x40>)
 8005c5a:	4c0c      	ldr	r4, [pc, #48]	; (8005c8c <__libc_init_array+0x44>)
 8005c5c:	f000 f880 	bl	8005d60 <_init>
 8005c60:	1b64      	subs	r4, r4, r5
 8005c62:	10a4      	asrs	r4, r4, #2
 8005c64:	2600      	movs	r6, #0
 8005c66:	42a6      	cmp	r6, r4
 8005c68:	d105      	bne.n	8005c76 <__libc_init_array+0x2e>
 8005c6a:	bd70      	pop	{r4, r5, r6, pc}
 8005c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c70:	4798      	blx	r3
 8005c72:	3601      	adds	r6, #1
 8005c74:	e7ee      	b.n	8005c54 <__libc_init_array+0xc>
 8005c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c7a:	4798      	blx	r3
 8005c7c:	3601      	adds	r6, #1
 8005c7e:	e7f2      	b.n	8005c66 <__libc_init_array+0x1e>
 8005c80:	08005e20 	.word	0x08005e20
 8005c84:	08005e20 	.word	0x08005e20
 8005c88:	08005e20 	.word	0x08005e20
 8005c8c:	08005e24 	.word	0x08005e24

08005c90 <__retarget_lock_acquire_recursive>:
 8005c90:	4770      	bx	lr

08005c92 <__retarget_lock_release_recursive>:
 8005c92:	4770      	bx	lr

08005c94 <memcpy>:
 8005c94:	440a      	add	r2, r1
 8005c96:	4291      	cmp	r1, r2
 8005c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c9c:	d100      	bne.n	8005ca0 <memcpy+0xc>
 8005c9e:	4770      	bx	lr
 8005ca0:	b510      	push	{r4, lr}
 8005ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ca6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005caa:	4291      	cmp	r1, r2
 8005cac:	d1f9      	bne.n	8005ca2 <memcpy+0xe>
 8005cae:	bd10      	pop	{r4, pc}

08005cb0 <_free_r>:
 8005cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cb2:	2900      	cmp	r1, #0
 8005cb4:	d044      	beq.n	8005d40 <_free_r+0x90>
 8005cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cba:	9001      	str	r0, [sp, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f1a1 0404 	sub.w	r4, r1, #4
 8005cc2:	bfb8      	it	lt
 8005cc4:	18e4      	addlt	r4, r4, r3
 8005cc6:	f000 f83f 	bl	8005d48 <__malloc_lock>
 8005cca:	4a1e      	ldr	r2, [pc, #120]	; (8005d44 <_free_r+0x94>)
 8005ccc:	9801      	ldr	r0, [sp, #4]
 8005cce:	6813      	ldr	r3, [r2, #0]
 8005cd0:	b933      	cbnz	r3, 8005ce0 <_free_r+0x30>
 8005cd2:	6063      	str	r3, [r4, #4]
 8005cd4:	6014      	str	r4, [r2, #0]
 8005cd6:	b003      	add	sp, #12
 8005cd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cdc:	f000 b83a 	b.w	8005d54 <__malloc_unlock>
 8005ce0:	42a3      	cmp	r3, r4
 8005ce2:	d908      	bls.n	8005cf6 <_free_r+0x46>
 8005ce4:	6825      	ldr	r5, [r4, #0]
 8005ce6:	1961      	adds	r1, r4, r5
 8005ce8:	428b      	cmp	r3, r1
 8005cea:	bf01      	itttt	eq
 8005cec:	6819      	ldreq	r1, [r3, #0]
 8005cee:	685b      	ldreq	r3, [r3, #4]
 8005cf0:	1949      	addeq	r1, r1, r5
 8005cf2:	6021      	streq	r1, [r4, #0]
 8005cf4:	e7ed      	b.n	8005cd2 <_free_r+0x22>
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	b10b      	cbz	r3, 8005d00 <_free_r+0x50>
 8005cfc:	42a3      	cmp	r3, r4
 8005cfe:	d9fa      	bls.n	8005cf6 <_free_r+0x46>
 8005d00:	6811      	ldr	r1, [r2, #0]
 8005d02:	1855      	adds	r5, r2, r1
 8005d04:	42a5      	cmp	r5, r4
 8005d06:	d10b      	bne.n	8005d20 <_free_r+0x70>
 8005d08:	6824      	ldr	r4, [r4, #0]
 8005d0a:	4421      	add	r1, r4
 8005d0c:	1854      	adds	r4, r2, r1
 8005d0e:	42a3      	cmp	r3, r4
 8005d10:	6011      	str	r1, [r2, #0]
 8005d12:	d1e0      	bne.n	8005cd6 <_free_r+0x26>
 8005d14:	681c      	ldr	r4, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	6053      	str	r3, [r2, #4]
 8005d1a:	440c      	add	r4, r1
 8005d1c:	6014      	str	r4, [r2, #0]
 8005d1e:	e7da      	b.n	8005cd6 <_free_r+0x26>
 8005d20:	d902      	bls.n	8005d28 <_free_r+0x78>
 8005d22:	230c      	movs	r3, #12
 8005d24:	6003      	str	r3, [r0, #0]
 8005d26:	e7d6      	b.n	8005cd6 <_free_r+0x26>
 8005d28:	6825      	ldr	r5, [r4, #0]
 8005d2a:	1961      	adds	r1, r4, r5
 8005d2c:	428b      	cmp	r3, r1
 8005d2e:	bf04      	itt	eq
 8005d30:	6819      	ldreq	r1, [r3, #0]
 8005d32:	685b      	ldreq	r3, [r3, #4]
 8005d34:	6063      	str	r3, [r4, #4]
 8005d36:	bf04      	itt	eq
 8005d38:	1949      	addeq	r1, r1, r5
 8005d3a:	6021      	streq	r1, [r4, #0]
 8005d3c:	6054      	str	r4, [r2, #4]
 8005d3e:	e7ca      	b.n	8005cd6 <_free_r+0x26>
 8005d40:	b003      	add	sp, #12
 8005d42:	bd30      	pop	{r4, r5, pc}
 8005d44:	20004348 	.word	0x20004348

08005d48 <__malloc_lock>:
 8005d48:	4801      	ldr	r0, [pc, #4]	; (8005d50 <__malloc_lock+0x8>)
 8005d4a:	f7ff bfa1 	b.w	8005c90 <__retarget_lock_acquire_recursive>
 8005d4e:	bf00      	nop
 8005d50:	20004344 	.word	0x20004344

08005d54 <__malloc_unlock>:
 8005d54:	4801      	ldr	r0, [pc, #4]	; (8005d5c <__malloc_unlock+0x8>)
 8005d56:	f7ff bf9c 	b.w	8005c92 <__retarget_lock_release_recursive>
 8005d5a:	bf00      	nop
 8005d5c:	20004344 	.word	0x20004344

08005d60 <_init>:
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d62:	bf00      	nop
 8005d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d66:	bc08      	pop	{r3}
 8005d68:	469e      	mov	lr, r3
 8005d6a:	4770      	bx	lr

08005d6c <_fini>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	bf00      	nop
 8005d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d72:	bc08      	pop	{r3}
 8005d74:	469e      	mov	lr, r3
 8005d76:	4770      	bx	lr
