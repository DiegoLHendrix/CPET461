
Ex12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005de8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005f88  08005f88  00015f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006028  08006028  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006028  08006028  00016028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006030  08006030  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006034  08006034  00016034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042ec  20000060  08006098  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000434c  08006098  0002434c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d3b  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037e5  00000000  00000000  00037e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001608  00000000  00000000  0003b5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000112d  00000000  00000000  0003cc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c77  00000000  00000000  0003dd2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a597  00000000  00000000  000569a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ac99  00000000  00000000  00070f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006004  00000000  00000000  0010bbd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00111bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f70 	.word	0x08005f70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005f70 	.word	0x08005f70

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000007c 	.word	0x2000007c
 800050c:	2000011c 	.word	0x2000011c

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b5b0      	push	{r4, r5, r7, lr}
 8000512:	b09a      	sub	sp, #104	; 0x68
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fdcd 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f86f 	bl	80005fc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800051e:	f000 f8d5 	bl	80006cc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f9b5 	bl	8000890 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000526:	f000 f8f1 	bl	800070c <MX_I2C1_Init>
  MX_I2S2_Init();
 800052a:	f000 f91d 	bl	8000768 <MX_I2S2_Init>
  MX_I2S3_Init();
 800052e:	f000 f949 	bl	80007c4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000532:	f000 f977 	bl	8000824 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of CriticalResourceMutex */
  osMutexDef(CriticalResourceMutex);
 8000536:	2300      	movs	r3, #0
 8000538:	663b      	str	r3, [r7, #96]	; 0x60
 800053a:	2300      	movs	r3, #0
 800053c:	667b      	str	r3, [r7, #100]	; 0x64
  CriticalResourceMutexHandle = osMutexCreate(osMutex(CriticalResourceMutex));
 800053e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000542:	4618      	mov	r0, r3
 8000544:	f003 f805 	bl	8003552 <osMutexCreate>
 8000548:	4603      	mov	r3, r0
 800054a:	4a24      	ldr	r2, [pc, #144]	; (80005dc <main+0xcc>)
 800054c:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of CriticalResourceSemaphore */
  osSemaphoreDef(CriticalResourceSemaphore);
 800054e:	2300      	movs	r3, #0
 8000550:	65bb      	str	r3, [r7, #88]	; 0x58
 8000552:	2300      	movs	r3, #0
 8000554:	65fb      	str	r3, [r7, #92]	; 0x5c
  CriticalResourceSemaphoreHandle = osSemaphoreCreate(osSemaphore(CriticalResourceSemaphore), 1);
 8000556:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800055a:	2101      	movs	r1, #1
 800055c:	4618      	mov	r0, r3
 800055e:	f003 f895 	bl	800368c <osSemaphoreCreate>
 8000562:	4603      	mov	r3, r0
 8000564:	4a1e      	ldr	r2, [pc, #120]	; (80005e0 <main+0xd0>)
 8000566:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of FlashGreenLed */
  osThreadDef(FlashGreenLed, StartFlashGreenLedTask, osPriorityNormal, 0, 128);
 8000568:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <main+0xd4>)
 800056a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800056e:	461d      	mov	r5, r3
 8000570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000574:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000578:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FlashGreenLedHandle = osThreadCreate(osThread(FlashGreenLed), NULL);
 800057c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f002 ff85 	bl	8003492 <osThreadCreate>
 8000588:	4603      	mov	r3, r0
 800058a:	4a17      	ldr	r2, [pc, #92]	; (80005e8 <main+0xd8>)
 800058c:	6013      	str	r3, [r2, #0]

  /* definition and creation of FlashRedLed */
  osThreadDef(FlashRedLed, StartFlashRedLedTask, osPriorityHigh, 0, 128);
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <main+0xdc>)
 8000590:	f107 0420 	add.w	r4, r7, #32
 8000594:	461d      	mov	r5, r3
 8000596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FlashRedLedHandle = osThreadCreate(osThread(FlashRedLed), NULL);
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 ff72 	bl	8003492 <osThreadCreate>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a0f      	ldr	r2, [pc, #60]	; (80005f0 <main+0xe0>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of FlashOrangeLed */
  osThreadDef(FlashOrangeLed, StartFlashOrangeLedTask, osPriorityAboveNormal, 0, 128);
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <main+0xe4>)
 80005b6:	1d3c      	adds	r4, r7, #4
 80005b8:	461d      	mov	r5, r3
 80005ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FlashOrangeLedHandle = osThreadCreate(osThread(FlashOrangeLed), NULL);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 ff61 	bl	8003492 <osThreadCreate>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <main+0xe8>)
 80005d4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005d6:	f002 ff55 	bl	8003484 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005da:	e7fe      	b.n	80005da <main+0xca>
 80005dc:	20000464 	.word	0x20000464
 80005e0:	20000468 	.word	0x20000468
 80005e4:	08005f98 	.word	0x08005f98
 80005e8:	20000458 	.word	0x20000458
 80005ec:	08005fc0 	.word	0x08005fc0
 80005f0:	2000045c 	.word	0x2000045c
 80005f4:	08005fec 	.word	0x08005fec
 80005f8:	20000460 	.word	0x20000460

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f005 fbc6 	bl	8005d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <SystemClock_Config+0xc8>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a26      	ldr	r2, [pc, #152]	; (80006c4 <SystemClock_Config+0xc8>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <SystemClock_Config+0xc8>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <SystemClock_Config+0xcc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a20      	ldr	r2, [pc, #128]	; (80006c8 <SystemClock_Config+0xcc>)
 8000646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <SystemClock_Config+0xcc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000670:	23c0      	movs	r3, #192	; 0xc0
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000674:	2304      	movs	r3, #4
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0320 	add.w	r3, r7, #32
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fdbd 	bl	8002200 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800068c:	f000 fab4 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2103      	movs	r1, #3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 f81f 	bl	80026f0 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006b8:	f000 fa9e 	bl	8000bf8 <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	3750      	adds	r7, #80	; 0x50
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006d2:	463b      	mov	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
 80006e0:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006e2:	2301      	movs	r3, #1
 80006e4:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80006e6:	23c8      	movs	r3, #200	; 0xc8
 80006e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80006ea:	2305      	movs	r3, #5
 80006ec:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fa4d 	bl	8002b94 <HAL_RCCEx_PeriphCLKConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000700:	f000 fa7a 	bl	8000bf8 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_I2C1_Init+0x50>)
 8000712:	4a13      	ldr	r2, [pc, #76]	; (8000760 <MX_I2C1_Init+0x54>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_I2C1_Init+0x50>)
 8000718:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_I2C1_Init+0x58>)
 800071a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_I2C1_Init+0x50>)
 800072a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800072e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_I2C1_Init+0x50>)
 800074a:	f000 ff75 	bl	8001638 <HAL_I2C_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000754:	f000 fa50 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2000031c 	.word	0x2000031c
 8000760:	40005400 	.word	0x40005400
 8000764:	000186a0 	.word	0x000186a0

08000768 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2S2_Init+0x50>)
 800076e:	4a13      	ldr	r2, [pc, #76]	; (80007bc <MX_I2S2_Init+0x54>)
 8000770:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_I2S2_Init+0x50>)
 8000774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000778:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_I2S2_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000780:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_I2S2_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_I2S2_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_I2S2_Init+0x50>)
 800078e:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <MX_I2S2_Init+0x58>)
 8000790:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_I2S2_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_I2S2_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_I2S2_Init+0x50>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_I2S2_Init+0x50>)
 80007a6:	f001 f88b 	bl	80018c0 <HAL_I2S_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007b0:	f000 fa22 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000370 	.word	0x20000370
 80007bc:	40003800 	.word	0x40003800
 80007c0:	00017700 	.word	0x00017700

080007c4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_I2S3_Init+0x54>)
 80007ca:	4a14      	ldr	r2, [pc, #80]	; (800081c <MX_I2S3_Init+0x58>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2S3_Init+0x54>)
 80007d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_I2S3_Init+0x54>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_I2S3_Init+0x54>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_I2S3_Init+0x54>)
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_I2S3_Init+0x54>)
 80007ec:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <MX_I2S3_Init+0x5c>)
 80007ee:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_I2S3_Init+0x54>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_I2S3_Init+0x54>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_I2S3_Init+0x54>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_I2S3_Init+0x54>)
 8000804:	f001 f85c 	bl	80018c0 <HAL_I2S_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800080e:	f000 f9f3 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200003b8 	.word	0x200003b8
 800081c:	40003c00 	.word	0x40003c00
 8000820:	00017700 	.word	0x00017700

08000824 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_SPI1_Init+0x64>)
 800082a:	4a18      	ldr	r2, [pc, #96]	; (800088c <MX_SPI1_Init+0x68>)
 800082c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_SPI1_Init+0x64>)
 8000830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000834:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_SPI1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_SPI1_Init+0x64>)
 8000850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000854:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_SPI1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_SPI1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_SPI1_Init+0x64>)
 8000870:	220a      	movs	r2, #10
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_SPI1_Init+0x64>)
 8000876:	f002 fadf 	bl	8002e38 <HAL_SPI_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000880:	f000 f9ba 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000400 	.word	0x20000400
 800088c:	40013000 	.word	0x40013000

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
 80008aa:	4b70      	ldr	r3, [pc, #448]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a6f      	ldr	r2, [pc, #444]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 80008b0:	f043 0310 	orr.w	r3, r3, #16
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b6d      	ldr	r3, [pc, #436]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0310 	and.w	r3, r3, #16
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	4b69      	ldr	r3, [pc, #420]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a68      	ldr	r2, [pc, #416]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b66      	ldr	r3, [pc, #408]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b62      	ldr	r3, [pc, #392]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a61      	ldr	r2, [pc, #388]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b5f      	ldr	r3, [pc, #380]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b5b      	ldr	r3, [pc, #364]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a5a      	ldr	r2, [pc, #360]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b58      	ldr	r3, [pc, #352]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b54      	ldr	r3, [pc, #336]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a53      	ldr	r2, [pc, #332]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b51      	ldr	r3, [pc, #324]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b4d      	ldr	r3, [pc, #308]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a4c      	ldr	r2, [pc, #304]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b4a      	ldr	r3, [pc, #296]	; (8000a6c <MX_GPIO_Init+0x1dc>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2108      	movs	r1, #8
 8000952:	4847      	ldr	r0, [pc, #284]	; (8000a70 <MX_GPIO_Init+0x1e0>)
 8000954:	f000 fe56 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2101      	movs	r1, #1
 800095c:	4845      	ldr	r0, [pc, #276]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 800095e:	f000 fe51 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8000962:	2200      	movs	r2, #0
 8000964:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000968:	4843      	ldr	r0, [pc, #268]	; (8000a78 <MX_GPIO_Init+0x1e8>)
 800096a:	f000 fe4b 	bl	8001604 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800096e:	2304      	movs	r3, #4
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	483b      	ldr	r0, [pc, #236]	; (8000a70 <MX_GPIO_Init+0x1e0>)
 8000982:	f000 fcbb 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000986:	2308      	movs	r3, #8
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4834      	ldr	r0, [pc, #208]	; (8000a70 <MX_GPIO_Init+0x1e0>)
 800099e:	f000 fcad 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80009a2:	2332      	movs	r3, #50	; 0x32
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	482e      	ldr	r0, [pc, #184]	; (8000a70 <MX_GPIO_Init+0x1e0>)
 80009b8:	f000 fca0 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009bc:	2301      	movs	r3, #1
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4828      	ldr	r0, [pc, #160]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80009d4:	f000 fc92 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009d8:	2301      	movs	r3, #1
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009dc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4823      	ldr	r0, [pc, #140]	; (8000a7c <MX_GPIO_Init+0x1ec>)
 80009ee:	f000 fc85 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 80009f2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009f6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	481b      	ldr	r0, [pc, #108]	; (8000a78 <MX_GPIO_Init+0x1e8>)
 8000a0c:	f000 fc76 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4815      	ldr	r0, [pc, #84]	; (8000a7c <MX_GPIO_Init+0x1ec>)
 8000a26:	f000 fc69 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a2a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a3c:	230a      	movs	r3, #10
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	480d      	ldr	r0, [pc, #52]	; (8000a7c <MX_GPIO_Init+0x1ec>)
 8000a48:	f000 fc58 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a4c:	2320      	movs	r3, #32
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4806      	ldr	r0, [pc, #24]	; (8000a78 <MX_GPIO_Init+0x1e8>)
 8000a60:	f000 fc4c 	bl	80012fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a64:	bf00      	nop
 8000a66:	3730      	adds	r7, #48	; 0x30
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40020800 	.word	0x40020800
 8000a78:	40020c00 	.word	0x40020c00
 8000a7c:	40020000 	.word	0x40020000

08000a80 <flashLED>:

/* USER CODE BEGIN 4 */
void flashLED(uint16_t color){//flashes LED for 4 seconds at 10Hz
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	80fb      	strh	r3, [r7, #6]

	int waitTime = 750000;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <flashLED+0x70>)
 8000a8c:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<=40;++i){//40*100 mSec = 4 seconds
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e022      	b.n	8000ada <flashLED+0x5a>
		HAL_GPIO_WritePin(GPIOD, color, GPIO_PIN_SET);//led on
 8000a94:	88fb      	ldrh	r3, [r7, #6]
 8000a96:	2201      	movs	r2, #1
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4816      	ldr	r0, [pc, #88]	; (8000af4 <flashLED+0x74>)
 8000a9c:	f000 fdb2 	bl	8001604 <HAL_GPIO_WritePin>
		for(int i=0;i<waitTime;++i);//~50 mSeconds
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	e002      	b.n	8000aac <flashLED+0x2c>
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	dbf8      	blt.n	8000aa6 <flashLED+0x26>
		HAL_GPIO_WritePin(GPIOD, color, GPIO_PIN_RESET);//led off
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480e      	ldr	r0, [pc, #56]	; (8000af4 <flashLED+0x74>)
 8000abc:	f000 fda2 	bl	8001604 <HAL_GPIO_WritePin>
		for(int i=0;i<waitTime;++i);//~50 mSeconds
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	e002      	b.n	8000acc <flashLED+0x4c>
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fa      	ldr	r2, [r7, #12]
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	dbf8      	blt.n	8000ac6 <flashLED+0x46>
	for(int i=0;i<=40;++i){//40*100 mSec = 4 seconds
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	2b28      	cmp	r3, #40	; 0x28
 8000ade:	ddd9      	ble.n	8000a94 <flashLED+0x14>
		}//nested for
	vTaskSuspend(NULL);
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f003 fe5d 	bl	80047a0 <vTaskSuspend>

	return;
 8000ae6:	bf00      	nop
}//flash led
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	000b71b0 	.word	0x000b71b0
 8000af4:	40020c00 	.word	0x40020c00

08000af8 <Access_Function>:

void Access_Function(){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
	osMutexWait(CriticalResourceMutexHandle, osWaitForever);//Mutex lock (wait)
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <Access_Function+0x7c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f04f 31ff 	mov.w	r1, #4294967295
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 fd3c 	bl	8003584 <osMutexWait>

	int waitTime = 750000;
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <Access_Function+0x80>)
 8000b0e:	603b      	str	r3, [r7, #0]
	for(int i=0;i<=20;++i){//20*100 mSec = 2 seconds
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	e022      	b.n	8000b5c <Access_Function+0x64>
		HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin, GPIO_PIN_SET);//blue on
 8000b16:	2201      	movs	r2, #1
 8000b18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b1c:	4817      	ldr	r0, [pc, #92]	; (8000b7c <Access_Function+0x84>)
 8000b1e:	f000 fd71 	bl	8001604 <HAL_GPIO_WritePin>
		for(int i=0;i<waitTime;++i);//~50 mSeconds
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	e002      	b.n	8000b2e <Access_Function+0x36>
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	dbf8      	blt.n	8000b28 <Access_Function+0x30>
		HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin, GPIO_PIN_RESET);//blue off
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b3c:	480f      	ldr	r0, [pc, #60]	; (8000b7c <Access_Function+0x84>)
 8000b3e:	f000 fd61 	bl	8001604 <HAL_GPIO_WritePin>
		for(int i=0;i<waitTime;++i);//~50 mSeconds
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	e002      	b.n	8000b4e <Access_Function+0x56>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	dbf8      	blt.n	8000b48 <Access_Function+0x50>
	for(int i=0;i<=20;++i){//20*100 mSec = 2 seconds
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2b14      	cmp	r3, #20
 8000b60:	ddd9      	ble.n	8000b16 <Access_Function+0x1e>
	}//nested for

	osMutexRelease(CriticalResourceMutexHandle);//Mutex unlock (signal)
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <Access_Function+0x7c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f002 fd5a 	bl	8003620 <osMutexRelease>
	return;
 8000b6c:	bf00      	nop
}//access function
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000464 	.word	0x20000464
 8000b78:	000b71b0 	.word	0x000b71b0
 8000b7c:	40020c00 	.word	0x40020c00

08000b80 <StartFlashGreenLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFlashGreenLedTask */
void StartFlashGreenLedTask(void const * argument)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 8000b88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b8c:	f002 fccd 	bl	800352a <osDelay>
	  flashLED(LED_GREEN_Pin);
 8000b90:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b94:	f7ff ff74 	bl	8000a80 <flashLED>
	  osDelay(1000);
 8000b98:	e7f6      	b.n	8000b88 <StartFlashGreenLedTask+0x8>

08000b9a <StartFlashRedLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlashRedLedTask */
void StartFlashRedLedTask(void const * argument)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlashRedLedTask */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 8000ba2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ba6:	f002 fcc0 	bl	800352a <osDelay>
	  Access_Function();
 8000baa:	f7ff ffa5 	bl	8000af8 <Access_Function>
	  flashLED(LED_RED_Pin);
 8000bae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000bb2:	f7ff ff65 	bl	8000a80 <flashLED>
	  osDelay(1000);
 8000bb6:	e7f4      	b.n	8000ba2 <StartFlashRedLedTask+0x8>

08000bb8 <StartFlashOrangeLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlashOrangeLedTask */
void StartFlashOrangeLedTask(void const * argument)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlashOrangeLedTask */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 8000bc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc4:	f002 fcb1 	bl	800352a <osDelay>
	  flashLED(LED_ORANGE_Pin);
 8000bc8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bcc:	f7ff ff58 	bl	8000a80 <flashLED>
	  osDelay(1000);
 8000bd0:	e7f6      	b.n	8000bc0 <StartFlashOrangeLedTask+0x8>
	...

08000bd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d101      	bne.n	8000bea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000be6:	f000 fa87 	bl	80010f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40010000 	.word	0x40010000

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_MspInit+0x54>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <HAL_MspInit+0x54>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_MspInit+0x54>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_MspInit+0x54>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_MspInit+0x54>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_MspInit+0x54>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	210f      	movs	r1, #15
 8000c46:	f06f 0001 	mvn.w	r0, #1
 8000c4a:	f000 fb2d 	bl	80012a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <HAL_I2C_MspInit+0x84>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d12c      	bne.n	8000cd8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c9a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca0:	2312      	movs	r3, #18
 8000ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cac:	2304      	movs	r3, #4
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <HAL_I2C_MspInit+0x8c>)
 8000cb8:	f000 fb20 	bl	80012fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000cc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cd8:	bf00      	nop
 8000cda:	3728      	adds	r7, #40	; 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020400 	.word	0x40020400

08000cec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08e      	sub	sp, #56	; 0x38
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a59      	ldr	r2, [pc, #356]	; (8000e70 <HAL_I2S_MspInit+0x184>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d15b      	bne.n	8000dc6 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	623b      	str	r3, [r7, #32]
 8000d12:	4b58      	ldr	r3, [pc, #352]	; (8000e74 <HAL_I2S_MspInit+0x188>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a57      	ldr	r2, [pc, #348]	; (8000e74 <HAL_I2S_MspInit+0x188>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b55      	ldr	r3, [pc, #340]	; (8000e74 <HAL_I2S_MspInit+0x188>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d26:	623b      	str	r3, [r7, #32]
 8000d28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
 8000d2e:	4b51      	ldr	r3, [pc, #324]	; (8000e74 <HAL_I2S_MspInit+0x188>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a50      	ldr	r2, [pc, #320]	; (8000e74 <HAL_I2S_MspInit+0x188>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b4e      	ldr	r3, [pc, #312]	; (8000e74 <HAL_I2S_MspInit+0x188>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	61fb      	str	r3, [r7, #28]
 8000d44:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
 8000d4a:	4b4a      	ldr	r3, [pc, #296]	; (8000e74 <HAL_I2S_MspInit+0x188>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a49      	ldr	r2, [pc, #292]	; (8000e74 <HAL_I2S_MspInit+0x188>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b47      	ldr	r3, [pc, #284]	; (8000e74 <HAL_I2S_MspInit+0x188>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	61bb      	str	r3, [r7, #24]
 8000d60:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d62:	2304      	movs	r3, #4
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000d72:	2306      	movs	r3, #6
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	483e      	ldr	r0, [pc, #248]	; (8000e78 <HAL_I2S_MspInit+0x18c>)
 8000d7e:	f000 fabd 	bl	80012fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d82:	2308      	movs	r3, #8
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d92:	2305      	movs	r3, #5
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4836      	ldr	r0, [pc, #216]	; (8000e78 <HAL_I2S_MspInit+0x18c>)
 8000d9e:	f000 faad 	bl	80012fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000da2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000db4:	2305      	movs	r3, #5
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	482f      	ldr	r0, [pc, #188]	; (8000e7c <HAL_I2S_MspInit+0x190>)
 8000dc0:	f000 fa9c 	bl	80012fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000dc4:	e04f      	b.n	8000e66 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a2d      	ldr	r2, [pc, #180]	; (8000e80 <HAL_I2S_MspInit+0x194>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d14a      	bne.n	8000e66 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <HAL_I2S_MspInit+0x188>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	4a26      	ldr	r2, [pc, #152]	; (8000e74 <HAL_I2S_MspInit+0x188>)
 8000dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dde:	6413      	str	r3, [r2, #64]	; 0x40
 8000de0:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <HAL_I2S_MspInit+0x188>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <HAL_I2S_MspInit+0x188>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <HAL_I2S_MspInit+0x188>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <HAL_I2S_MspInit+0x188>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <HAL_I2S_MspInit+0x188>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	4a18      	ldr	r2, [pc, #96]	; (8000e74 <HAL_I2S_MspInit+0x188>)
 8000e12:	f043 0304 	orr.w	r3, r3, #4
 8000e16:	6313      	str	r3, [r2, #48]	; 0x30
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <HAL_I2S_MspInit+0x188>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e24:	2310      	movs	r3, #16
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e34:	2306      	movs	r3, #6
 8000e36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <HAL_I2S_MspInit+0x198>)
 8000e40:	f000 fa5c 	bl	80012fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e44:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e56:	2306      	movs	r3, #6
 8000e58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <HAL_I2S_MspInit+0x18c>)
 8000e62:	f000 fa4b 	bl	80012fc <HAL_GPIO_Init>
}
 8000e66:	bf00      	nop
 8000e68:	3738      	adds	r7, #56	; 0x38
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40003800 	.word	0x40003800
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020800 	.word	0x40020800
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	40003c00 	.word	0x40003c00
 8000e84:	40020000 	.word	0x40020000

08000e88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a19      	ldr	r2, [pc, #100]	; (8000f0c <HAL_SPI_MspInit+0x84>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d12b      	bne.n	8000f02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_SPI_MspInit+0x88>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <HAL_SPI_MspInit+0x88>)
 8000eb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_SPI_MspInit+0x88>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_SPI_MspInit+0x88>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <HAL_SPI_MspInit+0x88>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_SPI_MspInit+0x88>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ee2:	23e0      	movs	r3, #224	; 0xe0
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ef2:	2305      	movs	r3, #5
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	4805      	ldr	r0, [pc, #20]	; (8000f14 <HAL_SPI_MspInit+0x8c>)
 8000efe:	f000 f9fd 	bl	80012fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40013000 	.word	0x40013000
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020000 	.word	0x40020000

08000f18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	; 0x30
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	4b2e      	ldr	r3, [pc, #184]	; (8000fe8 <HAL_InitTick+0xd0>)
 8000f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f30:	4a2d      	ldr	r2, [pc, #180]	; (8000fe8 <HAL_InitTick+0xd0>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6453      	str	r3, [r2, #68]	; 0x44
 8000f38:	4b2b      	ldr	r3, [pc, #172]	; (8000fe8 <HAL_InitTick+0xd0>)
 8000f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f44:	f107 020c 	add.w	r2, r7, #12
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 fdee 	bl	8002b30 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f54:	f001 fdd8 	bl	8002b08 <HAL_RCC_GetPCLK2Freq>
 8000f58:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5c:	4a23      	ldr	r2, [pc, #140]	; (8000fec <HAL_InitTick+0xd4>)
 8000f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f62:	0c9b      	lsrs	r3, r3, #18
 8000f64:	3b01      	subs	r3, #1
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f68:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <HAL_InitTick+0xd8>)
 8000f6a:	4a22      	ldr	r2, [pc, #136]	; (8000ff4 <HAL_InitTick+0xdc>)
 8000f6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f6e:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <HAL_InitTick+0xd8>)
 8000f70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f74:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f76:	4a1e      	ldr	r2, [pc, #120]	; (8000ff0 <HAL_InitTick+0xd8>)
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <HAL_InitTick+0xd8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f82:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <HAL_InitTick+0xd8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f88:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <HAL_InitTick+0xd8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f8e:	4818      	ldr	r0, [pc, #96]	; (8000ff0 <HAL_InitTick+0xd8>)
 8000f90:	f001 ffdb 	bl	8002f4a <HAL_TIM_Base_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d11b      	bne.n	8000fda <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000fa2:	4813      	ldr	r0, [pc, #76]	; (8000ff0 <HAL_InitTick+0xd8>)
 8000fa4:	f002 f82a 	bl	8002ffc <HAL_TIM_Base_Start_IT>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d111      	bne.n	8000fda <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fb6:	2019      	movs	r0, #25
 8000fb8:	f000 f992 	bl	80012e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b0f      	cmp	r3, #15
 8000fc0:	d808      	bhi.n	8000fd4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	2019      	movs	r0, #25
 8000fc8:	f000 f96e 	bl	80012a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_InitTick+0xe0>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e002      	b.n	8000fda <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3730      	adds	r7, #48	; 0x30
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	431bde83 	.word	0x431bde83
 8000ff0:	2000046c 	.word	0x2000046c
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	20000004 	.word	0x20000004

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001000:	e7fe      	b.n	8001000 <NMI_Handler+0x4>

08001002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <MemManage_Handler+0x4>

0800100e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <UsageFault_Handler+0x4>

0800101a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800102e:	f002 f847 	bl	80030c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000046c 	.word	0x2000046c

0800103c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <SystemInit+0x20>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <SystemInit+0x20>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001098 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001064:	f7ff ffea 	bl	800103c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800106a:	490d      	ldr	r1, [pc, #52]	; (80010a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800106c:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001080:	4c0a      	ldr	r4, [pc, #40]	; (80010ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800108e:	f004 fee3 	bl	8005e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001092:	f7ff fa3d 	bl	8000510 <main>
  bx  lr    
 8001096:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001098:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010a4:	08006038 	.word	0x08006038
  ldr r2, =_sbss
 80010a8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010ac:	2000434c 	.word	0x2000434c

080010b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <HAL_Init+0x40>)
 80010be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <HAL_Init+0x40>)
 80010ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_Init+0x40>)
 80010d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 f8d8 	bl	8001292 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e2:	200f      	movs	r0, #15
 80010e4:	f7ff ff18 	bl	8000f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e8:	f7ff fd8c 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023c00 	.word	0x40023c00

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x20>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_IncTick+0x24>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008
 800111c:	200004b4 	.word	0x200004b4

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	200004b4 	.word	0x200004b4

08001138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116a:	4a04      	ldr	r2, [pc, #16]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	60d3      	str	r3, [r2, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4907      	ldr	r1, [pc, #28]	; (80011d4 <__NVIC_EnableIRQ+0x38>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	; (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	; (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ff4c 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ba:	f7ff ff61 	bl	8001180 <__NVIC_GetPriorityGrouping>
 80012be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	68b9      	ldr	r1, [r7, #8]
 80012c4:	6978      	ldr	r0, [r7, #20]
 80012c6:	f7ff ffb1 	bl	800122c <NVIC_EncodePriority>
 80012ca:	4602      	mov	r2, r0
 80012cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff80 	bl	80011d8 <__NVIC_SetPriority>
}
 80012d8:	bf00      	nop
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff54 	bl	800119c <__NVIC_EnableIRQ>
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	; 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
 8001316:	e159      	b.n	80015cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001318:	2201      	movs	r2, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	429a      	cmp	r2, r3
 8001332:	f040 8148 	bne.w	80015c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	2b01      	cmp	r3, #1
 8001340:	d005      	beq.n	800134e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800134a:	2b02      	cmp	r3, #2
 800134c:	d130      	bne.n	80013b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	2203      	movs	r2, #3
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	68da      	ldr	r2, [r3, #12]
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001384:	2201      	movs	r2, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	091b      	lsrs	r3, r3, #4
 800139a:	f003 0201 	and.w	r2, r3, #1
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d017      	beq.n	80013ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	2203      	movs	r2, #3
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d123      	bne.n	8001440 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	08da      	lsrs	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3208      	adds	r2, #8
 8001400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	220f      	movs	r2, #15
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	08da      	lsrs	r2, r3, #3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3208      	adds	r2, #8
 800143a:	69b9      	ldr	r1, [r7, #24]
 800143c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0203 	and.w	r2, r3, #3
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 80a2 	beq.w	80015c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b57      	ldr	r3, [pc, #348]	; (80015e4 <HAL_GPIO_Init+0x2e8>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a56      	ldr	r2, [pc, #344]	; (80015e4 <HAL_GPIO_Init+0x2e8>)
 800148c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b54      	ldr	r3, [pc, #336]	; (80015e4 <HAL_GPIO_Init+0x2e8>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800149e:	4a52      	ldr	r2, [pc, #328]	; (80015e8 <HAL_GPIO_Init+0x2ec>)
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	089b      	lsrs	r3, r3, #2
 80014a4:	3302      	adds	r3, #2
 80014a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	220f      	movs	r2, #15
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a49      	ldr	r2, [pc, #292]	; (80015ec <HAL_GPIO_Init+0x2f0>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d019      	beq.n	80014fe <HAL_GPIO_Init+0x202>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a48      	ldr	r2, [pc, #288]	; (80015f0 <HAL_GPIO_Init+0x2f4>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d013      	beq.n	80014fa <HAL_GPIO_Init+0x1fe>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a47      	ldr	r2, [pc, #284]	; (80015f4 <HAL_GPIO_Init+0x2f8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d00d      	beq.n	80014f6 <HAL_GPIO_Init+0x1fa>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a46      	ldr	r2, [pc, #280]	; (80015f8 <HAL_GPIO_Init+0x2fc>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d007      	beq.n	80014f2 <HAL_GPIO_Init+0x1f6>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a45      	ldr	r2, [pc, #276]	; (80015fc <HAL_GPIO_Init+0x300>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d101      	bne.n	80014ee <HAL_GPIO_Init+0x1f2>
 80014ea:	2304      	movs	r3, #4
 80014ec:	e008      	b.n	8001500 <HAL_GPIO_Init+0x204>
 80014ee:	2307      	movs	r3, #7
 80014f0:	e006      	b.n	8001500 <HAL_GPIO_Init+0x204>
 80014f2:	2303      	movs	r3, #3
 80014f4:	e004      	b.n	8001500 <HAL_GPIO_Init+0x204>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e002      	b.n	8001500 <HAL_GPIO_Init+0x204>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <HAL_GPIO_Init+0x204>
 80014fe:	2300      	movs	r3, #0
 8001500:	69fa      	ldr	r2, [r7, #28]
 8001502:	f002 0203 	and.w	r2, r2, #3
 8001506:	0092      	lsls	r2, r2, #2
 8001508:	4093      	lsls	r3, r2
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001510:	4935      	ldr	r1, [pc, #212]	; (80015e8 <HAL_GPIO_Init+0x2ec>)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	089b      	lsrs	r3, r3, #2
 8001516:	3302      	adds	r3, #2
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800151e:	4b38      	ldr	r3, [pc, #224]	; (8001600 <HAL_GPIO_Init+0x304>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001542:	4a2f      	ldr	r2, [pc, #188]	; (8001600 <HAL_GPIO_Init+0x304>)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001548:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <HAL_GPIO_Init+0x304>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800156c:	4a24      	ldr	r2, [pc, #144]	; (8001600 <HAL_GPIO_Init+0x304>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001572:	4b23      	ldr	r3, [pc, #140]	; (8001600 <HAL_GPIO_Init+0x304>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001596:	4a1a      	ldr	r2, [pc, #104]	; (8001600 <HAL_GPIO_Init+0x304>)
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_GPIO_Init+0x304>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015c0:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <HAL_GPIO_Init+0x304>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3301      	adds	r3, #1
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	2b0f      	cmp	r3, #15
 80015d0:	f67f aea2 	bls.w	8001318 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3724      	adds	r7, #36	; 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40013800 	.word	0x40013800
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40020800 	.word	0x40020800
 80015f8:	40020c00 	.word	0x40020c00
 80015fc:	40021000 	.word	0x40021000
 8001600:	40013c00 	.word	0x40013c00

08001604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
 8001610:	4613      	mov	r3, r2
 8001612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001614:	787b      	ldrb	r3, [r7, #1]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800161a:	887a      	ldrh	r2, [r7, #2]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001620:	e003      	b.n	800162a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	041a      	lsls	r2, r3, #16
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	619a      	str	r2, [r3, #24]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e12b      	b.n	80018a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d106      	bne.n	8001664 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff fafc 	bl	8000c5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2224      	movs	r2, #36	; 0x24
 8001668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800168a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800169a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800169c:	f001 fa20 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 80016a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4a81      	ldr	r2, [pc, #516]	; (80018ac <HAL_I2C_Init+0x274>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d807      	bhi.n	80016bc <HAL_I2C_Init+0x84>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4a80      	ldr	r2, [pc, #512]	; (80018b0 <HAL_I2C_Init+0x278>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	bf94      	ite	ls
 80016b4:	2301      	movls	r3, #1
 80016b6:	2300      	movhi	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	e006      	b.n	80016ca <HAL_I2C_Init+0x92>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4a7d      	ldr	r2, [pc, #500]	; (80018b4 <HAL_I2C_Init+0x27c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	bf94      	ite	ls
 80016c4:	2301      	movls	r3, #1
 80016c6:	2300      	movhi	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0e7      	b.n	80018a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4a78      	ldr	r2, [pc, #480]	; (80018b8 <HAL_I2C_Init+0x280>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	0c9b      	lsrs	r3, r3, #18
 80016dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4a6a      	ldr	r2, [pc, #424]	; (80018ac <HAL_I2C_Init+0x274>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d802      	bhi.n	800170c <HAL_I2C_Init+0xd4>
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	3301      	adds	r3, #1
 800170a:	e009      	b.n	8001720 <HAL_I2C_Init+0xe8>
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001712:	fb02 f303 	mul.w	r3, r2, r3
 8001716:	4a69      	ldr	r2, [pc, #420]	; (80018bc <HAL_I2C_Init+0x284>)
 8001718:	fba2 2303 	umull	r2, r3, r2, r3
 800171c:	099b      	lsrs	r3, r3, #6
 800171e:	3301      	adds	r3, #1
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	430b      	orrs	r3, r1
 8001726:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001732:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	495c      	ldr	r1, [pc, #368]	; (80018ac <HAL_I2C_Init+0x274>)
 800173c:	428b      	cmp	r3, r1
 800173e:	d819      	bhi.n	8001774 <HAL_I2C_Init+0x13c>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1e59      	subs	r1, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	fbb1 f3f3 	udiv	r3, r1, r3
 800174e:	1c59      	adds	r1, r3, #1
 8001750:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001754:	400b      	ands	r3, r1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00a      	beq.n	8001770 <HAL_I2C_Init+0x138>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1e59      	subs	r1, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fbb1 f3f3 	udiv	r3, r1, r3
 8001768:	3301      	adds	r3, #1
 800176a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176e:	e051      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 8001770:	2304      	movs	r3, #4
 8001772:	e04f      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d111      	bne.n	80017a0 <HAL_I2C_Init+0x168>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	1e58      	subs	r0, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	440b      	add	r3, r1
 800178a:	fbb0 f3f3 	udiv	r3, r0, r3
 800178e:	3301      	adds	r3, #1
 8001790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001794:	2b00      	cmp	r3, #0
 8001796:	bf0c      	ite	eq
 8001798:	2301      	moveq	r3, #1
 800179a:	2300      	movne	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	e012      	b.n	80017c6 <HAL_I2C_Init+0x18e>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1e58      	subs	r0, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6859      	ldr	r1, [r3, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	0099      	lsls	r1, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b6:	3301      	adds	r3, #1
 80017b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017bc:	2b00      	cmp	r3, #0
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_Init+0x196>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e022      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10e      	bne.n	80017f4 <HAL_I2C_Init+0x1bc>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1e58      	subs	r0, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6859      	ldr	r1, [r3, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	440b      	add	r3, r1
 80017e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e8:	3301      	adds	r3, #1
 80017ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f2:	e00f      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1e58      	subs	r0, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	0099      	lsls	r1, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	fbb0 f3f3 	udiv	r3, r0, r3
 800180a:	3301      	adds	r3, #1
 800180c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	6809      	ldr	r1, [r1, #0]
 8001818:	4313      	orrs	r3, r2
 800181a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69da      	ldr	r2, [r3, #28]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001842:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6911      	ldr	r1, [r2, #16]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68d2      	ldr	r2, [r2, #12]
 800184e:	4311      	orrs	r1, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	430b      	orrs	r3, r1
 8001856:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695a      	ldr	r2, [r3, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2220      	movs	r2, #32
 800188e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	000186a0 	.word	0x000186a0
 80018b0:	001e847f 	.word	0x001e847f
 80018b4:	003d08ff 	.word	0x003d08ff
 80018b8:	431bde83 	.word	0x431bde83
 80018bc:	10624dd3 	.word	0x10624dd3

080018c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e128      	b.n	8001b24 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d109      	bne.n	80018f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a90      	ldr	r2, [pc, #576]	; (8001b2c <HAL_I2S_Init+0x26c>)
 80018ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff f9fd 	bl	8000cec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2202      	movs	r2, #2
 80018f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001908:	f023 030f 	bic.w	r3, r3, #15
 800190c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2202      	movs	r2, #2
 8001914:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d060      	beq.n	80019e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d102      	bne.n	800192c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001926:	2310      	movs	r3, #16
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e001      	b.n	8001930 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800192c:	2320      	movs	r3, #32
 800192e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b20      	cmp	r3, #32
 8001936:	d802      	bhi.n	800193e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800193e:	2001      	movs	r0, #1
 8001940:	f001 fa18 	bl	8002d74 <HAL_RCCEx_GetPeriphCLKFreq>
 8001944:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800194e:	d125      	bne.n	800199c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d010      	beq.n	800197a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	461a      	mov	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	fbb2 f3f3 	udiv	r3, r2, r3
 8001974:	3305      	adds	r3, #5
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	e01f      	b.n	80019ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	fbb2 f2f3 	udiv	r2, r2, r3
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	461a      	mov	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	fbb2 f3f3 	udiv	r3, r2, r3
 8001996:	3305      	adds	r3, #5
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	e00e      	b.n	80019ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	461a      	mov	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b6:	3305      	adds	r3, #5
 80019b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4a5c      	ldr	r2, [pc, #368]	; (8001b30 <HAL_I2S_Init+0x270>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	08db      	lsrs	r3, r3, #3
 80019c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	085b      	lsrs	r3, r3, #1
 80019d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	e003      	b.n	80019e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80019e0:	2302      	movs	r3, #2
 80019e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d902      	bls.n	80019f4 <HAL_I2S_Init+0x134>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	2bff      	cmp	r3, #255	; 0xff
 80019f2:	d907      	bls.n	8001a04 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f8:	f043 0210 	orr.w	r2, r3, #16
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e08f      	b.n	8001b24 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	ea42 0103 	orr.w	r1, r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a22:	f023 030f 	bic.w	r3, r3, #15
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6851      	ldr	r1, [r2, #4]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6892      	ldr	r2, [r2, #8]
 8001a2e:	4311      	orrs	r1, r2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	68d2      	ldr	r2, [r2, #12]
 8001a34:	4311      	orrs	r1, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6992      	ldr	r2, [r2, #24]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a46:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d161      	bne.n	8001b14 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a38      	ldr	r2, [pc, #224]	; (8001b34 <HAL_I2S_Init+0x274>)
 8001a54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a37      	ldr	r2, [pc, #220]	; (8001b38 <HAL_I2S_Init+0x278>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d101      	bne.n	8001a64 <HAL_I2S_Init+0x1a4>
 8001a60:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <HAL_I2S_Init+0x27c>)
 8001a62:	e001      	b.n	8001a68 <HAL_I2S_Init+0x1a8>
 8001a64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	4932      	ldr	r1, [pc, #200]	; (8001b38 <HAL_I2S_Init+0x278>)
 8001a70:	428a      	cmp	r2, r1
 8001a72:	d101      	bne.n	8001a78 <HAL_I2S_Init+0x1b8>
 8001a74:	4a31      	ldr	r2, [pc, #196]	; (8001b3c <HAL_I2S_Init+0x27c>)
 8001a76:	e001      	b.n	8001a7c <HAL_I2S_Init+0x1bc>
 8001a78:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a7c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a80:	f023 030f 	bic.w	r3, r3, #15
 8001a84:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a2b      	ldr	r2, [pc, #172]	; (8001b38 <HAL_I2S_Init+0x278>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d101      	bne.n	8001a94 <HAL_I2S_Init+0x1d4>
 8001a90:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <HAL_I2S_Init+0x27c>)
 8001a92:	e001      	b.n	8001a98 <HAL_I2S_Init+0x1d8>
 8001a94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a98:	2202      	movs	r2, #2
 8001a9a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a25      	ldr	r2, [pc, #148]	; (8001b38 <HAL_I2S_Init+0x278>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d101      	bne.n	8001aaa <HAL_I2S_Init+0x1ea>
 8001aa6:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <HAL_I2S_Init+0x27c>)
 8001aa8:	e001      	b.n	8001aae <HAL_I2S_Init+0x1ee>
 8001aaa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aba:	d003      	beq.n	8001ac4 <HAL_I2S_Init+0x204>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d103      	bne.n	8001acc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	e001      	b.n	8001ad0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001acc:	2300      	movs	r3, #0
 8001ace:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001ada:	4313      	orrs	r3, r2
 8001adc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001aee:	4313      	orrs	r3, r2
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	897b      	ldrh	r3, [r7, #10]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001afc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <HAL_I2S_Init+0x278>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d101      	bne.n	8001b0c <HAL_I2S_Init+0x24c>
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_I2S_Init+0x27c>)
 8001b0a:	e001      	b.n	8001b10 <HAL_I2S_Init+0x250>
 8001b0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b10:	897a      	ldrh	r2, [r7, #10]
 8001b12:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	08001c37 	.word	0x08001c37
 8001b30:	cccccccd 	.word	0xcccccccd
 8001b34:	08001d4d 	.word	0x08001d4d
 8001b38:	40003800 	.word	0x40003800
 8001b3c:	40003400 	.word	0x40003400

08001b40 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	881a      	ldrh	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	1c9a      	adds	r2, r3, #2
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10e      	bne.n	8001bd0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bc0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffb8 	bl	8001b40 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	b292      	uxth	r2, r2
 8001bec:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf2:	1c9a      	adds	r2, r3, #2
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10e      	bne.n	8001c2e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c1e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ff93 	bl	8001b54 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d13a      	bne.n	8001cc8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d109      	bne.n	8001c70 <I2S_IRQHandler+0x3a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c66:	2b40      	cmp	r3, #64	; 0x40
 8001c68:	d102      	bne.n	8001c70 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ffb4 	bl	8001bd8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c76:	2b40      	cmp	r3, #64	; 0x40
 8001c78:	d126      	bne.n	8001cc8 <I2S_IRQHandler+0x92>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b20      	cmp	r3, #32
 8001c86:	d11f      	bne.n	8001cc8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c96:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	f043 0202 	orr.w	r2, r3, #2
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ff50 	bl	8001b68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d136      	bne.n	8001d42 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d109      	bne.n	8001cf2 <I2S_IRQHandler+0xbc>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce8:	2b80      	cmp	r3, #128	; 0x80
 8001cea:	d102      	bne.n	8001cf2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff45 	bl	8001b7c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d122      	bne.n	8001d42 <I2S_IRQHandler+0x10c>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0320 	and.w	r3, r3, #32
 8001d06:	2b20      	cmp	r3, #32
 8001d08:	d11b      	bne.n	8001d42 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d18:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d34:	f043 0204 	orr.w	r2, r3, #4
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff13 	bl	8001b68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d42:	bf00      	nop
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a92      	ldr	r2, [pc, #584]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d101      	bne.n	8001d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001d66:	4b92      	ldr	r3, [pc, #584]	; (8001fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d68:	e001      	b.n	8001d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001d6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a8b      	ldr	r2, [pc, #556]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d101      	bne.n	8001d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001d84:	4b8a      	ldr	r3, [pc, #552]	; (8001fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d86:	e001      	b.n	8001d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001d88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d98:	d004      	beq.n	8001da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 8099 	bne.w	8001ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d107      	bne.n	8001dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f925 	bl	8002008 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d107      	bne.n	8001dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f9c8 	bl	8002168 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dde:	2b40      	cmp	r3, #64	; 0x40
 8001de0:	d13a      	bne.n	8001e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f003 0320 	and.w	r3, r3, #32
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d035      	beq.n	8001e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a6e      	ldr	r2, [pc, #440]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d101      	bne.n	8001dfa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001df6:	4b6e      	ldr	r3, [pc, #440]	; (8001fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001df8:	e001      	b.n	8001dfe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001dfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4969      	ldr	r1, [pc, #420]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e06:	428b      	cmp	r3, r1
 8001e08:	d101      	bne.n	8001e0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001e0a:	4b69      	ldr	r3, [pc, #420]	; (8001fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e0c:	e001      	b.n	8001e12 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001e0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e16:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e26:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f043 0202 	orr.w	r2, r3, #2
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff fe88 	bl	8001b68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	f040 80c3 	bne.w	8001fea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80bd 	beq.w	8001fea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e7e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a49      	ldr	r2, [pc, #292]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001e8a:	4b49      	ldr	r3, [pc, #292]	; (8001fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e8c:	e001      	b.n	8001e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001e8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4944      	ldr	r1, [pc, #272]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e9a:	428b      	cmp	r3, r1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001e9e:	4b44      	ldr	r3, [pc, #272]	; (8001fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ea0:	e001      	b.n	8001ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001ea2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ea6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001eaa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001eac:	2300      	movs	r3, #0
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f043 0204 	orr.w	r2, r3, #4
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fe4a 	bl	8001b68 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ed4:	e089      	b.n	8001fea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d107      	bne.n	8001ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8be 	bl	800206c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d107      	bne.n	8001f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d002      	beq.n	8001f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f8fd 	bl	8002104 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f10:	2b40      	cmp	r3, #64	; 0x40
 8001f12:	d12f      	bne.n	8001f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 0320 	and.w	r3, r3, #32
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d02a      	beq.n	8001f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f2c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a1e      	ldr	r2, [pc, #120]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d101      	bne.n	8001f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f3a:	e001      	b.n	8001f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001f3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4919      	ldr	r1, [pc, #100]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f48:	428b      	cmp	r3, r1
 8001f4a:	d101      	bne.n	8001f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f4e:	e001      	b.n	8001f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001f50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f58:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f043 0202 	orr.w	r2, r3, #2
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff fdfa 	bl	8001b68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d136      	bne.n	8001fec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d031      	beq.n	8001fec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a07      	ldr	r2, [pc, #28]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d101      	bne.n	8001f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f94:	e001      	b.n	8001f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001f96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4902      	ldr	r1, [pc, #8]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fa2:	428b      	cmp	r3, r1
 8001fa4:	d106      	bne.n	8001fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001fa6:	4b02      	ldr	r3, [pc, #8]	; (8001fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fa8:	e006      	b.n	8001fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001faa:	bf00      	nop
 8001fac:	40003800 	.word	0x40003800
 8001fb0:	40003400 	.word	0x40003400
 8001fb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fb8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fbc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fcc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f043 0204 	orr.w	r2, r3, #4
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fdc0 	bl	8001b68 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fe8:	e000      	b.n	8001fec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001fea:	bf00      	nop
}
 8001fec:	bf00      	nop
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	1c99      	adds	r1, r3, #2
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6251      	str	r1, [r2, #36]	; 0x24
 800201a:	881a      	ldrh	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002026:	b29b      	uxth	r3, r3
 8002028:	3b01      	subs	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002034:	b29b      	uxth	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d113      	bne.n	8002062 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002048:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800204e:	b29b      	uxth	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d106      	bne.n	8002062 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ffc9 	bl	8001ff4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	1c99      	adds	r1, r3, #2
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6251      	str	r1, [r2, #36]	; 0x24
 800207e:	8819      	ldrh	r1, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <I2SEx_TxISR_I2SExt+0x90>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <I2SEx_TxISR_I2SExt+0x22>
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <I2SEx_TxISR_I2SExt+0x94>)
 800208c:	e001      	b.n	8002092 <I2SEx_TxISR_I2SExt+0x26>
 800208e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002092:	460a      	mov	r2, r1
 8002094:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d121      	bne.n	80020f2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a12      	ldr	r2, [pc, #72]	; (80020fc <I2SEx_TxISR_I2SExt+0x90>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d101      	bne.n	80020bc <I2SEx_TxISR_I2SExt+0x50>
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <I2SEx_TxISR_I2SExt+0x94>)
 80020ba:	e001      	b.n	80020c0 <I2SEx_TxISR_I2SExt+0x54>
 80020bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	490d      	ldr	r1, [pc, #52]	; (80020fc <I2SEx_TxISR_I2SExt+0x90>)
 80020c8:	428b      	cmp	r3, r1
 80020ca:	d101      	bne.n	80020d0 <I2SEx_TxISR_I2SExt+0x64>
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <I2SEx_TxISR_I2SExt+0x94>)
 80020ce:	e001      	b.n	80020d4 <I2SEx_TxISR_I2SExt+0x68>
 80020d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d106      	bne.n	80020f2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff81 	bl	8001ff4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40003800 	.word	0x40003800
 8002100:	40003400 	.word	0x40003400

08002104 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68d8      	ldr	r0, [r3, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	1c99      	adds	r1, r3, #2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800211c:	b282      	uxth	r2, r0
 800211e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002124:	b29b      	uxth	r3, r3
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d113      	bne.n	8002160 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002146:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214c:	b29b      	uxth	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ff4a 	bl	8001ff4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a20      	ldr	r2, [pc, #128]	; (80021f8 <I2SEx_RxISR_I2SExt+0x90>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <I2SEx_RxISR_I2SExt+0x16>
 800217a:	4b20      	ldr	r3, [pc, #128]	; (80021fc <I2SEx_RxISR_I2SExt+0x94>)
 800217c:	e001      	b.n	8002182 <I2SEx_RxISR_I2SExt+0x1a>
 800217e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002182:	68d8      	ldr	r0, [r3, #12]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	1c99      	adds	r1, r3, #2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800218e:	b282      	uxth	r2, r0
 8002190:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d121      	bne.n	80021ee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <I2SEx_RxISR_I2SExt+0x90>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d101      	bne.n	80021b8 <I2SEx_RxISR_I2SExt+0x50>
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <I2SEx_RxISR_I2SExt+0x94>)
 80021b6:	e001      	b.n	80021bc <I2SEx_RxISR_I2SExt+0x54>
 80021b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	490d      	ldr	r1, [pc, #52]	; (80021f8 <I2SEx_RxISR_I2SExt+0x90>)
 80021c4:	428b      	cmp	r3, r1
 80021c6:	d101      	bne.n	80021cc <I2SEx_RxISR_I2SExt+0x64>
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <I2SEx_RxISR_I2SExt+0x94>)
 80021ca:	e001      	b.n	80021d0 <I2SEx_RxISR_I2SExt+0x68>
 80021cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021d4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021da:	b29b      	uxth	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d106      	bne.n	80021ee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff03 	bl	8001ff4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40003800 	.word	0x40003800
 80021fc:	40003400 	.word	0x40003400

08002200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e267      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d075      	beq.n	800230a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800221e:	4b88      	ldr	r3, [pc, #544]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b04      	cmp	r3, #4
 8002228:	d00c      	beq.n	8002244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800222a:	4b85      	ldr	r3, [pc, #532]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002232:	2b08      	cmp	r3, #8
 8002234:	d112      	bne.n	800225c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002236:	4b82      	ldr	r3, [pc, #520]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002242:	d10b      	bne.n	800225c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	4b7e      	ldr	r3, [pc, #504]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d05b      	beq.n	8002308 <HAL_RCC_OscConfig+0x108>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d157      	bne.n	8002308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e242      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002264:	d106      	bne.n	8002274 <HAL_RCC_OscConfig+0x74>
 8002266:	4b76      	ldr	r3, [pc, #472]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a75      	ldr	r2, [pc, #468]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e01d      	b.n	80022b0 <HAL_RCC_OscConfig+0xb0>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x98>
 800227e:	4b70      	ldr	r3, [pc, #448]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a6f      	ldr	r2, [pc, #444]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b6d      	ldr	r3, [pc, #436]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a6c      	ldr	r2, [pc, #432]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e00b      	b.n	80022b0 <HAL_RCC_OscConfig+0xb0>
 8002298:	4b69      	ldr	r3, [pc, #420]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a68      	ldr	r2, [pc, #416]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 800229e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b66      	ldr	r3, [pc, #408]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a65      	ldr	r2, [pc, #404]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 80022aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d013      	beq.n	80022e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7fe ff32 	bl	8001120 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c0:	f7fe ff2e 	bl	8001120 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e207      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	4b5b      	ldr	r3, [pc, #364]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0xc0>
 80022de:	e014      	b.n	800230a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7fe ff1e 	bl	8001120 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e8:	f7fe ff1a 	bl	8001120 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e1f3      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fa:	4b51      	ldr	r3, [pc, #324]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0xe8>
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d063      	beq.n	80023de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002316:	4b4a      	ldr	r3, [pc, #296]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00b      	beq.n	800233a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002322:	4b47      	ldr	r3, [pc, #284]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800232a:	2b08      	cmp	r3, #8
 800232c:	d11c      	bne.n	8002368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800232e:	4b44      	ldr	r3, [pc, #272]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d116      	bne.n	8002368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233a:	4b41      	ldr	r3, [pc, #260]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <HAL_RCC_OscConfig+0x152>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d001      	beq.n	8002352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e1c7      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002352:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4937      	ldr	r1, [pc, #220]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002366:	e03a      	b.n	80023de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002370:	4b34      	ldr	r3, [pc, #208]	; (8002444 <HAL_RCC_OscConfig+0x244>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002376:	f7fe fed3 	bl	8001120 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800237e:	f7fe fecf 	bl	8001120 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e1a8      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002390:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239c:	4b28      	ldr	r3, [pc, #160]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4925      	ldr	r1, [pc, #148]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]
 80023b0:	e015      	b.n	80023de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b2:	4b24      	ldr	r3, [pc, #144]	; (8002444 <HAL_RCC_OscConfig+0x244>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe feb2 	bl	8001120 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c0:	f7fe feae 	bl	8001120 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e187      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d2:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d036      	beq.n	8002458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d016      	beq.n	8002420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f2:	4b15      	ldr	r3, [pc, #84]	; (8002448 <HAL_RCC_OscConfig+0x248>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f8:	f7fe fe92 	bl	8001120 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002400:	f7fe fe8e 	bl	8001120 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e167      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x200>
 800241e:	e01b      	b.n	8002458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <HAL_RCC_OscConfig+0x248>)
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002426:	f7fe fe7b 	bl	8001120 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242c:	e00e      	b.n	800244c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800242e:	f7fe fe77 	bl	8001120 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d907      	bls.n	800244c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e150      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
 8002440:	40023800 	.word	0x40023800
 8002444:	42470000 	.word	0x42470000
 8002448:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	4b88      	ldr	r3, [pc, #544]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800244e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1ea      	bne.n	800242e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 8097 	beq.w	8002594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246a:	4b81      	ldr	r3, [pc, #516]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10f      	bne.n	8002496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	4b7d      	ldr	r3, [pc, #500]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	4a7c      	ldr	r2, [pc, #496]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002484:	6413      	str	r3, [r2, #64]	; 0x40
 8002486:	4b7a      	ldr	r3, [pc, #488]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002492:	2301      	movs	r3, #1
 8002494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002496:	4b77      	ldr	r3, [pc, #476]	; (8002674 <HAL_RCC_OscConfig+0x474>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d118      	bne.n	80024d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a2:	4b74      	ldr	r3, [pc, #464]	; (8002674 <HAL_RCC_OscConfig+0x474>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a73      	ldr	r2, [pc, #460]	; (8002674 <HAL_RCC_OscConfig+0x474>)
 80024a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ae:	f7fe fe37 	bl	8001120 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b6:	f7fe fe33 	bl	8001120 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e10c      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	4b6a      	ldr	r3, [pc, #424]	; (8002674 <HAL_RCC_OscConfig+0x474>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d106      	bne.n	80024ea <HAL_RCC_OscConfig+0x2ea>
 80024dc:	4b64      	ldr	r3, [pc, #400]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	4a63      	ldr	r2, [pc, #396]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6713      	str	r3, [r2, #112]	; 0x70
 80024e8:	e01c      	b.n	8002524 <HAL_RCC_OscConfig+0x324>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b05      	cmp	r3, #5
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x30c>
 80024f2:	4b5f      	ldr	r3, [pc, #380]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	4a5e      	ldr	r2, [pc, #376]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 80024f8:	f043 0304 	orr.w	r3, r3, #4
 80024fc:	6713      	str	r3, [r2, #112]	; 0x70
 80024fe:	4b5c      	ldr	r3, [pc, #368]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 8002500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002502:	4a5b      	ldr	r2, [pc, #364]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6713      	str	r3, [r2, #112]	; 0x70
 800250a:	e00b      	b.n	8002524 <HAL_RCC_OscConfig+0x324>
 800250c:	4b58      	ldr	r3, [pc, #352]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	4a57      	ldr	r2, [pc, #348]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 8002512:	f023 0301 	bic.w	r3, r3, #1
 8002516:	6713      	str	r3, [r2, #112]	; 0x70
 8002518:	4b55      	ldr	r3, [pc, #340]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251c:	4a54      	ldr	r2, [pc, #336]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800251e:	f023 0304 	bic.w	r3, r3, #4
 8002522:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d015      	beq.n	8002558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7fe fdf8 	bl	8001120 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002532:	e00a      	b.n	800254a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002534:	f7fe fdf4 	bl	8001120 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e0cb      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254a:	4b49      	ldr	r3, [pc, #292]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0ee      	beq.n	8002534 <HAL_RCC_OscConfig+0x334>
 8002556:	e014      	b.n	8002582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002558:	f7fe fde2 	bl	8001120 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255e:	e00a      	b.n	8002576 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002560:	f7fe fdde 	bl	8001120 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	; 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e0b5      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002576:	4b3e      	ldr	r3, [pc, #248]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1ee      	bne.n	8002560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002582:	7dfb      	ldrb	r3, [r7, #23]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002588:	4b39      	ldr	r3, [pc, #228]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	4a38      	ldr	r2, [pc, #224]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800258e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002592:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80a1 	beq.w	80026e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800259e:	4b34      	ldr	r3, [pc, #208]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d05c      	beq.n	8002664 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d141      	bne.n	8002636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b2:	4b31      	ldr	r3, [pc, #196]	; (8002678 <HAL_RCC_OscConfig+0x478>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7fe fdb2 	bl	8001120 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c0:	f7fe fdae 	bl	8001120 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e087      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d2:	4b27      	ldr	r3, [pc, #156]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69da      	ldr	r2, [r3, #28]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	019b      	lsls	r3, r3, #6
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	085b      	lsrs	r3, r3, #1
 80025f6:	3b01      	subs	r3, #1
 80025f8:	041b      	lsls	r3, r3, #16
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	491b      	ldr	r1, [pc, #108]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002608:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <HAL_RCC_OscConfig+0x478>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7fe fd87 	bl	8001120 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002616:	f7fe fd83 	bl	8001120 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e05c      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002628:	4b11      	ldr	r3, [pc, #68]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x416>
 8002634:	e054      	b.n	80026e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <HAL_RCC_OscConfig+0x478>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7fe fd70 	bl	8001120 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002644:	f7fe fd6c 	bl	8001120 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e045      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x444>
 8002662:	e03d      	b.n	80026e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d107      	bne.n	800267c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e038      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
 8002670:	40023800 	.word	0x40023800
 8002674:	40007000 	.word	0x40007000
 8002678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_RCC_OscConfig+0x4ec>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d028      	beq.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d121      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d11a      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026ac:	4013      	ands	r3, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d111      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	085b      	lsrs	r3, r3, #1
 80026c4:	3b01      	subs	r3, #1
 80026c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d107      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800

080026f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0cc      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002704:	4b68      	ldr	r3, [pc, #416]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d90c      	bls.n	800272c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b65      	ldr	r3, [pc, #404]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b63      	ldr	r3, [pc, #396]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0b8      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d020      	beq.n	800277a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002744:	4b59      	ldr	r3, [pc, #356]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a58      	ldr	r2, [pc, #352]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800274e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800275c:	4b53      	ldr	r3, [pc, #332]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4a52      	ldr	r2, [pc, #328]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002768:	4b50      	ldr	r3, [pc, #320]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	494d      	ldr	r1, [pc, #308]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d044      	beq.n	8002810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	4b47      	ldr	r3, [pc, #284]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d119      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e07f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ae:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e06f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027be:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e067      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ce:	4b37      	ldr	r3, [pc, #220]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f023 0203 	bic.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4934      	ldr	r1, [pc, #208]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e0:	f7fe fc9e 	bl	8001120 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e8:	f7fe fc9a 	bl	8001120 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e04f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	4b2b      	ldr	r3, [pc, #172]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 020c 	and.w	r2, r3, #12
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	429a      	cmp	r2, r3
 800280e:	d1eb      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002810:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d20c      	bcs.n	8002838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e032      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4916      	ldr	r1, [pc, #88]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	490e      	ldr	r1, [pc, #56]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002876:	f000 f821 	bl	80028bc <HAL_RCC_GetSysClockFreq>
 800287a:	4602      	mov	r2, r0
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	490a      	ldr	r1, [pc, #40]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	5ccb      	ldrb	r3, [r1, r3]
 800288a:	fa22 f303 	lsr.w	r3, r2, r3
 800288e:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe fb3e 	bl	8000f18 <HAL_InitTick>

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023c00 	.word	0x40023c00
 80028ac:	40023800 	.word	0x40023800
 80028b0:	08006010 	.word	0x08006010
 80028b4:	20000000 	.word	0x20000000
 80028b8:	20000004 	.word	0x20000004

080028bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c0:	b094      	sub	sp, #80	; 0x50
 80028c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	647b      	str	r3, [r7, #68]	; 0x44
 80028c8:	2300      	movs	r3, #0
 80028ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028cc:	2300      	movs	r3, #0
 80028ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028d4:	4b79      	ldr	r3, [pc, #484]	; (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d00d      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x40>
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	f200 80e1 	bhi.w	8002aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x34>
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d003      	beq.n	80028f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ee:	e0db      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028f0:	4b73      	ldr	r3, [pc, #460]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 80028f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028f4:	e0db      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028f6:	4b73      	ldr	r3, [pc, #460]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x208>)
 80028f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028fa:	e0d8      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028fc:	4b6f      	ldr	r3, [pc, #444]	; (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002904:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002906:	4b6d      	ldr	r3, [pc, #436]	; (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d063      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002912:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	099b      	lsrs	r3, r3, #6
 8002918:	2200      	movs	r2, #0
 800291a:	63bb      	str	r3, [r7, #56]	; 0x38
 800291c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800291e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002924:	633b      	str	r3, [r7, #48]	; 0x30
 8002926:	2300      	movs	r3, #0
 8002928:	637b      	str	r3, [r7, #52]	; 0x34
 800292a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800292e:	4622      	mov	r2, r4
 8002930:	462b      	mov	r3, r5
 8002932:	f04f 0000 	mov.w	r0, #0
 8002936:	f04f 0100 	mov.w	r1, #0
 800293a:	0159      	lsls	r1, r3, #5
 800293c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002940:	0150      	lsls	r0, r2, #5
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4621      	mov	r1, r4
 8002948:	1a51      	subs	r1, r2, r1
 800294a:	6139      	str	r1, [r7, #16]
 800294c:	4629      	mov	r1, r5
 800294e:	eb63 0301 	sbc.w	r3, r3, r1
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002960:	4659      	mov	r1, fp
 8002962:	018b      	lsls	r3, r1, #6
 8002964:	4651      	mov	r1, sl
 8002966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800296a:	4651      	mov	r1, sl
 800296c:	018a      	lsls	r2, r1, #6
 800296e:	4651      	mov	r1, sl
 8002970:	ebb2 0801 	subs.w	r8, r2, r1
 8002974:	4659      	mov	r1, fp
 8002976:	eb63 0901 	sbc.w	r9, r3, r1
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800298a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800298e:	4690      	mov	r8, r2
 8002990:	4699      	mov	r9, r3
 8002992:	4623      	mov	r3, r4
 8002994:	eb18 0303 	adds.w	r3, r8, r3
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	462b      	mov	r3, r5
 800299c:	eb49 0303 	adc.w	r3, r9, r3
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029ae:	4629      	mov	r1, r5
 80029b0:	024b      	lsls	r3, r1, #9
 80029b2:	4621      	mov	r1, r4
 80029b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029b8:	4621      	mov	r1, r4
 80029ba:	024a      	lsls	r2, r1, #9
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029c2:	2200      	movs	r2, #0
 80029c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029cc:	f7fd fc08 	bl	80001e0 <__aeabi_uldivmod>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4613      	mov	r3, r2
 80029d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029d8:	e058      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029da:	4b38      	ldr	r3, [pc, #224]	; (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	2200      	movs	r2, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	4611      	mov	r1, r2
 80029e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029ea:	623b      	str	r3, [r7, #32]
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
 80029f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029f4:	4642      	mov	r2, r8
 80029f6:	464b      	mov	r3, r9
 80029f8:	f04f 0000 	mov.w	r0, #0
 80029fc:	f04f 0100 	mov.w	r1, #0
 8002a00:	0159      	lsls	r1, r3, #5
 8002a02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a06:	0150      	lsls	r0, r2, #5
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4641      	mov	r1, r8
 8002a0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a12:	4649      	mov	r1, r9
 8002a14:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a2c:	ebb2 040a 	subs.w	r4, r2, sl
 8002a30:	eb63 050b 	sbc.w	r5, r3, fp
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	00eb      	lsls	r3, r5, #3
 8002a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a42:	00e2      	lsls	r2, r4, #3
 8002a44:	4614      	mov	r4, r2
 8002a46:	461d      	mov	r5, r3
 8002a48:	4643      	mov	r3, r8
 8002a4a:	18e3      	adds	r3, r4, r3
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	464b      	mov	r3, r9
 8002a50:	eb45 0303 	adc.w	r3, r5, r3
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a62:	4629      	mov	r1, r5
 8002a64:	028b      	lsls	r3, r1, #10
 8002a66:	4621      	mov	r1, r4
 8002a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	028a      	lsls	r2, r1, #10
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a76:	2200      	movs	r2, #0
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	61fa      	str	r2, [r7, #28]
 8002a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a80:	f7fd fbae 	bl	80001e0 <__aeabi_uldivmod>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4613      	mov	r3, r2
 8002a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	3301      	adds	r3, #1
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aa6:	e002      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002aaa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3750      	adds	r7, #80	; 0x50
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	00f42400 	.word	0x00f42400
 8002ac4:	007a1200 	.word	0x007a1200

08002ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ace:	681b      	ldr	r3, [r3, #0]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000000 	.word	0x20000000

08002ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ae4:	f7ff fff0 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	0a9b      	lsrs	r3, r3, #10
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	4903      	ldr	r1, [pc, #12]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af6:	5ccb      	ldrb	r3, [r1, r3]
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	08006020 	.word	0x08006020

08002b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b0c:	f7ff ffdc 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	0b5b      	lsrs	r3, r3, #13
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4903      	ldr	r1, [pc, #12]	; (8002b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	08006020 	.word	0x08006020

08002b30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	220f      	movs	r2, #15
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_RCC_GetClockConfig+0x5c>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0203 	and.w	r2, r3, #3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b4c:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <HAL_RCC_GetClockConfig+0x5c>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <HAL_RCC_GetClockConfig+0x5c>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <HAL_RCC_GetClockConfig+0x5c>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	08db      	lsrs	r3, r3, #3
 8002b6a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b72:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <HAL_RCC_GetClockConfig+0x60>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0207 	and.w	r2, r3, #7
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	601a      	str	r2, [r3, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40023c00 	.word	0x40023c00

08002b94 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d038      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bbc:	4b68      	ldr	r3, [pc, #416]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bc2:	f7fe faad 	bl	8001120 <HAL_GetTick>
 8002bc6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002bca:	f7fe faa9 	bl	8001120 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e0bd      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bdc:	4b61      	ldr	r3, [pc, #388]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f0      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	019b      	lsls	r3, r3, #6
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	071b      	lsls	r3, r3, #28
 8002bfa:	495a      	ldr	r1, [pc, #360]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c02:	4b57      	ldr	r3, [pc, #348]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c08:	f7fe fa8a 	bl	8001120 <HAL_GetTick>
 8002c0c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c10:	f7fe fa86 	bl	8001120 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e09a      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c22:	4b50      	ldr	r3, [pc, #320]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8083 	beq.w	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	4b48      	ldr	r3, [pc, #288]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	4a47      	ldr	r2, [pc, #284]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4c:	4b45      	ldr	r3, [pc, #276]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002c58:	4b43      	ldr	r3, [pc, #268]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a42      	ldr	r2, [pc, #264]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c62:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c64:	f7fe fa5c 	bl	8001120 <HAL_GetTick>
 8002c68:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c6c:	f7fe fa58 	bl	8001120 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e06c      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c7e:	4b3a      	ldr	r3, [pc, #232]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c8a:	4b36      	ldr	r3, [pc, #216]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c92:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d02f      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d028      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ca8:	4b2e      	ldr	r3, [pc, #184]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cb2:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cb8:	4b2c      	ldr	r3, [pc, #176]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002cbe:	4a29      	ldr	r2, [pc, #164]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cc4:	4b27      	ldr	r3, [pc, #156]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d114      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fa26 	bl	8001120 <HAL_GetTick>
 8002cd4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd6:	e00a      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f7fe fa22 	bl	8001120 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e034      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cee:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0ee      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d06:	d10d      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002d08:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d1c:	4911      	ldr	r1, [pc, #68]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
 8002d22:	e005      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	4a0e      	ldr	r2, [pc, #56]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d2e:	6093      	str	r3, [r2, #8]
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3c:	4909      	ldr	r1, [pc, #36]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	7d1a      	ldrb	r2, [r3, #20]
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002d54:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	42470068 	.word	0x42470068
 8002d64:	40023800 	.word	0x40023800
 8002d68:	40007000 	.word	0x40007000
 8002d6c:	42470e40 	.word	0x42470e40
 8002d70:	424711e0 	.word	0x424711e0

08002d74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d141      	bne.n	8002e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002d92:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d006      	beq.n	8002db0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002da8:	d131      	bne.n	8002e0e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002daa:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002dac:	617b      	str	r3, [r7, #20]
          break;
 8002dae:	e031      	b.n	8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002db0:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dbc:	d109      	bne.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dc8:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	e008      	b.n	8002de4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ddc:	4a15      	ldr	r2, [pc, #84]	; (8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002de4:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dea:	099b      	lsrs	r3, r3, #6
 8002dec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	fb02 f303 	mul.w	r3, r2, r3
 8002df6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dfe:	0f1b      	lsrs	r3, r3, #28
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0a:	617b      	str	r3, [r7, #20]
          break;
 8002e0c:	e002      	b.n	8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
          break;
 8002e12:	bf00      	nop
        }
      }
      break;
 8002e14:	e000      	b.n	8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 8002e16:	bf00      	nop
    }
  }
  return frequency;
 8002e18:	697b      	ldr	r3, [r7, #20]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	00bb8000 	.word	0x00bb8000
 8002e30:	007a1200 	.word	0x007a1200
 8002e34:	00f42400 	.word	0x00f42400

08002e38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e07b      	b.n	8002f42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d108      	bne.n	8002e64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e5a:	d009      	beq.n	8002e70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	61da      	str	r2, [r3, #28]
 8002e62:	e005      	b.n	8002e70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fd fffc 	bl	8000e88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ea6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef4:	ea42 0103 	orr.w	r1, r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	0c1b      	lsrs	r3, r3, #16
 8002f0e:	f003 0104 	and.w	r1, r3, #4
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	f003 0210 	and.w	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e041      	b.n	8002fe0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f839 	bl	8002fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	4619      	mov	r1, r3
 8002f88:	4610      	mov	r0, r2
 8002f8a:	f000 f9b1 	bl	80032f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b01      	cmp	r3, #1
 800300e:	d001      	beq.n	8003014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e044      	b.n	800309e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1e      	ldr	r2, [pc, #120]	; (80030ac <HAL_TIM_Base_Start_IT+0xb0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d018      	beq.n	8003068 <HAL_TIM_Base_Start_IT+0x6c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303e:	d013      	beq.n	8003068 <HAL_TIM_Base_Start_IT+0x6c>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1a      	ldr	r2, [pc, #104]	; (80030b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00e      	beq.n	8003068 <HAL_TIM_Base_Start_IT+0x6c>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a19      	ldr	r2, [pc, #100]	; (80030b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d009      	beq.n	8003068 <HAL_TIM_Base_Start_IT+0x6c>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a17      	ldr	r2, [pc, #92]	; (80030b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d004      	beq.n	8003068 <HAL_TIM_Base_Start_IT+0x6c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a16      	ldr	r2, [pc, #88]	; (80030bc <HAL_TIM_Base_Start_IT+0xc0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d111      	bne.n	800308c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b06      	cmp	r3, #6
 8003078:	d010      	beq.n	800309c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308a:	e007      	b.n	800309c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40010000 	.word	0x40010000
 80030b0:	40000400 	.word	0x40000400
 80030b4:	40000800 	.word	0x40000800
 80030b8:	40000c00 	.word	0x40000c00
 80030bc:	40014000 	.word	0x40014000

080030c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d020      	beq.n	8003124 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01b      	beq.n	8003124 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0202 	mvn.w	r2, #2
 80030f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f8d2 	bl	80032b4 <HAL_TIM_IC_CaptureCallback>
 8003110:	e005      	b.n	800311e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f8c4 	bl	80032a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f8d5 	bl	80032c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b00      	cmp	r3, #0
 800312c:	d020      	beq.n	8003170 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01b      	beq.n	8003170 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0204 	mvn.w	r2, #4
 8003140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2202      	movs	r2, #2
 8003146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f8ac 	bl	80032b4 <HAL_TIM_IC_CaptureCallback>
 800315c:	e005      	b.n	800316a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f89e 	bl	80032a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f8af 	bl	80032c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d020      	beq.n	80031bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01b      	beq.n	80031bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0208 	mvn.w	r2, #8
 800318c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2204      	movs	r2, #4
 8003192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f886 	bl	80032b4 <HAL_TIM_IC_CaptureCallback>
 80031a8:	e005      	b.n	80031b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f878 	bl	80032a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f889 	bl	80032c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d020      	beq.n	8003208 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 0310 	and.w	r3, r3, #16
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01b      	beq.n	8003208 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0210 	mvn.w	r2, #16
 80031d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2208      	movs	r2, #8
 80031de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f860 	bl	80032b4 <HAL_TIM_IC_CaptureCallback>
 80031f4:	e005      	b.n	8003202 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f852 	bl	80032a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f863 	bl	80032c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00c      	beq.n	800322c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0201 	mvn.w	r2, #1
 8003224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fd fcd4 	bl	8000bd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00c      	beq.n	8003250 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323c:	2b00      	cmp	r3, #0
 800323e:	d007      	beq.n	8003250 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f8e6 	bl	800341c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00c      	beq.n	8003274 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d007      	beq.n	8003274 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800326c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f834 	bl	80032dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00c      	beq.n	8003298 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d007      	beq.n	8003298 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0220 	mvn.w	r2, #32
 8003290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f8b8 	bl	8003408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003298:	bf00      	nop
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a3a      	ldr	r2, [pc, #232]	; (80033ec <TIM_Base_SetConfig+0xfc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d00f      	beq.n	8003328 <TIM_Base_SetConfig+0x38>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330e:	d00b      	beq.n	8003328 <TIM_Base_SetConfig+0x38>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a37      	ldr	r2, [pc, #220]	; (80033f0 <TIM_Base_SetConfig+0x100>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d007      	beq.n	8003328 <TIM_Base_SetConfig+0x38>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a36      	ldr	r2, [pc, #216]	; (80033f4 <TIM_Base_SetConfig+0x104>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d003      	beq.n	8003328 <TIM_Base_SetConfig+0x38>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a35      	ldr	r2, [pc, #212]	; (80033f8 <TIM_Base_SetConfig+0x108>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d108      	bne.n	800333a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a2b      	ldr	r2, [pc, #172]	; (80033ec <TIM_Base_SetConfig+0xfc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01b      	beq.n	800337a <TIM_Base_SetConfig+0x8a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003348:	d017      	beq.n	800337a <TIM_Base_SetConfig+0x8a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a28      	ldr	r2, [pc, #160]	; (80033f0 <TIM_Base_SetConfig+0x100>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <TIM_Base_SetConfig+0x8a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a27      	ldr	r2, [pc, #156]	; (80033f4 <TIM_Base_SetConfig+0x104>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00f      	beq.n	800337a <TIM_Base_SetConfig+0x8a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a26      	ldr	r2, [pc, #152]	; (80033f8 <TIM_Base_SetConfig+0x108>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00b      	beq.n	800337a <TIM_Base_SetConfig+0x8a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a25      	ldr	r2, [pc, #148]	; (80033fc <TIM_Base_SetConfig+0x10c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d007      	beq.n	800337a <TIM_Base_SetConfig+0x8a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a24      	ldr	r2, [pc, #144]	; (8003400 <TIM_Base_SetConfig+0x110>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d003      	beq.n	800337a <TIM_Base_SetConfig+0x8a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a23      	ldr	r2, [pc, #140]	; (8003404 <TIM_Base_SetConfig+0x114>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d108      	bne.n	800338c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a0e      	ldr	r2, [pc, #56]	; (80033ec <TIM_Base_SetConfig+0xfc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d103      	bne.n	80033c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d105      	bne.n	80033de <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f023 0201 	bic.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	611a      	str	r2, [r3, #16]
  }
}
 80033de:	bf00      	nop
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40010000 	.word	0x40010000
 80033f0:	40000400 	.word	0x40000400
 80033f4:	40000800 	.word	0x40000800
 80033f8:	40000c00 	.word	0x40000c00
 80033fc:	40014000 	.word	0x40014000
 8003400:	40014400 	.word	0x40014400
 8003404:	40014800 	.word	0x40014800

08003408 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800343a:	2300      	movs	r3, #0
 800343c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800343e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003442:	2b84      	cmp	r3, #132	; 0x84
 8003444:	d005      	beq.n	8003452 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003446:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4413      	add	r3, r2
 800344e:	3303      	adds	r3, #3
 8003450:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003452:	68fb      	ldr	r3, [r7, #12]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003466:	f3ef 8305 	mrs	r3, IPSR
 800346a:	607b      	str	r3, [r7, #4]
  return(result);
 800346c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800346e:	2b00      	cmp	r3, #0
 8003470:	bf14      	ite	ne
 8003472:	2301      	movne	r3, #1
 8003474:	2300      	moveq	r3, #0
 8003476:	b2db      	uxtb	r3, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003488:	f001 fa1c 	bl	80048c4 <vTaskStartScheduler>
  
  return osOK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	bd80      	pop	{r7, pc}

08003492 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003492:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003494:	b089      	sub	sp, #36	; 0x24
 8003496:	af04      	add	r7, sp, #16
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d020      	beq.n	80034e6 <osThreadCreate+0x54>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01c      	beq.n	80034e6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685c      	ldr	r4, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691e      	ldr	r6, [r3, #16]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff ffb6 	bl	8003430 <makeFreeRtosPriority>
 80034c4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034ce:	9202      	str	r2, [sp, #8]
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	9100      	str	r1, [sp, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	4632      	mov	r2, r6
 80034d8:	4629      	mov	r1, r5
 80034da:	4620      	mov	r0, r4
 80034dc:	f000 ff82 	bl	80043e4 <xTaskCreateStatic>
 80034e0:	4603      	mov	r3, r0
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	e01c      	b.n	8003520 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685c      	ldr	r4, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034f2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff ff98 	bl	8003430 <makeFreeRtosPriority>
 8003500:	4602      	mov	r2, r0
 8003502:	f107 030c 	add.w	r3, r7, #12
 8003506:	9301      	str	r3, [sp, #4]
 8003508:	9200      	str	r2, [sp, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	4632      	mov	r2, r6
 800350e:	4629      	mov	r1, r5
 8003510:	4620      	mov	r0, r4
 8003512:	f000 ffc4 	bl	800449e <xTaskCreate>
 8003516:	4603      	mov	r3, r0
 8003518:	2b01      	cmp	r3, #1
 800351a:	d001      	beq.n	8003520 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800351c:	2300      	movs	r3, #0
 800351e:	e000      	b.n	8003522 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003520:	68fb      	ldr	r3, [r7, #12]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800352a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <osDelay+0x16>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	e000      	b.n	8003542 <osDelay+0x18>
 8003540:	2301      	movs	r3, #1
 8003542:	4618      	mov	r0, r3
 8003544:	f001 f8f8 	bl	8004738 <vTaskDelay>
  
  return osOK;
 8003548:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d007      	beq.n	8003572 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4619      	mov	r1, r3
 8003568:	2001      	movs	r0, #1
 800356a:	f000 fae0 	bl	8003b2e <xQueueCreateMutexStatic>
 800356e:	4603      	mov	r3, r0
 8003570:	e003      	b.n	800357a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003572:	2001      	movs	r0, #1
 8003574:	f000 fac3 	bl	8003afe <xQueueCreateMutex>
 8003578:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800358e:	2300      	movs	r3, #0
 8003590:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <osMutexWait+0x18>
    return osErrorParameter;
 8003598:	2380      	movs	r3, #128	; 0x80
 800359a:	e03a      	b.n	8003612 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d103      	bne.n	80035b0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	e009      	b.n	80035c4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d006      	beq.n	80035c4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <osMutexWait+0x40>
      ticks = 1;
 80035c0:	2301      	movs	r3, #1
 80035c2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80035c4:	f7ff ff4c 	bl	8003460 <inHandlerMode>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d017      	beq.n	80035fe <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80035ce:	f107 0308 	add.w	r3, r7, #8
 80035d2:	461a      	mov	r2, r3
 80035d4:	2100      	movs	r1, #0
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fd5c 	bl	8004094 <xQueueReceiveFromISR>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d001      	beq.n	80035e6 <osMutexWait+0x62>
      return osErrorOS;
 80035e2:	23ff      	movs	r3, #255	; 0xff
 80035e4:	e015      	b.n	8003612 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d011      	beq.n	8003610 <osMutexWait+0x8c>
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <osMutexWait+0x98>)
 80035ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	e008      	b.n	8003610 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80035fe:	68f9      	ldr	r1, [r7, #12]
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fc3b 	bl	8003e7c <xQueueSemaphoreTake>
 8003606:	4603      	mov	r3, r0
 8003608:	2b01      	cmp	r3, #1
 800360a:	d001      	beq.n	8003610 <osMutexWait+0x8c>
    return osErrorOS;
 800360c:	23ff      	movs	r3, #255	; 0xff
 800360e:	e000      	b.n	8003612 <osMutexWait+0x8e>
  }
  
  return osOK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	e000ed04 	.word	0xe000ed04

08003620 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800362c:	2300      	movs	r3, #0
 800362e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003630:	f7ff ff16 	bl	8003460 <inHandlerMode>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d016      	beq.n	8003668 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800363a:	f107 0308 	add.w	r3, r7, #8
 800363e:	4619      	mov	r1, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fb8d 	bl	8003d60 <xQueueGiveFromISR>
 8003646:	4603      	mov	r3, r0
 8003648:	2b01      	cmp	r3, #1
 800364a:	d001      	beq.n	8003650 <osMutexRelease+0x30>
      return osErrorOS;
 800364c:	23ff      	movs	r3, #255	; 0xff
 800364e:	e017      	b.n	8003680 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d013      	beq.n	800367e <osMutexRelease+0x5e>
 8003656:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <osMutexRelease+0x68>)
 8003658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	e00a      	b.n	800367e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003668:	2300      	movs	r3, #0
 800366a:	2200      	movs	r2, #0
 800366c:	2100      	movs	r1, #0
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fa78 	bl	8003b64 <xQueueGenericSend>
 8003674:	4603      	mov	r3, r0
 8003676:	2b01      	cmp	r3, #1
 8003678:	d001      	beq.n	800367e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800367a:	23ff      	movs	r3, #255	; 0xff
 800367c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800367e:	68fb      	ldr	r3, [r7, #12]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	e000ed04 	.word	0xe000ed04

0800368c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af02      	add	r7, sp, #8
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00f      	beq.n	80036be <osSemaphoreCreate+0x32>
    if (count == 1) {
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d10a      	bne.n	80036ba <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2203      	movs	r2, #3
 80036aa:	9200      	str	r2, [sp, #0]
 80036ac:	2200      	movs	r2, #0
 80036ae:	2100      	movs	r1, #0
 80036b0:	2001      	movs	r0, #1
 80036b2:	f000 f939 	bl	8003928 <xQueueGenericCreateStatic>
 80036b6:	4603      	mov	r3, r0
 80036b8:	e016      	b.n	80036e8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	e014      	b.n	80036e8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d110      	bne.n	80036e6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80036c4:	2203      	movs	r2, #3
 80036c6:	2100      	movs	r1, #0
 80036c8:	2001      	movs	r0, #1
 80036ca:	f000 f9a5 	bl	8003a18 <xQueueGenericCreate>
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <osSemaphoreCreate+0x56>
 80036d6:	2300      	movs	r3, #0
 80036d8:	2200      	movs	r2, #0
 80036da:	2100      	movs	r1, #0
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 fa41 	bl	8003b64 <xQueueGenericSend>
      return sema;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	e000      	b.n	80036e8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80036e6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f103 0208 	add.w	r2, r3, #8
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f04f 32ff 	mov.w	r2, #4294967295
 8003708:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f103 0208 	add.w	r2, r3, #8
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f103 0208 	add.w	r2, r3, #8
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800374a:	b480      	push	{r7}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	601a      	str	r2, [r3, #0]
}
 8003786:	bf00      	nop
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003792:	b480      	push	{r7}
 8003794:	b085      	sub	sp, #20
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d103      	bne.n	80037b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	e00c      	b.n	80037cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3308      	adds	r3, #8
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	e002      	b.n	80037c0 <vListInsert+0x2e>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d2f6      	bcs.n	80037ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	601a      	str	r2, [r3, #0]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6892      	ldr	r2, [r2, #8]
 800381a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6852      	ldr	r2, [r2, #4]
 8003824:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	429a      	cmp	r2, r3
 800382e:	d103      	bne.n	8003838 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	1e5a      	subs	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10a      	bne.n	8003882 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800387e:	bf00      	nop
 8003880:	e7fe      	b.n	8003880 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003882:	f001 ff7f 	bl	8005784 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388e:	68f9      	ldr	r1, [r7, #12]
 8003890:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003892:	fb01 f303 	mul.w	r3, r1, r3
 8003896:	441a      	add	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b2:	3b01      	subs	r3, #1
 80038b4:	68f9      	ldr	r1, [r7, #12]
 80038b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038b8:	fb01 f303 	mul.w	r3, r1, r3
 80038bc:	441a      	add	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	22ff      	movs	r2, #255	; 0xff
 80038c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	22ff      	movs	r2, #255	; 0xff
 80038ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d114      	bne.n	8003902 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01a      	beq.n	8003916 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3310      	adds	r3, #16
 80038e4:	4618      	mov	r0, r3
 80038e6:	f001 fa3f 	bl	8004d68 <xTaskRemoveFromEventList>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d012      	beq.n	8003916 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038f0:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <xQueueGenericReset+0xcc>)
 80038f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	e009      	b.n	8003916 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	3310      	adds	r3, #16
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff fef2 	bl	80036f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	3324      	adds	r3, #36	; 0x24
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff feed 	bl	80036f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003916:	f001 ff65 	bl	80057e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800391a:	2301      	movs	r3, #1
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	e000ed04 	.word	0xe000ed04

08003928 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08e      	sub	sp, #56	; 0x38
 800392c:	af02      	add	r7, sp, #8
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800394e:	bf00      	nop
 8003950:	e7fe      	b.n	8003950 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
}
 800396a:	bf00      	nop
 800396c:	e7fe      	b.n	800396c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <xQueueGenericCreateStatic+0x52>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <xQueueGenericCreateStatic+0x56>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <xQueueGenericCreateStatic+0x58>
 800397e:	2300      	movs	r3, #0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10a      	bne.n	800399a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	623b      	str	r3, [r7, #32]
}
 8003996:	bf00      	nop
 8003998:	e7fe      	b.n	8003998 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d102      	bne.n	80039a6 <xQueueGenericCreateStatic+0x7e>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <xQueueGenericCreateStatic+0x82>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <xQueueGenericCreateStatic+0x84>
 80039aa:	2300      	movs	r3, #0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	61fb      	str	r3, [r7, #28]
}
 80039c2:	bf00      	nop
 80039c4:	e7fe      	b.n	80039c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80039c6:	2348      	movs	r3, #72	; 0x48
 80039c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b48      	cmp	r3, #72	; 0x48
 80039ce:	d00a      	beq.n	80039e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	61bb      	str	r3, [r7, #24]
}
 80039e2:	bf00      	nop
 80039e4:	e7fe      	b.n	80039e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80039e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80039ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00d      	beq.n	8003a0e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80039fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	4613      	mov	r3, r2
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f83f 	bl	8003a8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3730      	adds	r7, #48	; 0x30
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	; 0x28
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	4613      	mov	r3, r2
 8003a24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	613b      	str	r3, [r7, #16]
}
 8003a3e:	bf00      	nop
 8003a40:	e7fe      	b.n	8003a40 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	fb02 f303 	mul.w	r3, r2, r3
 8003a4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	3348      	adds	r3, #72	; 0x48
 8003a50:	4618      	mov	r0, r3
 8003a52:	f001 ffb9 	bl	80059c8 <pvPortMalloc>
 8003a56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d011      	beq.n	8003a82 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	3348      	adds	r3, #72	; 0x48
 8003a66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a70:	79fa      	ldrb	r2, [r7, #7]
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	4613      	mov	r3, r2
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f805 	bl	8003a8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a82:	69bb      	ldr	r3, [r7, #24]
	}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d103      	bne.n	8003aa8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	e002      	b.n	8003aae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003aba:	2101      	movs	r1, #1
 8003abc:	69b8      	ldr	r0, [r7, #24]
 8003abe:	f7ff fecb 	bl	8003858 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ac2:	bf00      	nop
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00e      	beq.n	8003af6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003aea:	2300      	movs	r3, #0
 8003aec:	2200      	movs	r2, #0
 8003aee:	2100      	movs	r1, #0
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f837 	bl	8003b64 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b086      	sub	sp, #24
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	4603      	mov	r3, r0
 8003b06:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	461a      	mov	r2, r3
 8003b14:	6939      	ldr	r1, [r7, #16]
 8003b16:	6978      	ldr	r0, [r7, #20]
 8003b18:	f7ff ff7e 	bl	8003a18 <xQueueGenericCreate>
 8003b1c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f7ff ffd3 	bl	8003aca <prvInitialiseMutex>

		return xNewQueue;
 8003b24:	68fb      	ldr	r3, [r7, #12]
	}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b088      	sub	sp, #32
 8003b32:	af02      	add	r7, sp, #8
 8003b34:	4603      	mov	r3, r0
 8003b36:	6039      	str	r1, [r7, #0]
 8003b38:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	6939      	ldr	r1, [r7, #16]
 8003b4c:	6978      	ldr	r0, [r7, #20]
 8003b4e:	f7ff feeb 	bl	8003928 <xQueueGenericCreateStatic>
 8003b52:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f7ff ffb8 	bl	8003aca <prvInitialiseMutex>

		return xNewQueue;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
	}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08e      	sub	sp, #56	; 0x38
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b72:	2300      	movs	r3, #0
 8003b74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10a      	bne.n	8003b96 <xQueueGenericSend+0x32>
	__asm volatile
 8003b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b92:	bf00      	nop
 8003b94:	e7fe      	b.n	8003b94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d103      	bne.n	8003ba4 <xQueueGenericSend+0x40>
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <xQueueGenericSend+0x44>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <xQueueGenericSend+0x46>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10a      	bne.n	8003bc4 <xQueueGenericSend+0x60>
	__asm volatile
 8003bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb2:	f383 8811 	msr	BASEPRI, r3
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003bc0:	bf00      	nop
 8003bc2:	e7fe      	b.n	8003bc2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d103      	bne.n	8003bd2 <xQueueGenericSend+0x6e>
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <xQueueGenericSend+0x72>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <xQueueGenericSend+0x74>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10a      	bne.n	8003bf2 <xQueueGenericSend+0x8e>
	__asm volatile
 8003bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	623b      	str	r3, [r7, #32]
}
 8003bee:	bf00      	nop
 8003bf0:	e7fe      	b.n	8003bf0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bf2:	f001 fa79 	bl	80050e8 <xTaskGetSchedulerState>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d102      	bne.n	8003c02 <xQueueGenericSend+0x9e>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <xQueueGenericSend+0xa2>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <xQueueGenericSend+0xa4>
 8003c06:	2300      	movs	r3, #0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <xQueueGenericSend+0xbe>
	__asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	61fb      	str	r3, [r7, #28]
}
 8003c1e:	bf00      	nop
 8003c20:	e7fe      	b.n	8003c20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c22:	f001 fdaf 	bl	8005784 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d302      	bcc.n	8003c38 <xQueueGenericSend+0xd4>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d129      	bne.n	8003c8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	68b9      	ldr	r1, [r7, #8]
 8003c3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c3e:	f000 fac1 	bl	80041c4 <prvCopyDataToQueue>
 8003c42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d010      	beq.n	8003c6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	3324      	adds	r3, #36	; 0x24
 8003c50:	4618      	mov	r0, r3
 8003c52:	f001 f889 	bl	8004d68 <xTaskRemoveFromEventList>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d013      	beq.n	8003c84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c5c:	4b3f      	ldr	r3, [pc, #252]	; (8003d5c <xQueueGenericSend+0x1f8>)
 8003c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	e00a      	b.n	8003c84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d007      	beq.n	8003c84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c74:	4b39      	ldr	r3, [pc, #228]	; (8003d5c <xQueueGenericSend+0x1f8>)
 8003c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c84:	f001 fdae 	bl	80057e4 <vPortExitCritical>
				return pdPASS;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e063      	b.n	8003d54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d103      	bne.n	8003c9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c92:	f001 fda7 	bl	80057e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e05c      	b.n	8003d54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d106      	bne.n	8003cae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ca0:	f107 0314 	add.w	r3, r7, #20
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f001 f8c1 	bl	8004e2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003caa:	2301      	movs	r3, #1
 8003cac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cae:	f001 fd99 	bl	80057e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cb2:	f000 fe71 	bl	8004998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cb6:	f001 fd65 	bl	8005784 <vPortEnterCritical>
 8003cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cc0:	b25b      	sxtb	r3, r3
 8003cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc6:	d103      	bne.n	8003cd0 <xQueueGenericSend+0x16c>
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cd6:	b25b      	sxtb	r3, r3
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cdc:	d103      	bne.n	8003ce6 <xQueueGenericSend+0x182>
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ce6:	f001 fd7d 	bl	80057e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cea:	1d3a      	adds	r2, r7, #4
 8003cec:	f107 0314 	add.w	r3, r7, #20
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f001 f8b0 	bl	8004e58 <xTaskCheckForTimeOut>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d124      	bne.n	8003d48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003cfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d00:	f000 fb58 	bl	80043b4 <prvIsQueueFull>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d018      	beq.n	8003d3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	3310      	adds	r3, #16
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	4611      	mov	r1, r2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f001 f804 	bl	8004d20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d1a:	f000 fae3 	bl	80042e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d1e:	f000 fe49 	bl	80049b4 <xTaskResumeAll>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f47f af7c 	bne.w	8003c22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <xQueueGenericSend+0x1f8>)
 8003d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	e772      	b.n	8003c22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d3e:	f000 fad1 	bl	80042e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d42:	f000 fe37 	bl	80049b4 <xTaskResumeAll>
 8003d46:	e76c      	b.n	8003c22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d4a:	f000 facb 	bl	80042e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d4e:	f000 fe31 	bl	80049b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3738      	adds	r7, #56	; 0x38
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	e000ed04 	.word	0xe000ed04

08003d60 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08e      	sub	sp, #56	; 0x38
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	623b      	str	r3, [r7, #32]
}
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	61fb      	str	r3, [r7, #28]
}
 8003da4:	bf00      	nop
 8003da6:	e7fe      	b.n	8003da6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d103      	bne.n	8003db8 <xQueueGiveFromISR+0x58>
 8003db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <xQueueGiveFromISR+0x5c>
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <xQueueGiveFromISR+0x5e>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	61bb      	str	r3, [r7, #24]
}
 8003dd4:	bf00      	nop
 8003dd6:	e7fe      	b.n	8003dd6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003dd8:	f001 fdb6 	bl	8005948 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ddc:	f3ef 8211 	mrs	r2, BASEPRI
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	617a      	str	r2, [r7, #20]
 8003df2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003df4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003df6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d22b      	bcs.n	8003e60 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d112      	bne.n	8003e4a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d016      	beq.n	8003e5a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2e:	3324      	adds	r3, #36	; 0x24
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 ff99 	bl	8004d68 <xTaskRemoveFromEventList>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00e      	beq.n	8003e5a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00b      	beq.n	8003e5a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2201      	movs	r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e007      	b.n	8003e5a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e4e:	3301      	adds	r3, #1
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	b25a      	sxtb	r2, r3
 8003e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e5e:	e001      	b.n	8003e64 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	637b      	str	r3, [r7, #52]	; 0x34
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e66:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3738      	adds	r7, #56	; 0x38
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08e      	sub	sp, #56	; 0x38
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10a      	bne.n	8003eae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	623b      	str	r3, [r7, #32]
}
 8003eaa:	bf00      	nop
 8003eac:	e7fe      	b.n	8003eac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	61fb      	str	r3, [r7, #28]
}
 8003ec8:	bf00      	nop
 8003eca:	e7fe      	b.n	8003eca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ecc:	f001 f90c 	bl	80050e8 <xTaskGetSchedulerState>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d102      	bne.n	8003edc <xQueueSemaphoreTake+0x60>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <xQueueSemaphoreTake+0x64>
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <xQueueSemaphoreTake+0x66>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10a      	bne.n	8003efc <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	61bb      	str	r3, [r7, #24]
}
 8003ef8:	bf00      	nop
 8003efa:	e7fe      	b.n	8003efa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003efc:	f001 fc42 	bl	8005784 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d024      	beq.n	8003f56 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	1e5a      	subs	r2, r3, #1
 8003f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f12:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d104      	bne.n	8003f26 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003f1c:	f001 fa8c 	bl	8005438 <pvTaskIncrementMutexHeldCount>
 8003f20:	4602      	mov	r2, r0
 8003f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f24:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00f      	beq.n	8003f4e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f30:	3310      	adds	r3, #16
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 ff18 	bl	8004d68 <xTaskRemoveFromEventList>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d007      	beq.n	8003f4e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f3e:	4b54      	ldr	r3, [pc, #336]	; (8004090 <xQueueSemaphoreTake+0x214>)
 8003f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f4e:	f001 fc49 	bl	80057e4 <vPortExitCritical>
				return pdPASS;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e097      	b.n	8004086 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d111      	bne.n	8003f80 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	617b      	str	r3, [r7, #20]
}
 8003f74:	bf00      	nop
 8003f76:	e7fe      	b.n	8003f76 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003f78:	f001 fc34 	bl	80057e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e082      	b.n	8004086 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f86:	f107 030c 	add.w	r3, r7, #12
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 ff4e 	bl	8004e2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f90:	2301      	movs	r3, #1
 8003f92:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f94:	f001 fc26 	bl	80057e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f98:	f000 fcfe 	bl	8004998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f9c:	f001 fbf2 	bl	8005784 <vPortEnterCritical>
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fa6:	b25b      	sxtb	r3, r3
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fac:	d103      	bne.n	8003fb6 <xQueueSemaphoreTake+0x13a>
 8003fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fbc:	b25b      	sxtb	r3, r3
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d103      	bne.n	8003fcc <xQueueSemaphoreTake+0x150>
 8003fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fcc:	f001 fc0a 	bl	80057e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fd0:	463a      	mov	r2, r7
 8003fd2:	f107 030c 	add.w	r3, r7, #12
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 ff3d 	bl	8004e58 <xTaskCheckForTimeOut>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d132      	bne.n	800404a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fe4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fe6:	f000 f9cf 	bl	8004388 <prvIsQueueEmpty>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d026      	beq.n	800403e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d109      	bne.n	800400c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003ff8:	f001 fbc4 	bl	8005784 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	4618      	mov	r0, r3
 8004002:	f001 f88f 	bl	8005124 <xTaskPriorityInherit>
 8004006:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004008:	f001 fbec 	bl	80057e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800400c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400e:	3324      	adds	r3, #36	; 0x24
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	4611      	mov	r1, r2
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fe83 	bl	8004d20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800401a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800401c:	f000 f962 	bl	80042e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004020:	f000 fcc8 	bl	80049b4 <xTaskResumeAll>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	f47f af68 	bne.w	8003efc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800402c:	4b18      	ldr	r3, [pc, #96]	; (8004090 <xQueueSemaphoreTake+0x214>)
 800402e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	e75e      	b.n	8003efc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800403e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004040:	f000 f950 	bl	80042e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004044:	f000 fcb6 	bl	80049b4 <xTaskResumeAll>
 8004048:	e758      	b.n	8003efc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800404a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800404c:	f000 f94a 	bl	80042e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004050:	f000 fcb0 	bl	80049b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004054:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004056:	f000 f997 	bl	8004388 <prvIsQueueEmpty>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	f43f af4d 	beq.w	8003efc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00d      	beq.n	8004084 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004068:	f001 fb8c 	bl	8005784 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800406c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800406e:	f000 f891 	bl	8004194 <prvGetDisinheritPriorityAfterTimeout>
 8004072:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800407a:	4618      	mov	r0, r3
 800407c:	f001 f94e 	bl	800531c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004080:	f001 fbb0 	bl	80057e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004084:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004086:	4618      	mov	r0, r3
 8004088:	3738      	adds	r7, #56	; 0x38
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	e000ed04 	.word	0xe000ed04

08004094 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08e      	sub	sp, #56	; 0x38
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10a      	bne.n	80040c0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	623b      	str	r3, [r7, #32]
}
 80040bc:	bf00      	nop
 80040be:	e7fe      	b.n	80040be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d103      	bne.n	80040ce <xQueueReceiveFromISR+0x3a>
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <xQueueReceiveFromISR+0x3e>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <xQueueReceiveFromISR+0x40>
 80040d2:	2300      	movs	r3, #0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	61fb      	str	r3, [r7, #28]
}
 80040ea:	bf00      	nop
 80040ec:	e7fe      	b.n	80040ec <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040ee:	f001 fc2b 	bl	8005948 <vPortValidateInterruptPriority>
	__asm volatile
 80040f2:	f3ef 8211 	mrs	r2, BASEPRI
 80040f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fa:	f383 8811 	msr	BASEPRI, r3
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	61ba      	str	r2, [r7, #24]
 8004108:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800410a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800410c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	2b00      	cmp	r3, #0
 8004118:	d02f      	beq.n	800417a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004124:	68b9      	ldr	r1, [r7, #8]
 8004126:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004128:	f000 f8b6 	bl	8004298 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	1e5a      	subs	r2, r3, #1
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004134:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413c:	d112      	bne.n	8004164 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d016      	beq.n	8004174 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	3310      	adds	r3, #16
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fe0c 	bl	8004d68 <xTaskRemoveFromEventList>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00e      	beq.n	8004174 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00b      	beq.n	8004174 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	e007      	b.n	8004174 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004168:	3301      	adds	r3, #1
 800416a:	b2db      	uxtb	r3, r3
 800416c:	b25a      	sxtb	r2, r3
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004174:	2301      	movs	r3, #1
 8004176:	637b      	str	r3, [r7, #52]	; 0x34
 8004178:	e001      	b.n	800417e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800417a:	2300      	movs	r3, #0
 800417c:	637b      	str	r3, [r7, #52]	; 0x34
 800417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004180:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f383 8811 	msr	BASEPRI, r3
}
 8004188:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800418a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800418c:	4618      	mov	r0, r3
 800418e:	3738      	adds	r7, #56	; 0x38
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d006      	beq.n	80041b2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f1c3 0307 	rsb	r3, r3, #7
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e001      	b.n	80041b6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80041b6:	68fb      	ldr	r3, [r7, #12]
	}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10d      	bne.n	80041fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d14d      	bne.n	8004286 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f001 f80e 	bl	8005210 <xTaskPriorityDisinherit>
 80041f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	609a      	str	r2, [r3, #8]
 80041fc:	e043      	b.n	8004286 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d119      	bne.n	8004238 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6858      	ldr	r0, [r3, #4]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	461a      	mov	r2, r3
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	f001 fe48 	bl	8005ea4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	441a      	add	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	429a      	cmp	r2, r3
 800422c:	d32b      	bcc.n	8004286 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	e026      	b.n	8004286 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	68d8      	ldr	r0, [r3, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	461a      	mov	r2, r3
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	f001 fe2e 	bl	8005ea4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	425b      	negs	r3, r3
 8004252:	441a      	add	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d207      	bcs.n	8004274 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	425b      	negs	r3, r3
 800426e:	441a      	add	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d105      	bne.n	8004286 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	3b01      	subs	r3, #1
 8004284:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800428e:	697b      	ldr	r3, [r7, #20]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d018      	beq.n	80042dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	441a      	add	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d303      	bcc.n	80042cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68d9      	ldr	r1, [r3, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	461a      	mov	r2, r3
 80042d6:	6838      	ldr	r0, [r7, #0]
 80042d8:	f001 fde4 	bl	8005ea4 <memcpy>
	}
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80042ec:	f001 fa4a 	bl	8005784 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042f8:	e011      	b.n	800431e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d012      	beq.n	8004328 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3324      	adds	r3, #36	; 0x24
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fd2e 	bl	8004d68 <xTaskRemoveFromEventList>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004312:	f000 fe03 	bl	8004f1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	3b01      	subs	r3, #1
 800431a:	b2db      	uxtb	r3, r3
 800431c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800431e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004322:	2b00      	cmp	r3, #0
 8004324:	dce9      	bgt.n	80042fa <prvUnlockQueue+0x16>
 8004326:	e000      	b.n	800432a <prvUnlockQueue+0x46>
					break;
 8004328:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	22ff      	movs	r2, #255	; 0xff
 800432e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004332:	f001 fa57 	bl	80057e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004336:	f001 fa25 	bl	8005784 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004340:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004342:	e011      	b.n	8004368 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d012      	beq.n	8004372 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3310      	adds	r3, #16
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fd09 	bl	8004d68 <xTaskRemoveFromEventList>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800435c:	f000 fdde 	bl	8004f1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004360:	7bbb      	ldrb	r3, [r7, #14]
 8004362:	3b01      	subs	r3, #1
 8004364:	b2db      	uxtb	r3, r3
 8004366:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004368:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800436c:	2b00      	cmp	r3, #0
 800436e:	dce9      	bgt.n	8004344 <prvUnlockQueue+0x60>
 8004370:	e000      	b.n	8004374 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004372:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	22ff      	movs	r2, #255	; 0xff
 8004378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800437c:	f001 fa32 	bl	80057e4 <vPortExitCritical>
}
 8004380:	bf00      	nop
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004390:	f001 f9f8 	bl	8005784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004398:	2b00      	cmp	r3, #0
 800439a:	d102      	bne.n	80043a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800439c:	2301      	movs	r3, #1
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	e001      	b.n	80043a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043a6:	f001 fa1d 	bl	80057e4 <vPortExitCritical>

	return xReturn;
 80043aa:	68fb      	ldr	r3, [r7, #12]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043bc:	f001 f9e2 	bl	8005784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d102      	bne.n	80043d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80043cc:	2301      	movs	r3, #1
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	e001      	b.n	80043d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043d6:	f001 fa05 	bl	80057e4 <vPortExitCritical>

	return xReturn;
 80043da:	68fb      	ldr	r3, [r7, #12]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08e      	sub	sp, #56	; 0x38
 80043e8:	af04      	add	r7, sp, #16
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10a      	bne.n	800440e <xTaskCreateStatic+0x2a>
	__asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	623b      	str	r3, [r7, #32]
}
 800440a:	bf00      	nop
 800440c:	e7fe      	b.n	800440c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800440e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10a      	bne.n	800442a <xTaskCreateStatic+0x46>
	__asm volatile
 8004414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	61fb      	str	r3, [r7, #28]
}
 8004426:	bf00      	nop
 8004428:	e7fe      	b.n	8004428 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800442a:	23a0      	movs	r3, #160	; 0xa0
 800442c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2ba0      	cmp	r3, #160	; 0xa0
 8004432:	d00a      	beq.n	800444a <xTaskCreateStatic+0x66>
	__asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	61bb      	str	r3, [r7, #24]
}
 8004446:	bf00      	nop
 8004448:	e7fe      	b.n	8004448 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800444a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800444c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444e:	2b00      	cmp	r3, #0
 8004450:	d01e      	beq.n	8004490 <xTaskCreateStatic+0xac>
 8004452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01b      	beq.n	8004490 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004460:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	2202      	movs	r2, #2
 8004466:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800446a:	2300      	movs	r3, #0
 800446c:	9303      	str	r3, [sp, #12]
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	9302      	str	r3, [sp, #8]
 8004472:	f107 0314 	add.w	r3, r7, #20
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f850 	bl	8004528 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004488:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800448a:	f000 f8eb 	bl	8004664 <prvAddNewTaskToReadyList>
 800448e:	e001      	b.n	8004494 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004494:	697b      	ldr	r3, [r7, #20]
	}
 8004496:	4618      	mov	r0, r3
 8004498:	3728      	adds	r7, #40	; 0x28
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b08c      	sub	sp, #48	; 0x30
 80044a2:	af04      	add	r7, sp, #16
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	603b      	str	r3, [r7, #0]
 80044aa:	4613      	mov	r3, r2
 80044ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f001 fa88 	bl	80059c8 <pvPortMalloc>
 80044b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00e      	beq.n	80044de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80044c0:	20a0      	movs	r0, #160	; 0xa0
 80044c2:	f001 fa81 	bl	80059c8 <pvPortMalloc>
 80044c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
 80044d4:	e005      	b.n	80044e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80044d6:	6978      	ldr	r0, [r7, #20]
 80044d8:	f001 fb42 	bl	8005b60 <vPortFree>
 80044dc:	e001      	b.n	80044e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d017      	beq.n	8004518 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044f0:	88fa      	ldrh	r2, [r7, #6]
 80044f2:	2300      	movs	r3, #0
 80044f4:	9303      	str	r3, [sp, #12]
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	9302      	str	r3, [sp, #8]
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fc:	9301      	str	r3, [sp, #4]
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68b9      	ldr	r1, [r7, #8]
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 f80e 	bl	8004528 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800450c:	69f8      	ldr	r0, [r7, #28]
 800450e:	f000 f8a9 	bl	8004664 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004512:	2301      	movs	r3, #1
 8004514:	61bb      	str	r3, [r7, #24]
 8004516:	e002      	b.n	800451e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004518:	f04f 33ff 	mov.w	r3, #4294967295
 800451c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800451e:	69bb      	ldr	r3, [r7, #24]
	}
 8004520:	4618      	mov	r0, r3
 8004522:	3720      	adds	r7, #32
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004540:	3b01      	subs	r3, #1
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	f023 0307 	bic.w	r3, r3, #7
 800454e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <prvInitialiseNewTask+0x48>
	__asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	617b      	str	r3, [r7, #20]
}
 800456c:	bf00      	nop
 800456e:	e7fe      	b.n	800456e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d01f      	beq.n	80045b6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	e012      	b.n	80045a2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	4413      	add	r3, r2
 8004582:	7819      	ldrb	r1, [r3, #0]
 8004584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	4413      	add	r3, r2
 800458a:	3334      	adds	r3, #52	; 0x34
 800458c:	460a      	mov	r2, r1
 800458e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	4413      	add	r3, r2
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d006      	beq.n	80045aa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	3301      	adds	r3, #1
 80045a0:	61fb      	str	r3, [r7, #28]
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	2b0f      	cmp	r3, #15
 80045a6:	d9e9      	bls.n	800457c <prvInitialiseNewTask+0x54>
 80045a8:	e000      	b.n	80045ac <prvInitialiseNewTask+0x84>
			{
				break;
 80045aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045b4:	e003      	b.n	80045be <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c0:	2b06      	cmp	r3, #6
 80045c2:	d901      	bls.n	80045c8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045c4:	2306      	movs	r3, #6
 80045c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	2200      	movs	r2, #0
 80045d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	3304      	adds	r3, #4
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff f8a6 	bl	8003730 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	3318      	adds	r3, #24
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff f8a1 	bl	8003730 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f6:	f1c3 0207 	rsb	r2, r3, #7
 80045fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004602:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	2200      	movs	r2, #0
 8004608:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	2200      	movs	r2, #0
 8004610:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004616:	334c      	adds	r3, #76	; 0x4c
 8004618:	224c      	movs	r2, #76	; 0x4c
 800461a:	2100      	movs	r1, #0
 800461c:	4618      	mov	r0, r3
 800461e:	f001 fbbd 	bl	8005d9c <memset>
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	4a0c      	ldr	r2, [pc, #48]	; (8004658 <prvInitialiseNewTask+0x130>)
 8004626:	651a      	str	r2, [r3, #80]	; 0x50
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	4a0c      	ldr	r2, [pc, #48]	; (800465c <prvInitialiseNewTask+0x134>)
 800462c:	655a      	str	r2, [r3, #84]	; 0x54
 800462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004630:	4a0b      	ldr	r2, [pc, #44]	; (8004660 <prvInitialiseNewTask+0x138>)
 8004632:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	68f9      	ldr	r1, [r7, #12]
 8004638:	69b8      	ldr	r0, [r7, #24]
 800463a:	f000 ff77 	bl	800552c <pxPortInitialiseStack>
 800463e:	4602      	mov	r2, r0
 8004640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004642:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800464a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800464e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004650:	bf00      	nop
 8004652:	3720      	adds	r7, #32
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	2000420c 	.word	0x2000420c
 800465c:	20004274 	.word	0x20004274
 8004660:	200042dc 	.word	0x200042dc

08004664 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800466c:	f001 f88a 	bl	8005784 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004670:	4b2a      	ldr	r3, [pc, #168]	; (800471c <prvAddNewTaskToReadyList+0xb8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3301      	adds	r3, #1
 8004676:	4a29      	ldr	r2, [pc, #164]	; (800471c <prvAddNewTaskToReadyList+0xb8>)
 8004678:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800467a:	4b29      	ldr	r3, [pc, #164]	; (8004720 <prvAddNewTaskToReadyList+0xbc>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d109      	bne.n	8004696 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004682:	4a27      	ldr	r2, [pc, #156]	; (8004720 <prvAddNewTaskToReadyList+0xbc>)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004688:	4b24      	ldr	r3, [pc, #144]	; (800471c <prvAddNewTaskToReadyList+0xb8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d110      	bne.n	80046b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004690:	f000 fc68 	bl	8004f64 <prvInitialiseTaskLists>
 8004694:	e00d      	b.n	80046b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004696:	4b23      	ldr	r3, [pc, #140]	; (8004724 <prvAddNewTaskToReadyList+0xc0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d109      	bne.n	80046b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800469e:	4b20      	ldr	r3, [pc, #128]	; (8004720 <prvAddNewTaskToReadyList+0xbc>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d802      	bhi.n	80046b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80046ac:	4a1c      	ldr	r2, [pc, #112]	; (8004720 <prvAddNewTaskToReadyList+0xbc>)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046b2:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <prvAddNewTaskToReadyList+0xc4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3301      	adds	r3, #1
 80046b8:	4a1b      	ldr	r2, [pc, #108]	; (8004728 <prvAddNewTaskToReadyList+0xc4>)
 80046ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	2201      	movs	r2, #1
 80046c2:	409a      	lsls	r2, r3
 80046c4:	4b19      	ldr	r3, [pc, #100]	; (800472c <prvAddNewTaskToReadyList+0xc8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	4a18      	ldr	r2, [pc, #96]	; (800472c <prvAddNewTaskToReadyList+0xc8>)
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4a15      	ldr	r2, [pc, #84]	; (8004730 <prvAddNewTaskToReadyList+0xcc>)
 80046dc:	441a      	add	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3304      	adds	r3, #4
 80046e2:	4619      	mov	r1, r3
 80046e4:	4610      	mov	r0, r2
 80046e6:	f7ff f830 	bl	800374a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80046ea:	f001 f87b 	bl	80057e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80046ee:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <prvAddNewTaskToReadyList+0xc0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00e      	beq.n	8004714 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046f6:	4b0a      	ldr	r3, [pc, #40]	; (8004720 <prvAddNewTaskToReadyList+0xbc>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	429a      	cmp	r2, r3
 8004702:	d207      	bcs.n	8004714 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <prvAddNewTaskToReadyList+0xd0>)
 8004706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004714:	bf00      	nop
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	200005b8 	.word	0x200005b8
 8004720:	200004b8 	.word	0x200004b8
 8004724:	200005c4 	.word	0x200005c4
 8004728:	200005d4 	.word	0x200005d4
 800472c:	200005c0 	.word	0x200005c0
 8004730:	200004bc 	.word	0x200004bc
 8004734:	e000ed04 	.word	0xe000ed04

08004738 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d017      	beq.n	800477a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800474a:	4b13      	ldr	r3, [pc, #76]	; (8004798 <vTaskDelay+0x60>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <vTaskDelay+0x30>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	60bb      	str	r3, [r7, #8]
}
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004768:	f000 f916 	bl	8004998 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800476c:	2100      	movs	r1, #0
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fe76 	bl	8005460 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004774:	f000 f91e 	bl	80049b4 <xTaskResumeAll>
 8004778:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d107      	bne.n	8004790 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004780:	4b06      	ldr	r3, [pc, #24]	; (800479c <vTaskDelay+0x64>)
 8004782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004790:	bf00      	nop
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	200005e0 	.word	0x200005e0
 800479c:	e000ed04 	.word	0xe000ed04

080047a0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80047a8:	f000 ffec 	bl	8005784 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d102      	bne.n	80047b8 <vTaskSuspend+0x18>
 80047b2:	4b3c      	ldr	r3, [pc, #240]	; (80048a4 <vTaskSuspend+0x104>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	e000      	b.n	80047ba <vTaskSuspend+0x1a>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	3304      	adds	r3, #4
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff f81f 	bl	8003804 <uxListRemove>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d115      	bne.n	80047f8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d0:	4935      	ldr	r1, [pc, #212]	; (80048a8 <vTaskSuspend+0x108>)
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <vTaskSuspend+0x58>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	2201      	movs	r2, #1
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	43da      	mvns	r2, r3
 80047ee:	4b2f      	ldr	r3, [pc, #188]	; (80048ac <vTaskSuspend+0x10c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4013      	ands	r3, r2
 80047f4:	4a2d      	ldr	r2, [pc, #180]	; (80048ac <vTaskSuspend+0x10c>)
 80047f6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d004      	beq.n	800480a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3318      	adds	r3, #24
 8004804:	4618      	mov	r0, r3
 8004806:	f7fe fffd 	bl	8003804 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3304      	adds	r3, #4
 800480e:	4619      	mov	r1, r3
 8004810:	4827      	ldr	r0, [pc, #156]	; (80048b0 <vTaskSuspend+0x110>)
 8004812:	f7fe ff9a 	bl	800374a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b01      	cmp	r3, #1
 8004820:	d103      	bne.n	800482a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800482a:	f000 ffdb 	bl	80057e4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800482e:	4b21      	ldr	r3, [pc, #132]	; (80048b4 <vTaskSuspend+0x114>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8004836:	f000 ffa5 	bl	8005784 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800483a:	f000 fc35 	bl	80050a8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800483e:	f000 ffd1 	bl	80057e4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004842:	4b18      	ldr	r3, [pc, #96]	; (80048a4 <vTaskSuspend+0x104>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	429a      	cmp	r2, r3
 800484a:	d127      	bne.n	800489c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800484c:	4b19      	ldr	r3, [pc, #100]	; (80048b4 <vTaskSuspend+0x114>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d017      	beq.n	8004884 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004854:	4b18      	ldr	r3, [pc, #96]	; (80048b8 <vTaskSuspend+0x118>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <vTaskSuspend+0xd2>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	60bb      	str	r3, [r7, #8]
}
 800486e:	bf00      	nop
 8004870:	e7fe      	b.n	8004870 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8004872:	4b12      	ldr	r3, [pc, #72]	; (80048bc <vTaskSuspend+0x11c>)
 8004874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004882:	e00b      	b.n	800489c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004884:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <vTaskSuspend+0x110>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	4b0d      	ldr	r3, [pc, #52]	; (80048c0 <vTaskSuspend+0x120>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d103      	bne.n	8004898 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8004890:	4b04      	ldr	r3, [pc, #16]	; (80048a4 <vTaskSuspend+0x104>)
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
	}
 8004896:	e001      	b.n	800489c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8004898:	f000 f9e0 	bl	8004c5c <vTaskSwitchContext>
	}
 800489c:	bf00      	nop
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	200004b8 	.word	0x200004b8
 80048a8:	200004bc 	.word	0x200004bc
 80048ac:	200005c0 	.word	0x200005c0
 80048b0:	200005a4 	.word	0x200005a4
 80048b4:	200005c4 	.word	0x200005c4
 80048b8:	200005e0 	.word	0x200005e0
 80048bc:	e000ed04 	.word	0xe000ed04
 80048c0:	200005b8 	.word	0x200005b8

080048c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08a      	sub	sp, #40	; 0x28
 80048c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80048d2:	463a      	mov	r2, r7
 80048d4:	1d39      	adds	r1, r7, #4
 80048d6:	f107 0308 	add.w	r3, r7, #8
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fb fdfe 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80048e0:	6839      	ldr	r1, [r7, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	9202      	str	r2, [sp, #8]
 80048e8:	9301      	str	r3, [sp, #4]
 80048ea:	2300      	movs	r3, #0
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	2300      	movs	r3, #0
 80048f0:	460a      	mov	r2, r1
 80048f2:	4921      	ldr	r1, [pc, #132]	; (8004978 <vTaskStartScheduler+0xb4>)
 80048f4:	4821      	ldr	r0, [pc, #132]	; (800497c <vTaskStartScheduler+0xb8>)
 80048f6:	f7ff fd75 	bl	80043e4 <xTaskCreateStatic>
 80048fa:	4603      	mov	r3, r0
 80048fc:	4a20      	ldr	r2, [pc, #128]	; (8004980 <vTaskStartScheduler+0xbc>)
 80048fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004900:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <vTaskStartScheduler+0xbc>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004908:	2301      	movs	r3, #1
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	e001      	b.n	8004912 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d11b      	bne.n	8004950 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	613b      	str	r3, [r7, #16]
}
 800492a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800492c:	4b15      	ldr	r3, [pc, #84]	; (8004984 <vTaskStartScheduler+0xc0>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	334c      	adds	r3, #76	; 0x4c
 8004932:	4a15      	ldr	r2, [pc, #84]	; (8004988 <vTaskStartScheduler+0xc4>)
 8004934:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004936:	4b15      	ldr	r3, [pc, #84]	; (800498c <vTaskStartScheduler+0xc8>)
 8004938:	f04f 32ff 	mov.w	r2, #4294967295
 800493c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800493e:	4b14      	ldr	r3, [pc, #80]	; (8004990 <vTaskStartScheduler+0xcc>)
 8004940:	2201      	movs	r2, #1
 8004942:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004944:	4b13      	ldr	r3, [pc, #76]	; (8004994 <vTaskStartScheduler+0xd0>)
 8004946:	2200      	movs	r2, #0
 8004948:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800494a:	f000 fe79 	bl	8005640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800494e:	e00e      	b.n	800496e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004956:	d10a      	bne.n	800496e <vTaskStartScheduler+0xaa>
	__asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	60fb      	str	r3, [r7, #12]
}
 800496a:	bf00      	nop
 800496c:	e7fe      	b.n	800496c <vTaskStartScheduler+0xa8>
}
 800496e:	bf00      	nop
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	08006008 	.word	0x08006008
 800497c:	08004f35 	.word	0x08004f35
 8004980:	200005dc 	.word	0x200005dc
 8004984:	200004b8 	.word	0x200004b8
 8004988:	2000005c 	.word	0x2000005c
 800498c:	200005d8 	.word	0x200005d8
 8004990:	200005c4 	.word	0x200005c4
 8004994:	200005bc 	.word	0x200005bc

08004998 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800499c:	4b04      	ldr	r3, [pc, #16]	; (80049b0 <vTaskSuspendAll+0x18>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3301      	adds	r3, #1
 80049a2:	4a03      	ldr	r2, [pc, #12]	; (80049b0 <vTaskSuspendAll+0x18>)
 80049a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80049a6:	bf00      	nop
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	200005e0 	.word	0x200005e0

080049b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80049be:	2300      	movs	r3, #0
 80049c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80049c2:	4b41      	ldr	r3, [pc, #260]	; (8004ac8 <xTaskResumeAll+0x114>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10a      	bne.n	80049e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	603b      	str	r3, [r7, #0]
}
 80049dc:	bf00      	nop
 80049de:	e7fe      	b.n	80049de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80049e0:	f000 fed0 	bl	8005784 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80049e4:	4b38      	ldr	r3, [pc, #224]	; (8004ac8 <xTaskResumeAll+0x114>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	4a37      	ldr	r2, [pc, #220]	; (8004ac8 <xTaskResumeAll+0x114>)
 80049ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ee:	4b36      	ldr	r3, [pc, #216]	; (8004ac8 <xTaskResumeAll+0x114>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d161      	bne.n	8004aba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049f6:	4b35      	ldr	r3, [pc, #212]	; (8004acc <xTaskResumeAll+0x118>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d05d      	beq.n	8004aba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049fe:	e02e      	b.n	8004a5e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a00:	4b33      	ldr	r3, [pc, #204]	; (8004ad0 <xTaskResumeAll+0x11c>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3318      	adds	r3, #24
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fe fef9 	bl	8003804 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	3304      	adds	r3, #4
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fe fef4 	bl	8003804 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	2201      	movs	r2, #1
 8004a22:	409a      	lsls	r2, r3
 8004a24:	4b2b      	ldr	r3, [pc, #172]	; (8004ad4 <xTaskResumeAll+0x120>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	4a2a      	ldr	r2, [pc, #168]	; (8004ad4 <xTaskResumeAll+0x120>)
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4a27      	ldr	r2, [pc, #156]	; (8004ad8 <xTaskResumeAll+0x124>)
 8004a3c:	441a      	add	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3304      	adds	r3, #4
 8004a42:	4619      	mov	r1, r3
 8004a44:	4610      	mov	r0, r2
 8004a46:	f7fe fe80 	bl	800374a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4e:	4b23      	ldr	r3, [pc, #140]	; (8004adc <xTaskResumeAll+0x128>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d302      	bcc.n	8004a5e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004a58:	4b21      	ldr	r3, [pc, #132]	; (8004ae0 <xTaskResumeAll+0x12c>)
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a5e:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <xTaskResumeAll+0x11c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1cc      	bne.n	8004a00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a6c:	f000 fb1c 	bl	80050a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004a70:	4b1c      	ldr	r3, [pc, #112]	; (8004ae4 <xTaskResumeAll+0x130>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d010      	beq.n	8004a9e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a7c:	f000 f836 	bl	8004aec <xTaskIncrementTick>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004a86:	4b16      	ldr	r3, [pc, #88]	; (8004ae0 <xTaskResumeAll+0x12c>)
 8004a88:	2201      	movs	r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1f1      	bne.n	8004a7c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004a98:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <xTaskResumeAll+0x130>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a9e:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <xTaskResumeAll+0x12c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d009      	beq.n	8004aba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004aaa:	4b0f      	ldr	r3, [pc, #60]	; (8004ae8 <xTaskResumeAll+0x134>)
 8004aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004aba:	f000 fe93 	bl	80057e4 <vPortExitCritical>

	return xAlreadyYielded;
 8004abe:	68bb      	ldr	r3, [r7, #8]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	200005e0 	.word	0x200005e0
 8004acc:	200005b8 	.word	0x200005b8
 8004ad0:	20000578 	.word	0x20000578
 8004ad4:	200005c0 	.word	0x200005c0
 8004ad8:	200004bc 	.word	0x200004bc
 8004adc:	200004b8 	.word	0x200004b8
 8004ae0:	200005cc 	.word	0x200005cc
 8004ae4:	200005c8 	.word	0x200005c8
 8004ae8:	e000ed04 	.word	0xe000ed04

08004aec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004af2:	2300      	movs	r3, #0
 8004af4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004af6:	4b4e      	ldr	r3, [pc, #312]	; (8004c30 <xTaskIncrementTick+0x144>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f040 808e 	bne.w	8004c1c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b00:	4b4c      	ldr	r3, [pc, #304]	; (8004c34 <xTaskIncrementTick+0x148>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3301      	adds	r3, #1
 8004b06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b08:	4a4a      	ldr	r2, [pc, #296]	; (8004c34 <xTaskIncrementTick+0x148>)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d120      	bne.n	8004b56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b14:	4b48      	ldr	r3, [pc, #288]	; (8004c38 <xTaskIncrementTick+0x14c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <xTaskIncrementTick+0x48>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	603b      	str	r3, [r7, #0]
}
 8004b30:	bf00      	nop
 8004b32:	e7fe      	b.n	8004b32 <xTaskIncrementTick+0x46>
 8004b34:	4b40      	ldr	r3, [pc, #256]	; (8004c38 <xTaskIncrementTick+0x14c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	4b40      	ldr	r3, [pc, #256]	; (8004c3c <xTaskIncrementTick+0x150>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a3e      	ldr	r2, [pc, #248]	; (8004c38 <xTaskIncrementTick+0x14c>)
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	4a3e      	ldr	r2, [pc, #248]	; (8004c3c <xTaskIncrementTick+0x150>)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	4b3d      	ldr	r3, [pc, #244]	; (8004c40 <xTaskIncrementTick+0x154>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	4a3c      	ldr	r2, [pc, #240]	; (8004c40 <xTaskIncrementTick+0x154>)
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	f000 faa9 	bl	80050a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b56:	4b3b      	ldr	r3, [pc, #236]	; (8004c44 <xTaskIncrementTick+0x158>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d348      	bcc.n	8004bf2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b60:	4b35      	ldr	r3, [pc, #212]	; (8004c38 <xTaskIncrementTick+0x14c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d104      	bne.n	8004b74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b6a:	4b36      	ldr	r3, [pc, #216]	; (8004c44 <xTaskIncrementTick+0x158>)
 8004b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b70:	601a      	str	r2, [r3, #0]
					break;
 8004b72:	e03e      	b.n	8004bf2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b74:	4b30      	ldr	r3, [pc, #192]	; (8004c38 <xTaskIncrementTick+0x14c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d203      	bcs.n	8004b94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b8c:	4a2d      	ldr	r2, [pc, #180]	; (8004c44 <xTaskIncrementTick+0x158>)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b92:	e02e      	b.n	8004bf2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	3304      	adds	r3, #4
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fe fe33 	bl	8003804 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d004      	beq.n	8004bb0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	3318      	adds	r3, #24
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fe fe2a 	bl	8003804 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	409a      	lsls	r2, r3
 8004bb8:	4b23      	ldr	r3, [pc, #140]	; (8004c48 <xTaskIncrementTick+0x15c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	4a22      	ldr	r2, [pc, #136]	; (8004c48 <xTaskIncrementTick+0x15c>)
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4a1f      	ldr	r2, [pc, #124]	; (8004c4c <xTaskIncrementTick+0x160>)
 8004bd0:	441a      	add	r2, r3
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4610      	mov	r0, r2
 8004bda:	f7fe fdb6 	bl	800374a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be2:	4b1b      	ldr	r3, [pc, #108]	; (8004c50 <xTaskIncrementTick+0x164>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d3b9      	bcc.n	8004b60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004bec:	2301      	movs	r3, #1
 8004bee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bf0:	e7b6      	b.n	8004b60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bf2:	4b17      	ldr	r3, [pc, #92]	; (8004c50 <xTaskIncrementTick+0x164>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf8:	4914      	ldr	r1, [pc, #80]	; (8004c4c <xTaskIncrementTick+0x160>)
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	440b      	add	r3, r1
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d901      	bls.n	8004c0e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004c0e:	4b11      	ldr	r3, [pc, #68]	; (8004c54 <xTaskIncrementTick+0x168>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004c16:	2301      	movs	r3, #1
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	e004      	b.n	8004c26 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004c1c:	4b0e      	ldr	r3, [pc, #56]	; (8004c58 <xTaskIncrementTick+0x16c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3301      	adds	r3, #1
 8004c22:	4a0d      	ldr	r2, [pc, #52]	; (8004c58 <xTaskIncrementTick+0x16c>)
 8004c24:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004c26:	697b      	ldr	r3, [r7, #20]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	200005e0 	.word	0x200005e0
 8004c34:	200005bc 	.word	0x200005bc
 8004c38:	20000570 	.word	0x20000570
 8004c3c:	20000574 	.word	0x20000574
 8004c40:	200005d0 	.word	0x200005d0
 8004c44:	200005d8 	.word	0x200005d8
 8004c48:	200005c0 	.word	0x200005c0
 8004c4c:	200004bc 	.word	0x200004bc
 8004c50:	200004b8 	.word	0x200004b8
 8004c54:	200005cc 	.word	0x200005cc
 8004c58:	200005c8 	.word	0x200005c8

08004c5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c62:	4b29      	ldr	r3, [pc, #164]	; (8004d08 <vTaskSwitchContext+0xac>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c6a:	4b28      	ldr	r3, [pc, #160]	; (8004d0c <vTaskSwitchContext+0xb0>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c70:	e044      	b.n	8004cfc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004c72:	4b26      	ldr	r3, [pc, #152]	; (8004d0c <vTaskSwitchContext+0xb0>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c78:	4b25      	ldr	r3, [pc, #148]	; (8004d10 <vTaskSwitchContext+0xb4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	fab3 f383 	clz	r3, r3
 8004c84:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c86:	7afb      	ldrb	r3, [r7, #11]
 8004c88:	f1c3 031f 	rsb	r3, r3, #31
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	4921      	ldr	r1, [pc, #132]	; (8004d14 <vTaskSwitchContext+0xb8>)
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	440b      	add	r3, r1
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10a      	bne.n	8004cb8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	607b      	str	r3, [r7, #4]
}
 8004cb4:	bf00      	nop
 8004cb6:	e7fe      	b.n	8004cb6 <vTaskSwitchContext+0x5a>
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4a14      	ldr	r2, [pc, #80]	; (8004d14 <vTaskSwitchContext+0xb8>)
 8004cc4:	4413      	add	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	605a      	str	r2, [r3, #4]
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	3308      	adds	r3, #8
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d104      	bne.n	8004ce8 <vTaskSwitchContext+0x8c>
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	605a      	str	r2, [r3, #4]
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <vTaskSwitchContext+0xbc>)
 8004cf0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004cf2:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <vTaskSwitchContext+0xbc>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	334c      	adds	r3, #76	; 0x4c
 8004cf8:	4a08      	ldr	r2, [pc, #32]	; (8004d1c <vTaskSwitchContext+0xc0>)
 8004cfa:	6013      	str	r3, [r2, #0]
}
 8004cfc:	bf00      	nop
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	200005e0 	.word	0x200005e0
 8004d0c:	200005cc 	.word	0x200005cc
 8004d10:	200005c0 	.word	0x200005c0
 8004d14:	200004bc 	.word	0x200004bc
 8004d18:	200004b8 	.word	0x200004b8
 8004d1c:	2000005c 	.word	0x2000005c

08004d20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	60fb      	str	r3, [r7, #12]
}
 8004d42:	bf00      	nop
 8004d44:	e7fe      	b.n	8004d44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d46:	4b07      	ldr	r3, [pc, #28]	; (8004d64 <vTaskPlaceOnEventList+0x44>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3318      	adds	r3, #24
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fe fd1f 	bl	8003792 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d54:	2101      	movs	r1, #1
 8004d56:	6838      	ldr	r0, [r7, #0]
 8004d58:	f000 fb82 	bl	8005460 <prvAddCurrentTaskToDelayedList>
}
 8004d5c:	bf00      	nop
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	200004b8 	.word	0x200004b8

08004d68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10a      	bne.n	8004d94 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	60fb      	str	r3, [r7, #12]
}
 8004d90:	bf00      	nop
 8004d92:	e7fe      	b.n	8004d92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	3318      	adds	r3, #24
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fe fd33 	bl	8003804 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d9e:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <xTaskRemoveFromEventList+0xac>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d11c      	bne.n	8004de0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	3304      	adds	r3, #4
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fe fd2a 	bl	8003804 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	2201      	movs	r2, #1
 8004db6:	409a      	lsls	r2, r3
 8004db8:	4b17      	ldr	r3, [pc, #92]	; (8004e18 <xTaskRemoveFromEventList+0xb0>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	4a16      	ldr	r2, [pc, #88]	; (8004e18 <xTaskRemoveFromEventList+0xb0>)
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4a13      	ldr	r2, [pc, #76]	; (8004e1c <xTaskRemoveFromEventList+0xb4>)
 8004dd0:	441a      	add	r2, r3
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4610      	mov	r0, r2
 8004dda:	f7fe fcb6 	bl	800374a <vListInsertEnd>
 8004dde:	e005      	b.n	8004dec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	3318      	adds	r3, #24
 8004de4:	4619      	mov	r1, r3
 8004de6:	480e      	ldr	r0, [pc, #56]	; (8004e20 <xTaskRemoveFromEventList+0xb8>)
 8004de8:	f7fe fcaf 	bl	800374a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df0:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <xTaskRemoveFromEventList+0xbc>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d905      	bls.n	8004e06 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004dfe:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <xTaskRemoveFromEventList+0xc0>)
 8004e00:	2201      	movs	r2, #1
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	e001      	b.n	8004e0a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004e0a:	697b      	ldr	r3, [r7, #20]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	200005e0 	.word	0x200005e0
 8004e18:	200005c0 	.word	0x200005c0
 8004e1c:	200004bc 	.word	0x200004bc
 8004e20:	20000578 	.word	0x20000578
 8004e24:	200004b8 	.word	0x200004b8
 8004e28:	200005cc 	.word	0x200005cc

08004e2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e34:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <vTaskInternalSetTimeOutState+0x24>)
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e3c:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <vTaskInternalSetTimeOutState+0x28>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	605a      	str	r2, [r3, #4]
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	200005d0 	.word	0x200005d0
 8004e54:	200005bc 	.word	0x200005bc

08004e58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10a      	bne.n	8004e7e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	613b      	str	r3, [r7, #16]
}
 8004e7a:	bf00      	nop
 8004e7c:	e7fe      	b.n	8004e7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	60fb      	str	r3, [r7, #12]
}
 8004e96:	bf00      	nop
 8004e98:	e7fe      	b.n	8004e98 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004e9a:	f000 fc73 	bl	8005784 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e9e:	4b1d      	ldr	r3, [pc, #116]	; (8004f14 <xTaskCheckForTimeOut+0xbc>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb6:	d102      	bne.n	8004ebe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61fb      	str	r3, [r7, #28]
 8004ebc:	e023      	b.n	8004f06 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	4b15      	ldr	r3, [pc, #84]	; (8004f18 <xTaskCheckForTimeOut+0xc0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d007      	beq.n	8004eda <xTaskCheckForTimeOut+0x82>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d302      	bcc.n	8004eda <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	61fb      	str	r3, [r7, #28]
 8004ed8:	e015      	b.n	8004f06 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d20b      	bcs.n	8004efc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	1ad2      	subs	r2, r2, r3
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff ff9b 	bl	8004e2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	e004      	b.n	8004f06 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f02:	2301      	movs	r3, #1
 8004f04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004f06:	f000 fc6d 	bl	80057e4 <vPortExitCritical>

	return xReturn;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3720      	adds	r7, #32
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	200005bc 	.word	0x200005bc
 8004f18:	200005d0 	.word	0x200005d0

08004f1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f20:	4b03      	ldr	r3, [pc, #12]	; (8004f30 <vTaskMissedYield+0x14>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	601a      	str	r2, [r3, #0]
}
 8004f26:	bf00      	nop
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	200005cc 	.word	0x200005cc

08004f34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f3c:	f000 f852 	bl	8004fe4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f40:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <prvIdleTask+0x28>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d9f9      	bls.n	8004f3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <prvIdleTask+0x2c>)
 8004f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f58:	e7f0      	b.n	8004f3c <prvIdleTask+0x8>
 8004f5a:	bf00      	nop
 8004f5c:	200004bc 	.word	0x200004bc
 8004f60:	e000ed04 	.word	0xe000ed04

08004f64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	607b      	str	r3, [r7, #4]
 8004f6e:	e00c      	b.n	8004f8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4a12      	ldr	r2, [pc, #72]	; (8004fc4 <prvInitialiseTaskLists+0x60>)
 8004f7c:	4413      	add	r3, r2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fe fbb6 	bl	80036f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3301      	adds	r3, #1
 8004f88:	607b      	str	r3, [r7, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b06      	cmp	r3, #6
 8004f8e:	d9ef      	bls.n	8004f70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f90:	480d      	ldr	r0, [pc, #52]	; (8004fc8 <prvInitialiseTaskLists+0x64>)
 8004f92:	f7fe fbad 	bl	80036f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f96:	480d      	ldr	r0, [pc, #52]	; (8004fcc <prvInitialiseTaskLists+0x68>)
 8004f98:	f7fe fbaa 	bl	80036f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f9c:	480c      	ldr	r0, [pc, #48]	; (8004fd0 <prvInitialiseTaskLists+0x6c>)
 8004f9e:	f7fe fba7 	bl	80036f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004fa2:	480c      	ldr	r0, [pc, #48]	; (8004fd4 <prvInitialiseTaskLists+0x70>)
 8004fa4:	f7fe fba4 	bl	80036f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004fa8:	480b      	ldr	r0, [pc, #44]	; (8004fd8 <prvInitialiseTaskLists+0x74>)
 8004faa:	f7fe fba1 	bl	80036f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004fae:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <prvInitialiseTaskLists+0x78>)
 8004fb0:	4a05      	ldr	r2, [pc, #20]	; (8004fc8 <prvInitialiseTaskLists+0x64>)
 8004fb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004fb4:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <prvInitialiseTaskLists+0x7c>)
 8004fb6:	4a05      	ldr	r2, [pc, #20]	; (8004fcc <prvInitialiseTaskLists+0x68>)
 8004fb8:	601a      	str	r2, [r3, #0]
}
 8004fba:	bf00      	nop
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	200004bc 	.word	0x200004bc
 8004fc8:	20000548 	.word	0x20000548
 8004fcc:	2000055c 	.word	0x2000055c
 8004fd0:	20000578 	.word	0x20000578
 8004fd4:	2000058c 	.word	0x2000058c
 8004fd8:	200005a4 	.word	0x200005a4
 8004fdc:	20000570 	.word	0x20000570
 8004fe0:	20000574 	.word	0x20000574

08004fe4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fea:	e019      	b.n	8005020 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004fec:	f000 fbca 	bl	8005784 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff0:	4b10      	ldr	r3, [pc, #64]	; (8005034 <prvCheckTasksWaitingTermination+0x50>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fe fc01 	bl	8003804 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005002:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <prvCheckTasksWaitingTermination+0x54>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3b01      	subs	r3, #1
 8005008:	4a0b      	ldr	r2, [pc, #44]	; (8005038 <prvCheckTasksWaitingTermination+0x54>)
 800500a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <prvCheckTasksWaitingTermination+0x58>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3b01      	subs	r3, #1
 8005012:	4a0a      	ldr	r2, [pc, #40]	; (800503c <prvCheckTasksWaitingTermination+0x58>)
 8005014:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005016:	f000 fbe5 	bl	80057e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f810 	bl	8005040 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005020:	4b06      	ldr	r3, [pc, #24]	; (800503c <prvCheckTasksWaitingTermination+0x58>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1e1      	bne.n	8004fec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005028:	bf00      	nop
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	2000058c 	.word	0x2000058c
 8005038:	200005b8 	.word	0x200005b8
 800503c:	200005a0 	.word	0x200005a0

08005040 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	334c      	adds	r3, #76	; 0x4c
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fead 	bl	8005dac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005058:	2b00      	cmp	r3, #0
 800505a:	d108      	bne.n	800506e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fd7d 	bl	8005b60 <vPortFree>
				vPortFree( pxTCB );
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fd7a 	bl	8005b60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800506c:	e018      	b.n	80050a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005074:	2b01      	cmp	r3, #1
 8005076:	d103      	bne.n	8005080 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 fd71 	bl	8005b60 <vPortFree>
	}
 800507e:	e00f      	b.n	80050a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005086:	2b02      	cmp	r3, #2
 8005088:	d00a      	beq.n	80050a0 <prvDeleteTCB+0x60>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	60fb      	str	r3, [r7, #12]
}
 800509c:	bf00      	nop
 800509e:	e7fe      	b.n	800509e <prvDeleteTCB+0x5e>
	}
 80050a0:	bf00      	nop
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050ae:	4b0c      	ldr	r3, [pc, #48]	; (80050e0 <prvResetNextTaskUnblockTime+0x38>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d104      	bne.n	80050c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80050b8:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <prvResetNextTaskUnblockTime+0x3c>)
 80050ba:	f04f 32ff 	mov.w	r2, #4294967295
 80050be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80050c0:	e008      	b.n	80050d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050c2:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <prvResetNextTaskUnblockTime+0x38>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	4a04      	ldr	r2, [pc, #16]	; (80050e4 <prvResetNextTaskUnblockTime+0x3c>)
 80050d2:	6013      	str	r3, [r2, #0]
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	20000570 	.word	0x20000570
 80050e4:	200005d8 	.word	0x200005d8

080050e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80050ee:	4b0b      	ldr	r3, [pc, #44]	; (800511c <xTaskGetSchedulerState+0x34>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80050f6:	2301      	movs	r3, #1
 80050f8:	607b      	str	r3, [r7, #4]
 80050fa:	e008      	b.n	800510e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050fc:	4b08      	ldr	r3, [pc, #32]	; (8005120 <xTaskGetSchedulerState+0x38>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d102      	bne.n	800510a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005104:	2302      	movs	r3, #2
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	e001      	b.n	800510e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800510a:	2300      	movs	r3, #0
 800510c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800510e:	687b      	ldr	r3, [r7, #4]
	}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	200005c4 	.word	0x200005c4
 8005120:	200005e0 	.word	0x200005e0

08005124 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d05e      	beq.n	80051f8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513e:	4b31      	ldr	r3, [pc, #196]	; (8005204 <xTaskPriorityInherit+0xe0>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	429a      	cmp	r2, r3
 8005146:	d24e      	bcs.n	80051e6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	db06      	blt.n	800515e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005150:	4b2c      	ldr	r3, [pc, #176]	; (8005204 <xTaskPriorityInherit+0xe0>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005156:	f1c3 0207 	rsb	r2, r3, #7
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	6959      	ldr	r1, [r3, #20]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005166:	4613      	mov	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4a26      	ldr	r2, [pc, #152]	; (8005208 <xTaskPriorityInherit+0xe4>)
 8005170:	4413      	add	r3, r2
 8005172:	4299      	cmp	r1, r3
 8005174:	d12f      	bne.n	80051d6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	3304      	adds	r3, #4
 800517a:	4618      	mov	r0, r3
 800517c:	f7fe fb42 	bl	8003804 <uxListRemove>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10a      	bne.n	800519c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	2201      	movs	r2, #1
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	43da      	mvns	r2, r3
 8005192:	4b1e      	ldr	r3, [pc, #120]	; (800520c <xTaskPriorityInherit+0xe8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4013      	ands	r3, r2
 8005198:	4a1c      	ldr	r2, [pc, #112]	; (800520c <xTaskPriorityInherit+0xe8>)
 800519a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800519c:	4b19      	ldr	r3, [pc, #100]	; (8005204 <xTaskPriorityInherit+0xe0>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051aa:	2201      	movs	r2, #1
 80051ac:	409a      	lsls	r2, r3
 80051ae:	4b17      	ldr	r3, [pc, #92]	; (800520c <xTaskPriorityInherit+0xe8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	4a15      	ldr	r2, [pc, #84]	; (800520c <xTaskPriorityInherit+0xe8>)
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4a10      	ldr	r2, [pc, #64]	; (8005208 <xTaskPriorityInherit+0xe4>)
 80051c6:	441a      	add	r2, r3
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4619      	mov	r1, r3
 80051ce:	4610      	mov	r0, r2
 80051d0:	f7fe fabb 	bl	800374a <vListInsertEnd>
 80051d4:	e004      	b.n	80051e0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <xTaskPriorityInherit+0xe0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80051e0:	2301      	movs	r3, #1
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	e008      	b.n	80051f8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ea:	4b06      	ldr	r3, [pc, #24]	; (8005204 <xTaskPriorityInherit+0xe0>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d201      	bcs.n	80051f8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80051f4:	2301      	movs	r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051f8:	68fb      	ldr	r3, [r7, #12]
	}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	200004b8 	.word	0x200004b8
 8005208:	200004bc 	.word	0x200004bc
 800520c:	200005c0 	.word	0x200005c0

08005210 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d06e      	beq.n	8005304 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005226:	4b3a      	ldr	r3, [pc, #232]	; (8005310 <xTaskPriorityDisinherit+0x100>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	429a      	cmp	r2, r3
 800522e:	d00a      	beq.n	8005246 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	60fb      	str	r3, [r7, #12]
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10a      	bne.n	8005264 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	60bb      	str	r3, [r7, #8]
}
 8005260:	bf00      	nop
 8005262:	e7fe      	b.n	8005262 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005268:	1e5a      	subs	r2, r3, #1
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005276:	429a      	cmp	r2, r3
 8005278:	d044      	beq.n	8005304 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527e:	2b00      	cmp	r3, #0
 8005280:	d140      	bne.n	8005304 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	3304      	adds	r3, #4
 8005286:	4618      	mov	r0, r3
 8005288:	f7fe fabc 	bl	8003804 <uxListRemove>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d115      	bne.n	80052be <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005296:	491f      	ldr	r1, [pc, #124]	; (8005314 <xTaskPriorityDisinherit+0x104>)
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	440b      	add	r3, r1
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <xTaskPriorityDisinherit+0xae>
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	2201      	movs	r2, #1
 80052ae:	fa02 f303 	lsl.w	r3, r2, r3
 80052b2:	43da      	mvns	r2, r3
 80052b4:	4b18      	ldr	r3, [pc, #96]	; (8005318 <xTaskPriorityDisinherit+0x108>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4013      	ands	r3, r2
 80052ba:	4a17      	ldr	r2, [pc, #92]	; (8005318 <xTaskPriorityDisinherit+0x108>)
 80052bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	f1c3 0207 	rsb	r2, r3, #7
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d6:	2201      	movs	r2, #1
 80052d8:	409a      	lsls	r2, r3
 80052da:	4b0f      	ldr	r3, [pc, #60]	; (8005318 <xTaskPriorityDisinherit+0x108>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4313      	orrs	r3, r2
 80052e0:	4a0d      	ldr	r2, [pc, #52]	; (8005318 <xTaskPriorityDisinherit+0x108>)
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e8:	4613      	mov	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4a08      	ldr	r2, [pc, #32]	; (8005314 <xTaskPriorityDisinherit+0x104>)
 80052f2:	441a      	add	r2, r3
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	3304      	adds	r3, #4
 80052f8:	4619      	mov	r1, r3
 80052fa:	4610      	mov	r0, r2
 80052fc:	f7fe fa25 	bl	800374a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005300:	2301      	movs	r3, #1
 8005302:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005304:	697b      	ldr	r3, [r7, #20]
	}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	200004b8 	.word	0x200004b8
 8005314:	200004bc 	.word	0x200004bc
 8005318:	200005c0 	.word	0x200005c0

0800531c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800531c:	b580      	push	{r7, lr}
 800531e:	b088      	sub	sp, #32
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800532a:	2301      	movs	r3, #1
 800532c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d077      	beq.n	8005424 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10a      	bne.n	8005352 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	60fb      	str	r3, [r7, #12]
}
 800534e:	bf00      	nop
 8005350:	e7fe      	b.n	8005350 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d902      	bls.n	8005362 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	e002      	b.n	8005368 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	429a      	cmp	r2, r3
 8005370:	d058      	beq.n	8005424 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	429a      	cmp	r2, r3
 800537a:	d153      	bne.n	8005424 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800537c:	4b2b      	ldr	r3, [pc, #172]	; (800542c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	429a      	cmp	r2, r3
 8005384:	d10a      	bne.n	800539c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	60bb      	str	r3, [r7, #8]
}
 8005398:	bf00      	nop
 800539a:	e7fe      	b.n	800539a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	69fa      	ldr	r2, [r7, #28]
 80053a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	db04      	blt.n	80053ba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f1c3 0207 	rsb	r2, r3, #7
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	6959      	ldr	r1, [r3, #20]
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4a19      	ldr	r2, [pc, #100]	; (8005430 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80053ca:	4413      	add	r3, r2
 80053cc:	4299      	cmp	r1, r3
 80053ce:	d129      	bne.n	8005424 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	3304      	adds	r3, #4
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fe fa15 	bl	8003804 <uxListRemove>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	2201      	movs	r2, #1
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	43da      	mvns	r2, r3
 80053ec:	4b11      	ldr	r3, [pc, #68]	; (8005434 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4013      	ands	r3, r2
 80053f2:	4a10      	ldr	r2, [pc, #64]	; (8005434 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80053f4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fa:	2201      	movs	r2, #1
 80053fc:	409a      	lsls	r2, r3
 80053fe:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4313      	orrs	r3, r2
 8005404:	4a0b      	ldr	r2, [pc, #44]	; (8005434 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4a06      	ldr	r2, [pc, #24]	; (8005430 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005416:	441a      	add	r2, r3
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	3304      	adds	r3, #4
 800541c:	4619      	mov	r1, r3
 800541e:	4610      	mov	r0, r2
 8005420:	f7fe f993 	bl	800374a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005424:	bf00      	nop
 8005426:	3720      	adds	r7, #32
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	200004b8 	.word	0x200004b8
 8005430:	200004bc 	.word	0x200004bc
 8005434:	200005c0 	.word	0x200005c0

08005438 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800543c:	4b07      	ldr	r3, [pc, #28]	; (800545c <pvTaskIncrementMutexHeldCount+0x24>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d004      	beq.n	800544e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005444:	4b05      	ldr	r3, [pc, #20]	; (800545c <pvTaskIncrementMutexHeldCount+0x24>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800544a:	3201      	adds	r2, #1
 800544c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800544e:	4b03      	ldr	r3, [pc, #12]	; (800545c <pvTaskIncrementMutexHeldCount+0x24>)
 8005450:	681b      	ldr	r3, [r3, #0]
	}
 8005452:	4618      	mov	r0, r3
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	200004b8 	.word	0x200004b8

08005460 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800546a:	4b29      	ldr	r3, [pc, #164]	; (8005510 <prvAddCurrentTaskToDelayedList+0xb0>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005470:	4b28      	ldr	r3, [pc, #160]	; (8005514 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3304      	adds	r3, #4
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe f9c4 	bl	8003804 <uxListRemove>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10b      	bne.n	800549a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005482:	4b24      	ldr	r3, [pc, #144]	; (8005514 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005488:	2201      	movs	r2, #1
 800548a:	fa02 f303 	lsl.w	r3, r2, r3
 800548e:	43da      	mvns	r2, r3
 8005490:	4b21      	ldr	r3, [pc, #132]	; (8005518 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4013      	ands	r3, r2
 8005496:	4a20      	ldr	r2, [pc, #128]	; (8005518 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005498:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d10a      	bne.n	80054b8 <prvAddCurrentTaskToDelayedList+0x58>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d007      	beq.n	80054b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054a8:	4b1a      	ldr	r3, [pc, #104]	; (8005514 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3304      	adds	r3, #4
 80054ae:	4619      	mov	r1, r3
 80054b0:	481a      	ldr	r0, [pc, #104]	; (800551c <prvAddCurrentTaskToDelayedList+0xbc>)
 80054b2:	f7fe f94a 	bl	800374a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054b6:	e026      	b.n	8005506 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054c0:	4b14      	ldr	r3, [pc, #80]	; (8005514 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d209      	bcs.n	80054e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054d0:	4b13      	ldr	r3, [pc, #76]	; (8005520 <prvAddCurrentTaskToDelayedList+0xc0>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	4b0f      	ldr	r3, [pc, #60]	; (8005514 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3304      	adds	r3, #4
 80054da:	4619      	mov	r1, r3
 80054dc:	4610      	mov	r0, r2
 80054de:	f7fe f958 	bl	8003792 <vListInsert>
}
 80054e2:	e010      	b.n	8005506 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054e4:	4b0f      	ldr	r3, [pc, #60]	; (8005524 <prvAddCurrentTaskToDelayedList+0xc4>)
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	4b0a      	ldr	r3, [pc, #40]	; (8005514 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3304      	adds	r3, #4
 80054ee:	4619      	mov	r1, r3
 80054f0:	4610      	mov	r0, r2
 80054f2:	f7fe f94e 	bl	8003792 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80054f6:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <prvAddCurrentTaskToDelayedList+0xc8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d202      	bcs.n	8005506 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005500:	4a09      	ldr	r2, [pc, #36]	; (8005528 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	6013      	str	r3, [r2, #0]
}
 8005506:	bf00      	nop
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	200005bc 	.word	0x200005bc
 8005514:	200004b8 	.word	0x200004b8
 8005518:	200005c0 	.word	0x200005c0
 800551c:	200005a4 	.word	0x200005a4
 8005520:	20000574 	.word	0x20000574
 8005524:	20000570 	.word	0x20000570
 8005528:	200005d8 	.word	0x200005d8

0800552c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3b04      	subs	r3, #4
 800553c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3b04      	subs	r3, #4
 800554a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f023 0201 	bic.w	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3b04      	subs	r3, #4
 800555a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800555c:	4a0c      	ldr	r2, [pc, #48]	; (8005590 <pxPortInitialiseStack+0x64>)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3b14      	subs	r3, #20
 8005566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3b04      	subs	r3, #4
 8005572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f06f 0202 	mvn.w	r2, #2
 800557a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3b20      	subs	r3, #32
 8005580:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005582:	68fb      	ldr	r3, [r7, #12]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	08005595 	.word	0x08005595

08005594 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800559a:	2300      	movs	r3, #0
 800559c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800559e:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <prvTaskExitError+0x54>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a6:	d00a      	beq.n	80055be <prvTaskExitError+0x2a>
	__asm volatile
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	f383 8811 	msr	BASEPRI, r3
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	60fb      	str	r3, [r7, #12]
}
 80055ba:	bf00      	nop
 80055bc:	e7fe      	b.n	80055bc <prvTaskExitError+0x28>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	60bb      	str	r3, [r7, #8]
}
 80055d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80055d2:	bf00      	nop
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0fc      	beq.n	80055d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80055da:	bf00      	nop
 80055dc:	bf00      	nop
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	2000000c 	.word	0x2000000c
 80055ec:	00000000 	.word	0x00000000

080055f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80055f0:	4b07      	ldr	r3, [pc, #28]	; (8005610 <pxCurrentTCBConst2>)
 80055f2:	6819      	ldr	r1, [r3, #0]
 80055f4:	6808      	ldr	r0, [r1, #0]
 80055f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055fa:	f380 8809 	msr	PSP, r0
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f04f 0000 	mov.w	r0, #0
 8005606:	f380 8811 	msr	BASEPRI, r0
 800560a:	4770      	bx	lr
 800560c:	f3af 8000 	nop.w

08005610 <pxCurrentTCBConst2>:
 8005610:	200004b8 	.word	0x200004b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop

08005618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005618:	4808      	ldr	r0, [pc, #32]	; (800563c <prvPortStartFirstTask+0x24>)
 800561a:	6800      	ldr	r0, [r0, #0]
 800561c:	6800      	ldr	r0, [r0, #0]
 800561e:	f380 8808 	msr	MSP, r0
 8005622:	f04f 0000 	mov.w	r0, #0
 8005626:	f380 8814 	msr	CONTROL, r0
 800562a:	b662      	cpsie	i
 800562c:	b661      	cpsie	f
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	df00      	svc	0
 8005638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800563a:	bf00      	nop
 800563c:	e000ed08 	.word	0xe000ed08

08005640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005646:	4b46      	ldr	r3, [pc, #280]	; (8005760 <xPortStartScheduler+0x120>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a46      	ldr	r2, [pc, #280]	; (8005764 <xPortStartScheduler+0x124>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d10a      	bne.n	8005666 <xPortStartScheduler+0x26>
	__asm volatile
 8005650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	613b      	str	r3, [r7, #16]
}
 8005662:	bf00      	nop
 8005664:	e7fe      	b.n	8005664 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005666:	4b3e      	ldr	r3, [pc, #248]	; (8005760 <xPortStartScheduler+0x120>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a3f      	ldr	r2, [pc, #252]	; (8005768 <xPortStartScheduler+0x128>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d10a      	bne.n	8005686 <xPortStartScheduler+0x46>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	60fb      	str	r3, [r7, #12]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005686:	4b39      	ldr	r3, [pc, #228]	; (800576c <xPortStartScheduler+0x12c>)
 8005688:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	b2db      	uxtb	r3, r3
 8005690:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	22ff      	movs	r2, #255	; 0xff
 8005696:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	4b31      	ldr	r3, [pc, #196]	; (8005770 <xPortStartScheduler+0x130>)
 80056ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056ae:	4b31      	ldr	r3, [pc, #196]	; (8005774 <xPortStartScheduler+0x134>)
 80056b0:	2207      	movs	r2, #7
 80056b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056b4:	e009      	b.n	80056ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80056b6:	4b2f      	ldr	r3, [pc, #188]	; (8005774 <xPortStartScheduler+0x134>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	4a2d      	ldr	r2, [pc, #180]	; (8005774 <xPortStartScheduler+0x134>)
 80056be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056ca:	78fb      	ldrb	r3, [r7, #3]
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d2:	2b80      	cmp	r3, #128	; 0x80
 80056d4:	d0ef      	beq.n	80056b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056d6:	4b27      	ldr	r3, [pc, #156]	; (8005774 <xPortStartScheduler+0x134>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f1c3 0307 	rsb	r3, r3, #7
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d00a      	beq.n	80056f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	60bb      	str	r3, [r7, #8]
}
 80056f4:	bf00      	nop
 80056f6:	e7fe      	b.n	80056f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056f8:	4b1e      	ldr	r3, [pc, #120]	; (8005774 <xPortStartScheduler+0x134>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	021b      	lsls	r3, r3, #8
 80056fe:	4a1d      	ldr	r2, [pc, #116]	; (8005774 <xPortStartScheduler+0x134>)
 8005700:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005702:	4b1c      	ldr	r3, [pc, #112]	; (8005774 <xPortStartScheduler+0x134>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800570a:	4a1a      	ldr	r2, [pc, #104]	; (8005774 <xPortStartScheduler+0x134>)
 800570c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	b2da      	uxtb	r2, r3
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005716:	4b18      	ldr	r3, [pc, #96]	; (8005778 <xPortStartScheduler+0x138>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a17      	ldr	r2, [pc, #92]	; (8005778 <xPortStartScheduler+0x138>)
 800571c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005720:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005722:	4b15      	ldr	r3, [pc, #84]	; (8005778 <xPortStartScheduler+0x138>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a14      	ldr	r2, [pc, #80]	; (8005778 <xPortStartScheduler+0x138>)
 8005728:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800572c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800572e:	f000 f8dd 	bl	80058ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005732:	4b12      	ldr	r3, [pc, #72]	; (800577c <xPortStartScheduler+0x13c>)
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005738:	f000 f8fc 	bl	8005934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800573c:	4b10      	ldr	r3, [pc, #64]	; (8005780 <xPortStartScheduler+0x140>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a0f      	ldr	r2, [pc, #60]	; (8005780 <xPortStartScheduler+0x140>)
 8005742:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005746:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005748:	f7ff ff66 	bl	8005618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800574c:	f7ff fa86 	bl	8004c5c <vTaskSwitchContext>
	prvTaskExitError();
 8005750:	f7ff ff20 	bl	8005594 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	e000ed00 	.word	0xe000ed00
 8005764:	410fc271 	.word	0x410fc271
 8005768:	410fc270 	.word	0x410fc270
 800576c:	e000e400 	.word	0xe000e400
 8005770:	200005e4 	.word	0x200005e4
 8005774:	200005e8 	.word	0x200005e8
 8005778:	e000ed20 	.word	0xe000ed20
 800577c:	2000000c 	.word	0x2000000c
 8005780:	e000ef34 	.word	0xe000ef34

08005784 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	607b      	str	r3, [r7, #4]
}
 800579c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800579e:	4b0f      	ldr	r3, [pc, #60]	; (80057dc <vPortEnterCritical+0x58>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3301      	adds	r3, #1
 80057a4:	4a0d      	ldr	r2, [pc, #52]	; (80057dc <vPortEnterCritical+0x58>)
 80057a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057a8:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <vPortEnterCritical+0x58>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d10f      	bne.n	80057d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057b0:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <vPortEnterCritical+0x5c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	603b      	str	r3, [r7, #0]
}
 80057cc:	bf00      	nop
 80057ce:	e7fe      	b.n	80057ce <vPortEnterCritical+0x4a>
	}
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	2000000c 	.word	0x2000000c
 80057e0:	e000ed04 	.word	0xe000ed04

080057e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80057ea:	4b12      	ldr	r3, [pc, #72]	; (8005834 <vPortExitCritical+0x50>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10a      	bne.n	8005808 <vPortExitCritical+0x24>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	607b      	str	r3, [r7, #4]
}
 8005804:	bf00      	nop
 8005806:	e7fe      	b.n	8005806 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005808:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <vPortExitCritical+0x50>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3b01      	subs	r3, #1
 800580e:	4a09      	ldr	r2, [pc, #36]	; (8005834 <vPortExitCritical+0x50>)
 8005810:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005812:	4b08      	ldr	r3, [pc, #32]	; (8005834 <vPortExitCritical+0x50>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d105      	bne.n	8005826 <vPortExitCritical+0x42>
 800581a:	2300      	movs	r3, #0
 800581c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	f383 8811 	msr	BASEPRI, r3
}
 8005824:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	2000000c 	.word	0x2000000c
	...

08005840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005840:	f3ef 8009 	mrs	r0, PSP
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	4b15      	ldr	r3, [pc, #84]	; (80058a0 <pxCurrentTCBConst>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	f01e 0f10 	tst.w	lr, #16
 8005850:	bf08      	it	eq
 8005852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800585a:	6010      	str	r0, [r2, #0]
 800585c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005860:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005864:	f380 8811 	msr	BASEPRI, r0
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f7ff f9f4 	bl	8004c5c <vTaskSwitchContext>
 8005874:	f04f 0000 	mov.w	r0, #0
 8005878:	f380 8811 	msr	BASEPRI, r0
 800587c:	bc09      	pop	{r0, r3}
 800587e:	6819      	ldr	r1, [r3, #0]
 8005880:	6808      	ldr	r0, [r1, #0]
 8005882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005886:	f01e 0f10 	tst.w	lr, #16
 800588a:	bf08      	it	eq
 800588c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005890:	f380 8809 	msr	PSP, r0
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	f3af 8000 	nop.w

080058a0 <pxCurrentTCBConst>:
 80058a0:	200004b8 	.word	0x200004b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop

080058a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	607b      	str	r3, [r7, #4]
}
 80058c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058c2:	f7ff f913 	bl	8004aec <xTaskIncrementTick>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058cc:	4b06      	ldr	r3, [pc, #24]	; (80058e8 <SysTick_Handler+0x40>)
 80058ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	2300      	movs	r3, #0
 80058d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	f383 8811 	msr	BASEPRI, r3
}
 80058de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80058e0:	bf00      	nop
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	e000ed04 	.word	0xe000ed04

080058ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80058f0:	4b0b      	ldr	r3, [pc, #44]	; (8005920 <vPortSetupTimerInterrupt+0x34>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80058f6:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <vPortSetupTimerInterrupt+0x38>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80058fc:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <vPortSetupTimerInterrupt+0x3c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a0a      	ldr	r2, [pc, #40]	; (800592c <vPortSetupTimerInterrupt+0x40>)
 8005902:	fba2 2303 	umull	r2, r3, r2, r3
 8005906:	099b      	lsrs	r3, r3, #6
 8005908:	4a09      	ldr	r2, [pc, #36]	; (8005930 <vPortSetupTimerInterrupt+0x44>)
 800590a:	3b01      	subs	r3, #1
 800590c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800590e:	4b04      	ldr	r3, [pc, #16]	; (8005920 <vPortSetupTimerInterrupt+0x34>)
 8005910:	2207      	movs	r2, #7
 8005912:	601a      	str	r2, [r3, #0]
}
 8005914:	bf00      	nop
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	e000e010 	.word	0xe000e010
 8005924:	e000e018 	.word	0xe000e018
 8005928:	20000000 	.word	0x20000000
 800592c:	10624dd3 	.word	0x10624dd3
 8005930:	e000e014 	.word	0xe000e014

08005934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005934:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005944 <vPortEnableVFP+0x10>
 8005938:	6801      	ldr	r1, [r0, #0]
 800593a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800593e:	6001      	str	r1, [r0, #0]
 8005940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005942:	bf00      	nop
 8005944:	e000ed88 	.word	0xe000ed88

08005948 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800594e:	f3ef 8305 	mrs	r3, IPSR
 8005952:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b0f      	cmp	r3, #15
 8005958:	d914      	bls.n	8005984 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800595a:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <vPortValidateInterruptPriority+0x70>)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005964:	4b15      	ldr	r3, [pc, #84]	; (80059bc <vPortValidateInterruptPriority+0x74>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	7afa      	ldrb	r2, [r7, #11]
 800596a:	429a      	cmp	r2, r3
 800596c:	d20a      	bcs.n	8005984 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	607b      	str	r3, [r7, #4]
}
 8005980:	bf00      	nop
 8005982:	e7fe      	b.n	8005982 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005984:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <vPortValidateInterruptPriority+0x78>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800598c:	4b0d      	ldr	r3, [pc, #52]	; (80059c4 <vPortValidateInterruptPriority+0x7c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d90a      	bls.n	80059aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	603b      	str	r3, [r7, #0]
}
 80059a6:	bf00      	nop
 80059a8:	e7fe      	b.n	80059a8 <vPortValidateInterruptPriority+0x60>
	}
 80059aa:	bf00      	nop
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	e000e3f0 	.word	0xe000e3f0
 80059bc:	200005e4 	.word	0x200005e4
 80059c0:	e000ed0c 	.word	0xe000ed0c
 80059c4:	200005e8 	.word	0x200005e8

080059c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08a      	sub	sp, #40	; 0x28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80059d0:	2300      	movs	r3, #0
 80059d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80059d4:	f7fe ffe0 	bl	8004998 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80059d8:	4b5b      	ldr	r3, [pc, #364]	; (8005b48 <pvPortMalloc+0x180>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80059e0:	f000 f920 	bl	8005c24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80059e4:	4b59      	ldr	r3, [pc, #356]	; (8005b4c <pvPortMalloc+0x184>)
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4013      	ands	r3, r2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f040 8093 	bne.w	8005b18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01d      	beq.n	8005a34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80059f8:	2208      	movs	r2, #8
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4413      	add	r3, r2
 80059fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d014      	beq.n	8005a34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f023 0307 	bic.w	r3, r3, #7
 8005a10:	3308      	adds	r3, #8
 8005a12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <pvPortMalloc+0x6c>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	617b      	str	r3, [r7, #20]
}
 8005a30:	bf00      	nop
 8005a32:	e7fe      	b.n	8005a32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d06e      	beq.n	8005b18 <pvPortMalloc+0x150>
 8005a3a:	4b45      	ldr	r3, [pc, #276]	; (8005b50 <pvPortMalloc+0x188>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d869      	bhi.n	8005b18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a44:	4b43      	ldr	r3, [pc, #268]	; (8005b54 <pvPortMalloc+0x18c>)
 8005a46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a48:	4b42      	ldr	r3, [pc, #264]	; (8005b54 <pvPortMalloc+0x18c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a4e:	e004      	b.n	8005a5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d903      	bls.n	8005a6c <pvPortMalloc+0xa4>
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1f1      	bne.n	8005a50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a6c:	4b36      	ldr	r3, [pc, #216]	; (8005b48 <pvPortMalloc+0x180>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d050      	beq.n	8005b18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2208      	movs	r2, #8
 8005a7c:	4413      	add	r3, r2
 8005a7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	1ad2      	subs	r2, r2, r3
 8005a90:	2308      	movs	r3, #8
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d91f      	bls.n	8005ad8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <pvPortMalloc+0xf8>
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	613b      	str	r3, [r7, #16]
}
 8005abc:	bf00      	nop
 8005abe:	e7fe      	b.n	8005abe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	1ad2      	subs	r2, r2, r3
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ad2:	69b8      	ldr	r0, [r7, #24]
 8005ad4:	f000 f908 	bl	8005ce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ad8:	4b1d      	ldr	r3, [pc, #116]	; (8005b50 <pvPortMalloc+0x188>)
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	4a1b      	ldr	r2, [pc, #108]	; (8005b50 <pvPortMalloc+0x188>)
 8005ae4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ae6:	4b1a      	ldr	r3, [pc, #104]	; (8005b50 <pvPortMalloc+0x188>)
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	4b1b      	ldr	r3, [pc, #108]	; (8005b58 <pvPortMalloc+0x190>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d203      	bcs.n	8005afa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005af2:	4b17      	ldr	r3, [pc, #92]	; (8005b50 <pvPortMalloc+0x188>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a18      	ldr	r2, [pc, #96]	; (8005b58 <pvPortMalloc+0x190>)
 8005af8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	4b13      	ldr	r3, [pc, #76]	; (8005b4c <pvPortMalloc+0x184>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	431a      	orrs	r2, r3
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b0e:	4b13      	ldr	r3, [pc, #76]	; (8005b5c <pvPortMalloc+0x194>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3301      	adds	r3, #1
 8005b14:	4a11      	ldr	r2, [pc, #68]	; (8005b5c <pvPortMalloc+0x194>)
 8005b16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b18:	f7fe ff4c 	bl	80049b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	f003 0307 	and.w	r3, r3, #7
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00a      	beq.n	8005b3c <pvPortMalloc+0x174>
	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	60fb      	str	r3, [r7, #12]
}
 8005b38:	bf00      	nop
 8005b3a:	e7fe      	b.n	8005b3a <pvPortMalloc+0x172>
	return pvReturn;
 8005b3c:	69fb      	ldr	r3, [r7, #28]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3728      	adds	r7, #40	; 0x28
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	200041f4 	.word	0x200041f4
 8005b4c:	20004208 	.word	0x20004208
 8005b50:	200041f8 	.word	0x200041f8
 8005b54:	200041ec 	.word	0x200041ec
 8005b58:	200041fc 	.word	0x200041fc
 8005b5c:	20004200 	.word	0x20004200

08005b60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d04d      	beq.n	8005c0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b72:	2308      	movs	r3, #8
 8005b74:	425b      	negs	r3, r3
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	4413      	add	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	4b24      	ldr	r3, [pc, #144]	; (8005c18 <vPortFree+0xb8>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <vPortFree+0x44>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	60fb      	str	r3, [r7, #12]
}
 8005ba0:	bf00      	nop
 8005ba2:	e7fe      	b.n	8005ba2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00a      	beq.n	8005bc2 <vPortFree+0x62>
	__asm volatile
 8005bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	60bb      	str	r3, [r7, #8]
}
 8005bbe:	bf00      	nop
 8005bc0:	e7fe      	b.n	8005bc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	4b14      	ldr	r3, [pc, #80]	; (8005c18 <vPortFree+0xb8>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01e      	beq.n	8005c0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d11a      	bne.n	8005c0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	4b0e      	ldr	r3, [pc, #56]	; (8005c18 <vPortFree+0xb8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	43db      	mvns	r3, r3
 8005be2:	401a      	ands	r2, r3
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005be8:	f7fe fed6 	bl	8004998 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <vPortFree+0xbc>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	4a09      	ldr	r2, [pc, #36]	; (8005c1c <vPortFree+0xbc>)
 8005bf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005bfa:	6938      	ldr	r0, [r7, #16]
 8005bfc:	f000 f874 	bl	8005ce8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c00:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <vPortFree+0xc0>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3301      	adds	r3, #1
 8005c06:	4a06      	ldr	r2, [pc, #24]	; (8005c20 <vPortFree+0xc0>)
 8005c08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c0a:	f7fe fed3 	bl	80049b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c0e:	bf00      	nop
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20004208 	.word	0x20004208
 8005c1c:	200041f8 	.word	0x200041f8
 8005c20:	20004204 	.word	0x20004204

08005c24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c30:	4b27      	ldr	r3, [pc, #156]	; (8005cd0 <prvHeapInit+0xac>)
 8005c32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00c      	beq.n	8005c58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3307      	adds	r3, #7
 8005c42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0307 	bic.w	r3, r3, #7
 8005c4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	4a1f      	ldr	r2, [pc, #124]	; (8005cd0 <prvHeapInit+0xac>)
 8005c54:	4413      	add	r3, r2
 8005c56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c5c:	4a1d      	ldr	r2, [pc, #116]	; (8005cd4 <prvHeapInit+0xb0>)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c62:	4b1c      	ldr	r3, [pc, #112]	; (8005cd4 <prvHeapInit+0xb0>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c70:	2208      	movs	r2, #8
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0307 	bic.w	r3, r3, #7
 8005c7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <prvHeapInit+0xb4>)
 8005c84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c86:	4b14      	ldr	r3, [pc, #80]	; (8005cd8 <prvHeapInit+0xb4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c8e:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <prvHeapInit+0xb4>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	1ad2      	subs	r2, r2, r3
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ca4:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <prvHeapInit+0xb4>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	4a0a      	ldr	r2, [pc, #40]	; (8005cdc <prvHeapInit+0xb8>)
 8005cb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	4a09      	ldr	r2, [pc, #36]	; (8005ce0 <prvHeapInit+0xbc>)
 8005cba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cbc:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <prvHeapInit+0xc0>)
 8005cbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cc2:	601a      	str	r2, [r3, #0]
}
 8005cc4:	bf00      	nop
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	200005ec 	.word	0x200005ec
 8005cd4:	200041ec 	.word	0x200041ec
 8005cd8:	200041f4 	.word	0x200041f4
 8005cdc:	200041fc 	.word	0x200041fc
 8005ce0:	200041f8 	.word	0x200041f8
 8005ce4:	20004208 	.word	0x20004208

08005ce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005cf0:	4b28      	ldr	r3, [pc, #160]	; (8005d94 <prvInsertBlockIntoFreeList+0xac>)
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e002      	b.n	8005cfc <prvInsertBlockIntoFreeList+0x14>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d8f7      	bhi.n	8005cf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	4413      	add	r3, r2
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d108      	bne.n	8005d2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	441a      	add	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	441a      	add	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d118      	bne.n	8005d70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	4b15      	ldr	r3, [pc, #84]	; (8005d98 <prvInsertBlockIntoFreeList+0xb0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d00d      	beq.n	8005d66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	441a      	add	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	e008      	b.n	8005d78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d66:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <prvInsertBlockIntoFreeList+0xb0>)
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	e003      	b.n	8005d78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d002      	beq.n	8005d86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d86:	bf00      	nop
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	200041ec 	.word	0x200041ec
 8005d98:	200041f4 	.word	0x200041f4

08005d9c <memset>:
 8005d9c:	4402      	add	r2, r0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d100      	bne.n	8005da6 <memset+0xa>
 8005da4:	4770      	bx	lr
 8005da6:	f803 1b01 	strb.w	r1, [r3], #1
 8005daa:	e7f9      	b.n	8005da0 <memset+0x4>

08005dac <_reclaim_reent>:
 8005dac:	4b29      	ldr	r3, [pc, #164]	; (8005e54 <_reclaim_reent+0xa8>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4283      	cmp	r3, r0
 8005db2:	b570      	push	{r4, r5, r6, lr}
 8005db4:	4604      	mov	r4, r0
 8005db6:	d04b      	beq.n	8005e50 <_reclaim_reent+0xa4>
 8005db8:	69c3      	ldr	r3, [r0, #28]
 8005dba:	b143      	cbz	r3, 8005dce <_reclaim_reent+0x22>
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d144      	bne.n	8005e4c <_reclaim_reent+0xa0>
 8005dc2:	69e3      	ldr	r3, [r4, #28]
 8005dc4:	6819      	ldr	r1, [r3, #0]
 8005dc6:	b111      	cbz	r1, 8005dce <_reclaim_reent+0x22>
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f000 f879 	bl	8005ec0 <_free_r>
 8005dce:	6961      	ldr	r1, [r4, #20]
 8005dd0:	b111      	cbz	r1, 8005dd8 <_reclaim_reent+0x2c>
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f000 f874 	bl	8005ec0 <_free_r>
 8005dd8:	69e1      	ldr	r1, [r4, #28]
 8005dda:	b111      	cbz	r1, 8005de2 <_reclaim_reent+0x36>
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f000 f86f 	bl	8005ec0 <_free_r>
 8005de2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005de4:	b111      	cbz	r1, 8005dec <_reclaim_reent+0x40>
 8005de6:	4620      	mov	r0, r4
 8005de8:	f000 f86a 	bl	8005ec0 <_free_r>
 8005dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dee:	b111      	cbz	r1, 8005df6 <_reclaim_reent+0x4a>
 8005df0:	4620      	mov	r0, r4
 8005df2:	f000 f865 	bl	8005ec0 <_free_r>
 8005df6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005df8:	b111      	cbz	r1, 8005e00 <_reclaim_reent+0x54>
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f000 f860 	bl	8005ec0 <_free_r>
 8005e00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005e02:	b111      	cbz	r1, 8005e0a <_reclaim_reent+0x5e>
 8005e04:	4620      	mov	r0, r4
 8005e06:	f000 f85b 	bl	8005ec0 <_free_r>
 8005e0a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005e0c:	b111      	cbz	r1, 8005e14 <_reclaim_reent+0x68>
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f000 f856 	bl	8005ec0 <_free_r>
 8005e14:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005e16:	b111      	cbz	r1, 8005e1e <_reclaim_reent+0x72>
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 f851 	bl	8005ec0 <_free_r>
 8005e1e:	6a23      	ldr	r3, [r4, #32]
 8005e20:	b1b3      	cbz	r3, 8005e50 <_reclaim_reent+0xa4>
 8005e22:	4620      	mov	r0, r4
 8005e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005e28:	4718      	bx	r3
 8005e2a:	5949      	ldr	r1, [r1, r5]
 8005e2c:	b941      	cbnz	r1, 8005e40 <_reclaim_reent+0x94>
 8005e2e:	3504      	adds	r5, #4
 8005e30:	69e3      	ldr	r3, [r4, #28]
 8005e32:	2d80      	cmp	r5, #128	; 0x80
 8005e34:	68d9      	ldr	r1, [r3, #12]
 8005e36:	d1f8      	bne.n	8005e2a <_reclaim_reent+0x7e>
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f000 f841 	bl	8005ec0 <_free_r>
 8005e3e:	e7c0      	b.n	8005dc2 <_reclaim_reent+0x16>
 8005e40:	680e      	ldr	r6, [r1, #0]
 8005e42:	4620      	mov	r0, r4
 8005e44:	f000 f83c 	bl	8005ec0 <_free_r>
 8005e48:	4631      	mov	r1, r6
 8005e4a:	e7ef      	b.n	8005e2c <_reclaim_reent+0x80>
 8005e4c:	2500      	movs	r5, #0
 8005e4e:	e7ef      	b.n	8005e30 <_reclaim_reent+0x84>
 8005e50:	bd70      	pop	{r4, r5, r6, pc}
 8005e52:	bf00      	nop
 8005e54:	2000005c 	.word	0x2000005c

08005e58 <__libc_init_array>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	4d0d      	ldr	r5, [pc, #52]	; (8005e90 <__libc_init_array+0x38>)
 8005e5c:	4c0d      	ldr	r4, [pc, #52]	; (8005e94 <__libc_init_array+0x3c>)
 8005e5e:	1b64      	subs	r4, r4, r5
 8005e60:	10a4      	asrs	r4, r4, #2
 8005e62:	2600      	movs	r6, #0
 8005e64:	42a6      	cmp	r6, r4
 8005e66:	d109      	bne.n	8005e7c <__libc_init_array+0x24>
 8005e68:	4d0b      	ldr	r5, [pc, #44]	; (8005e98 <__libc_init_array+0x40>)
 8005e6a:	4c0c      	ldr	r4, [pc, #48]	; (8005e9c <__libc_init_array+0x44>)
 8005e6c:	f000 f880 	bl	8005f70 <_init>
 8005e70:	1b64      	subs	r4, r4, r5
 8005e72:	10a4      	asrs	r4, r4, #2
 8005e74:	2600      	movs	r6, #0
 8005e76:	42a6      	cmp	r6, r4
 8005e78:	d105      	bne.n	8005e86 <__libc_init_array+0x2e>
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}
 8005e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e80:	4798      	blx	r3
 8005e82:	3601      	adds	r6, #1
 8005e84:	e7ee      	b.n	8005e64 <__libc_init_array+0xc>
 8005e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e8a:	4798      	blx	r3
 8005e8c:	3601      	adds	r6, #1
 8005e8e:	e7f2      	b.n	8005e76 <__libc_init_array+0x1e>
 8005e90:	08006030 	.word	0x08006030
 8005e94:	08006030 	.word	0x08006030
 8005e98:	08006030 	.word	0x08006030
 8005e9c:	08006034 	.word	0x08006034

08005ea0 <__retarget_lock_acquire_recursive>:
 8005ea0:	4770      	bx	lr

08005ea2 <__retarget_lock_release_recursive>:
 8005ea2:	4770      	bx	lr

08005ea4 <memcpy>:
 8005ea4:	440a      	add	r2, r1
 8005ea6:	4291      	cmp	r1, r2
 8005ea8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005eac:	d100      	bne.n	8005eb0 <memcpy+0xc>
 8005eae:	4770      	bx	lr
 8005eb0:	b510      	push	{r4, lr}
 8005eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eba:	4291      	cmp	r1, r2
 8005ebc:	d1f9      	bne.n	8005eb2 <memcpy+0xe>
 8005ebe:	bd10      	pop	{r4, pc}

08005ec0 <_free_r>:
 8005ec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ec2:	2900      	cmp	r1, #0
 8005ec4:	d044      	beq.n	8005f50 <_free_r+0x90>
 8005ec6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eca:	9001      	str	r0, [sp, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f1a1 0404 	sub.w	r4, r1, #4
 8005ed2:	bfb8      	it	lt
 8005ed4:	18e4      	addlt	r4, r4, r3
 8005ed6:	f000 f83f 	bl	8005f58 <__malloc_lock>
 8005eda:	4a1e      	ldr	r2, [pc, #120]	; (8005f54 <_free_r+0x94>)
 8005edc:	9801      	ldr	r0, [sp, #4]
 8005ede:	6813      	ldr	r3, [r2, #0]
 8005ee0:	b933      	cbnz	r3, 8005ef0 <_free_r+0x30>
 8005ee2:	6063      	str	r3, [r4, #4]
 8005ee4:	6014      	str	r4, [r2, #0]
 8005ee6:	b003      	add	sp, #12
 8005ee8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005eec:	f000 b83a 	b.w	8005f64 <__malloc_unlock>
 8005ef0:	42a3      	cmp	r3, r4
 8005ef2:	d908      	bls.n	8005f06 <_free_r+0x46>
 8005ef4:	6825      	ldr	r5, [r4, #0]
 8005ef6:	1961      	adds	r1, r4, r5
 8005ef8:	428b      	cmp	r3, r1
 8005efa:	bf01      	itttt	eq
 8005efc:	6819      	ldreq	r1, [r3, #0]
 8005efe:	685b      	ldreq	r3, [r3, #4]
 8005f00:	1949      	addeq	r1, r1, r5
 8005f02:	6021      	streq	r1, [r4, #0]
 8005f04:	e7ed      	b.n	8005ee2 <_free_r+0x22>
 8005f06:	461a      	mov	r2, r3
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	b10b      	cbz	r3, 8005f10 <_free_r+0x50>
 8005f0c:	42a3      	cmp	r3, r4
 8005f0e:	d9fa      	bls.n	8005f06 <_free_r+0x46>
 8005f10:	6811      	ldr	r1, [r2, #0]
 8005f12:	1855      	adds	r5, r2, r1
 8005f14:	42a5      	cmp	r5, r4
 8005f16:	d10b      	bne.n	8005f30 <_free_r+0x70>
 8005f18:	6824      	ldr	r4, [r4, #0]
 8005f1a:	4421      	add	r1, r4
 8005f1c:	1854      	adds	r4, r2, r1
 8005f1e:	42a3      	cmp	r3, r4
 8005f20:	6011      	str	r1, [r2, #0]
 8005f22:	d1e0      	bne.n	8005ee6 <_free_r+0x26>
 8005f24:	681c      	ldr	r4, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	6053      	str	r3, [r2, #4]
 8005f2a:	440c      	add	r4, r1
 8005f2c:	6014      	str	r4, [r2, #0]
 8005f2e:	e7da      	b.n	8005ee6 <_free_r+0x26>
 8005f30:	d902      	bls.n	8005f38 <_free_r+0x78>
 8005f32:	230c      	movs	r3, #12
 8005f34:	6003      	str	r3, [r0, #0]
 8005f36:	e7d6      	b.n	8005ee6 <_free_r+0x26>
 8005f38:	6825      	ldr	r5, [r4, #0]
 8005f3a:	1961      	adds	r1, r4, r5
 8005f3c:	428b      	cmp	r3, r1
 8005f3e:	bf04      	itt	eq
 8005f40:	6819      	ldreq	r1, [r3, #0]
 8005f42:	685b      	ldreq	r3, [r3, #4]
 8005f44:	6063      	str	r3, [r4, #4]
 8005f46:	bf04      	itt	eq
 8005f48:	1949      	addeq	r1, r1, r5
 8005f4a:	6021      	streq	r1, [r4, #0]
 8005f4c:	6054      	str	r4, [r2, #4]
 8005f4e:	e7ca      	b.n	8005ee6 <_free_r+0x26>
 8005f50:	b003      	add	sp, #12
 8005f52:	bd30      	pop	{r4, r5, pc}
 8005f54:	20004348 	.word	0x20004348

08005f58 <__malloc_lock>:
 8005f58:	4801      	ldr	r0, [pc, #4]	; (8005f60 <__malloc_lock+0x8>)
 8005f5a:	f7ff bfa1 	b.w	8005ea0 <__retarget_lock_acquire_recursive>
 8005f5e:	bf00      	nop
 8005f60:	20004344 	.word	0x20004344

08005f64 <__malloc_unlock>:
 8005f64:	4801      	ldr	r0, [pc, #4]	; (8005f6c <__malloc_unlock+0x8>)
 8005f66:	f7ff bf9c 	b.w	8005ea2 <__retarget_lock_release_recursive>
 8005f6a:	bf00      	nop
 8005f6c:	20004344 	.word	0x20004344

08005f70 <_init>:
 8005f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f72:	bf00      	nop
 8005f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f76:	bc08      	pop	{r3}
 8005f78:	469e      	mov	lr, r3
 8005f7a:	4770      	bx	lr

08005f7c <_fini>:
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7e:	bf00      	nop
 8005f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f82:	bc08      	pop	{r3}
 8005f84:	469e      	mov	lr, r3
 8005f86:	4770      	bx	lr
